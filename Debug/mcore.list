
mcore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e8  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003ae0  08003ae0  00004ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000040  08003c18  08003c18  00004c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000180  08003c58  08003c58  00004c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dd8  08003dd8  00005134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08003dd8  08003dd8  00004dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003de4  08003de4  00004de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  08003de8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011394  20000140  08003f1c  00005140  2**5
                  ALLOC
 10 ._user_heap_stack 00000404  200114d4  08003f1c  000054d4  2**0
                  ALLOC
 11 .RxDecripSection 00000100  2007c000  2007c000  00006000  2**2
                  ALLOC
 12 .TxDescripSection 00000080  2007c100  2007c100  00006100  2**2
                  ALLOC
 13 .RxPoolSection 00003000  20078000  20078000  00006000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00005134  2**0
                  CONTENTS, READONLY
 15 .debug_info   00007eb5  00000000  00000000  00005162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000198b  00000000  00000000  0000d017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00001741  00000000  00000000  0000e9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000003d8  00000000  00000000  000100e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000031f  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00022526  00000000  00000000  000107df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000076dd  00000000  00000000  00032d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000af65a  00000000  00000000  0003a3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  000e9a3c  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000186c  00000000  00000000  000e9a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000004b  00000000  00000000  000eb2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000140 	.word	0x20000140
 8000214:	00000000 	.word	0x00000000
 8000218:	08003ac8 	.word	0x08003ac8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000144 	.word	0x20000144
 8000234:	08003ac8 	.word	0x08003ac8

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <selfrel_offset31>:
 800024c:	6803      	ldr	r3, [r0, #0]
 800024e:	005a      	lsls	r2, r3, #1
 8000250:	bf4c      	ite	mi
 8000252:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000256:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 800025a:	4418      	add	r0, r3
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop

08000260 <search_EIT_table>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	b359      	cbz	r1, 80002be <search_EIT_table+0x5e>
 8000266:	f101 38ff 	add.w	r8, r1, #4294967295
 800026a:	4605      	mov	r5, r0
 800026c:	4616      	mov	r6, r2
 800026e:	4647      	mov	r7, r8
 8000270:	f04f 0a00 	mov.w	sl, #0
 8000274:	eb0a 0107 	add.w	r1, sl, r7
 8000278:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800027c:	1049      	asrs	r1, r1, #1
 800027e:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
 8000282:	4648      	mov	r0, r9
 8000284:	f7ff ffe2 	bl	800024c <selfrel_offset31>
 8000288:	4588      	cmp	r8, r1
 800028a:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 800028e:	4603      	mov	r3, r0
 8000290:	d010      	beq.n	80002b4 <search_EIT_table+0x54>
 8000292:	f104 0008 	add.w	r0, r4, #8
 8000296:	42b3      	cmp	r3, r6
 8000298:	4428      	add	r0, r5
 800029a:	d807      	bhi.n	80002ac <search_EIT_table+0x4c>
 800029c:	f7ff ffd6 	bl	800024c <selfrel_offset31>
 80002a0:	3801      	subs	r0, #1
 80002a2:	42b0      	cmp	r0, r6
 80002a4:	d208      	bcs.n	80002b8 <search_EIT_table+0x58>
 80002a6:	f101 0a01 	add.w	sl, r1, #1
 80002aa:	e7e3      	b.n	8000274 <search_EIT_table+0x14>
 80002ac:	458a      	cmp	sl, r1
 80002ae:	d006      	beq.n	80002be <search_EIT_table+0x5e>
 80002b0:	1e4f      	subs	r7, r1, #1
 80002b2:	e7df      	b.n	8000274 <search_EIT_table+0x14>
 80002b4:	42b0      	cmp	r0, r6
 80002b6:	d8f9      	bhi.n	80002ac <search_EIT_table+0x4c>
 80002b8:	4648      	mov	r0, r9
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	f04f 0900 	mov.w	r9, #0
 80002c2:	4648      	mov	r0, r9
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080002c8 <__gnu_unwind_get_pr_addr>:
 80002c8:	2801      	cmp	r0, #1
 80002ca:	d009      	beq.n	80002e0 <__gnu_unwind_get_pr_addr+0x18>
 80002cc:	2802      	cmp	r0, #2
 80002ce:	d005      	beq.n	80002dc <__gnu_unwind_get_pr_addr+0x14>
 80002d0:	4b04      	ldr	r3, [pc, #16]	@ (80002e4 <__gnu_unwind_get_pr_addr+0x1c>)
 80002d2:	2800      	cmp	r0, #0
 80002d4:	bf0c      	ite	eq
 80002d6:	4618      	moveq	r0, r3
 80002d8:	2000      	movne	r0, #0
 80002da:	4770      	bx	lr
 80002dc:	4802      	ldr	r0, [pc, #8]	@ (80002e8 <__gnu_unwind_get_pr_addr+0x20>)
 80002de:	4770      	bx	lr
 80002e0:	4802      	ldr	r0, [pc, #8]	@ (80002ec <__gnu_unwind_get_pr_addr+0x24>)
 80002e2:	4770      	bx	lr
 80002e4:	080009ad 	.word	0x080009ad
 80002e8:	080009b5 	.word	0x080009b5
 80002ec:	080009b1 	.word	0x080009b1

080002f0 <get_eit_entry>:
 80002f0:	b530      	push	{r4, r5, lr}
 80002f2:	4b22      	ldr	r3, [pc, #136]	@ (800037c <get_eit_entry+0x8c>)
 80002f4:	b083      	sub	sp, #12
 80002f6:	4604      	mov	r4, r0
 80002f8:	1e8d      	subs	r5, r1, #2
 80002fa:	b343      	cbz	r3, 800034e <get_eit_entry+0x5e>
 80002fc:	a901      	add	r1, sp, #4
 80002fe:	4628      	mov	r0, r5
 8000300:	f3af 8000 	nop.w
 8000304:	b1f0      	cbz	r0, 8000344 <get_eit_entry+0x54>
 8000306:	9901      	ldr	r1, [sp, #4]
 8000308:	462a      	mov	r2, r5
 800030a:	f7ff ffa9 	bl	8000260 <search_EIT_table>
 800030e:	4601      	mov	r1, r0
 8000310:	b1c0      	cbz	r0, 8000344 <get_eit_entry+0x54>
 8000312:	f7ff ff9b 	bl	800024c <selfrel_offset31>
 8000316:	684b      	ldr	r3, [r1, #4]
 8000318:	64a0      	str	r0, [r4, #72]	@ 0x48
 800031a:	2b01      	cmp	r3, #1
 800031c:	d02b      	beq.n	8000376 <get_eit_entry+0x86>
 800031e:	2b00      	cmp	r3, #0
 8000320:	f101 0004 	add.w	r0, r1, #4
 8000324:	db25      	blt.n	8000372 <get_eit_entry+0x82>
 8000326:	f7ff ff91 	bl	800024c <selfrel_offset31>
 800032a:	2300      	movs	r3, #0
 800032c:	6523      	str	r3, [r4, #80]	@ 0x50
 800032e:	6803      	ldr	r3, [r0, #0]
 8000330:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8000332:	2b00      	cmp	r3, #0
 8000334:	db12      	blt.n	800035c <get_eit_entry+0x6c>
 8000336:	f7ff ff89 	bl	800024c <selfrel_offset31>
 800033a:	4603      	mov	r3, r0
 800033c:	2000      	movs	r0, #0
 800033e:	6123      	str	r3, [r4, #16]
 8000340:	b003      	add	sp, #12
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	2300      	movs	r3, #0
 8000346:	2009      	movs	r0, #9
 8000348:	6123      	str	r3, [r4, #16]
 800034a:	b003      	add	sp, #12
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <get_eit_entry+0x90>)
 8000350:	490c      	ldr	r1, [pc, #48]	@ (8000384 <get_eit_entry+0x94>)
 8000352:	1ac9      	subs	r1, r1, r3
 8000354:	10c9      	asrs	r1, r1, #3
 8000356:	4618      	mov	r0, r3
 8000358:	9101      	str	r1, [sp, #4]
 800035a:	e7d5      	b.n	8000308 <get_eit_entry+0x18>
 800035c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000360:	f7ff ffb2 	bl	80002c8 <__gnu_unwind_get_pr_addr>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	bf0c      	ite	eq
 8000368:	2009      	moveq	r0, #9
 800036a:	2000      	movne	r0, #0
 800036c:	6123      	str	r3, [r4, #16]
 800036e:	b003      	add	sp, #12
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	2301      	movs	r3, #1
 8000374:	e7da      	b.n	800032c <get_eit_entry+0x3c>
 8000376:	2300      	movs	r3, #0
 8000378:	2005      	movs	r0, #5
 800037a:	e7e0      	b.n	800033e <get_eit_entry+0x4e>
 800037c:	00000000 	.word	0x00000000
 8000380:	08003c58 	.word	0x08003c58
 8000384:	08003dd8 	.word	0x08003dd8

08000388 <restore_non_core_regs>:
 8000388:	6803      	ldr	r3, [r0, #0]
 800038a:	07da      	lsls	r2, r3, #31
 800038c:	b510      	push	{r4, lr}
 800038e:	4604      	mov	r4, r0
 8000390:	d406      	bmi.n	80003a0 <restore_non_core_regs+0x18>
 8000392:	079b      	lsls	r3, r3, #30
 8000394:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 8000398:	d509      	bpl.n	80003ae <restore_non_core_regs+0x26>
 800039a:	f000 fc8f 	bl	8000cbc <__gnu_Unwind_Restore_VFP_D>
 800039e:	6823      	ldr	r3, [r4, #0]
 80003a0:	0759      	lsls	r1, r3, #29
 80003a2:	d509      	bpl.n	80003b8 <restore_non_core_regs+0x30>
 80003a4:	071a      	lsls	r2, r3, #28
 80003a6:	d50e      	bpl.n	80003c6 <restore_non_core_regs+0x3e>
 80003a8:	06db      	lsls	r3, r3, #27
 80003aa:	d513      	bpl.n	80003d4 <restore_non_core_regs+0x4c>
 80003ac:	bd10      	pop	{r4, pc}
 80003ae:	f000 fc7d 	bl	8000cac <__gnu_Unwind_Restore_VFP>
 80003b2:	6823      	ldr	r3, [r4, #0]
 80003b4:	0759      	lsls	r1, r3, #29
 80003b6:	d4f5      	bmi.n	80003a4 <restore_non_core_regs+0x1c>
 80003b8:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 80003bc:	f000 fc86 	bl	8000ccc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003c0:	6823      	ldr	r3, [r4, #0]
 80003c2:	071a      	lsls	r2, r3, #28
 80003c4:	d4f0      	bmi.n	80003a8 <restore_non_core_regs+0x20>
 80003c6:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 80003ca:	f000 fc87 	bl	8000cdc <__gnu_Unwind_Restore_WMMXD>
 80003ce:	6823      	ldr	r3, [r4, #0]
 80003d0:	06db      	lsls	r3, r3, #27
 80003d2:	d4eb      	bmi.n	80003ac <restore_non_core_regs+0x24>
 80003d4:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 80003d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003dc:	f000 bcc2 	b.w	8000d64 <__gnu_Unwind_Restore_WMMXC>

080003e0 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003e0:	4603      	mov	r3, r0
 80003e2:	6800      	ldr	r0, [r0, #0]
 80003e4:	b100      	cbz	r0, 80003e8 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003e6:	4418      	add	r0, r3
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop

080003ec <__gnu_unwind_24bit.isra.0>:
 80003ec:	2009      	movs	r0, #9
 80003ee:	4770      	bx	lr

080003f0 <_Unwind_DebugHook>:
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop

080003f4 <unwind_phase2>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	4604      	mov	r4, r0
 80003f8:	460e      	mov	r6, r1
 80003fa:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80003fc:	4620      	mov	r0, r4
 80003fe:	f7ff ff77 	bl	80002f0 <get_eit_entry>
 8000402:	4605      	mov	r5, r0
 8000404:	b988      	cbnz	r0, 800042a <unwind_phase2+0x36>
 8000406:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8000408:	6162      	str	r2, [r4, #20]
 800040a:	6923      	ldr	r3, [r4, #16]
 800040c:	4632      	mov	r2, r6
 800040e:	4621      	mov	r1, r4
 8000410:	2001      	movs	r0, #1
 8000412:	4798      	blx	r3
 8000414:	2808      	cmp	r0, #8
 8000416:	d0f0      	beq.n	80003fa <unwind_phase2+0x6>
 8000418:	2807      	cmp	r0, #7
 800041a:	d106      	bne.n	800042a <unwind_phase2+0x36>
 800041c:	4628      	mov	r0, r5
 800041e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000420:	f7ff ffe6 	bl	80003f0 <_Unwind_DebugHook>
 8000424:	1d30      	adds	r0, r6, #4
 8000426:	f000 fc35 	bl	8000c94 <__restore_core_regs>
 800042a:	f003 fa4b 	bl	80038c4 <abort>
 800042e:	bf00      	nop

08000430 <unwind_phase2_forced>:
 8000430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000434:	f101 0c04 	add.w	ip, r1, #4
 8000438:	68c7      	ldr	r7, [r0, #12]
 800043a:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800043e:	4606      	mov	r6, r0
 8000440:	4691      	mov	r9, r2
 8000442:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000446:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
 800044a:	ac03      	add	r4, sp, #12
 800044c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000454:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800045a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800045e:	ad02      	add	r5, sp, #8
 8000460:	f04f 0e00 	mov.w	lr, #0
 8000464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000468:	f8c5 e000 	str.w	lr, [r5]
 800046c:	e021      	b.n	80004b2 <unwind_phase2_forced+0x82>
 800046e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8000470:	6173      	str	r3, [r6, #20]
 8000472:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8000476:	4629      	mov	r1, r5
 8000478:	a87c      	add	r0, sp, #496	@ 0x1f0
 800047a:	f003 fac7 	bl	8003a0c <memcpy>
 800047e:	6933      	ldr	r3, [r6, #16]
 8000480:	aa7c      	add	r2, sp, #496	@ 0x1f0
 8000482:	4631      	mov	r1, r6
 8000484:	4650      	mov	r0, sl
 8000486:	4798      	blx	r3
 8000488:	9b8a      	ldr	r3, [sp, #552]	@ 0x228
 800048a:	64ab      	str	r3, [r5, #72]	@ 0x48
 800048c:	4649      	mov	r1, r9
 800048e:	e9cd 5800 	strd	r5, r8, [sp]
 8000492:	4682      	mov	sl, r0
 8000494:	4633      	mov	r3, r6
 8000496:	2001      	movs	r0, #1
 8000498:	4632      	mov	r2, r6
 800049a:	47b8      	blx	r7
 800049c:	4681      	mov	r9, r0
 800049e:	bb30      	cbnz	r0, 80004ee <unwind_phase2_forced+0xbe>
 80004a0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80004a4:	a97c      	add	r1, sp, #496	@ 0x1f0
 80004a6:	4628      	mov	r0, r5
 80004a8:	f003 fab0 	bl	8003a0c <memcpy>
 80004ac:	f1ba 0f08 	cmp.w	sl, #8
 80004b0:	d11a      	bne.n	80004e8 <unwind_phase2_forced+0xb8>
 80004b2:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80004b4:	4630      	mov	r0, r6
 80004b6:	f7ff ff1b 	bl	80002f0 <get_eit_entry>
 80004ba:	f109 0909 	add.w	r9, r9, #9
 80004be:	4604      	mov	r4, r0
 80004c0:	fa5f fa89 	uxtb.w	sl, r9
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d0d2      	beq.n	800046e <unwind_phase2_forced+0x3e>
 80004c8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80004ca:	64ab      	str	r3, [r5, #72]	@ 0x48
 80004cc:	4632      	mov	r2, r6
 80004ce:	e9cd 5800 	strd	r5, r8, [sp]
 80004d2:	4633      	mov	r3, r6
 80004d4:	f04a 0110 	orr.w	r1, sl, #16
 80004d8:	2001      	movs	r0, #1
 80004da:	47b8      	blx	r7
 80004dc:	b938      	cbnz	r0, 80004ee <unwind_phase2_forced+0xbe>
 80004de:	4620      	mov	r0, r4
 80004e0:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 80004e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e8:	f1ba 0f07 	cmp.w	sl, #7
 80004ec:	d005      	beq.n	80004fa <unwind_phase2_forced+0xca>
 80004ee:	2409      	movs	r4, #9
 80004f0:	4620      	mov	r0, r4
 80004f2:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	4648      	mov	r0, r9
 80004fc:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80004fe:	f7ff ff77 	bl	80003f0 <_Unwind_DebugHook>
 8000502:	a803      	add	r0, sp, #12
 8000504:	f000 fbc6 	bl	8000c94 <__restore_core_regs>

08000508 <_Unwind_GetCFA>:
 8000508:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800050a:	4770      	bx	lr

0800050c <__gnu_Unwind_RaiseException>:
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8000510:	b0fb      	sub	sp, #492	@ 0x1ec
 8000512:	f101 0c04 	add.w	ip, r1, #4
 8000516:	640b      	str	r3, [r1, #64]	@ 0x40
 8000518:	460e      	mov	r6, r1
 800051a:	4605      	mov	r5, r0
 800051c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000520:	ac01      	add	r4, sp, #4
 8000522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000524:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800052e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000530:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000534:	f04f 37ff 	mov.w	r7, #4294967295
 8000538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800053c:	9700      	str	r7, [sp, #0]
 800053e:	e006      	b.n	800054e <__gnu_Unwind_RaiseException+0x42>
 8000540:	692b      	ldr	r3, [r5, #16]
 8000542:	466a      	mov	r2, sp
 8000544:	4629      	mov	r1, r5
 8000546:	4798      	blx	r3
 8000548:	2808      	cmp	r0, #8
 800054a:	4604      	mov	r4, r0
 800054c:	d108      	bne.n	8000560 <__gnu_Unwind_RaiseException+0x54>
 800054e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8000550:	4628      	mov	r0, r5
 8000552:	f7ff fecd 	bl	80002f0 <get_eit_entry>
 8000556:	2800      	cmp	r0, #0
 8000558:	d0f2      	beq.n	8000540 <__gnu_Unwind_RaiseException+0x34>
 800055a:	2009      	movs	r0, #9
 800055c:	b07b      	add	sp, #492	@ 0x1ec
 800055e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000560:	4668      	mov	r0, sp
 8000562:	f7ff ff11 	bl	8000388 <restore_non_core_regs>
 8000566:	2c06      	cmp	r4, #6
 8000568:	d1f7      	bne.n	800055a <__gnu_Unwind_RaiseException+0x4e>
 800056a:	4631      	mov	r1, r6
 800056c:	4628      	mov	r0, r5
 800056e:	f7ff ff41 	bl	80003f4 <unwind_phase2>
 8000572:	bf00      	nop

08000574 <__gnu_Unwind_ForcedUnwind>:
 8000574:	60c1      	str	r1, [r0, #12]
 8000576:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000578:	6182      	str	r2, [r0, #24]
 800057a:	6419      	str	r1, [r3, #64]	@ 0x40
 800057c:	2200      	movs	r2, #0
 800057e:	4619      	mov	r1, r3
 8000580:	e756      	b.n	8000430 <unwind_phase2_forced>
 8000582:	bf00      	nop

08000584 <__gnu_Unwind_Resume>:
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	68c6      	ldr	r6, [r0, #12]
 8000588:	6943      	ldr	r3, [r0, #20]
 800058a:	640b      	str	r3, [r1, #64]	@ 0x40
 800058c:	b9ae      	cbnz	r6, 80005ba <__gnu_Unwind_Resume+0x36>
 800058e:	6903      	ldr	r3, [r0, #16]
 8000590:	460a      	mov	r2, r1
 8000592:	4604      	mov	r4, r0
 8000594:	460d      	mov	r5, r1
 8000596:	4601      	mov	r1, r0
 8000598:	2002      	movs	r0, #2
 800059a:	4798      	blx	r3
 800059c:	2807      	cmp	r0, #7
 800059e:	d005      	beq.n	80005ac <__gnu_Unwind_Resume+0x28>
 80005a0:	2808      	cmp	r0, #8
 80005a2:	d10f      	bne.n	80005c4 <__gnu_Unwind_Resume+0x40>
 80005a4:	4629      	mov	r1, r5
 80005a6:	4620      	mov	r0, r4
 80005a8:	f7ff ff24 	bl	80003f4 <unwind_phase2>
 80005ac:	4630      	mov	r0, r6
 80005ae:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80005b0:	f7ff ff1e 	bl	80003f0 <_Unwind_DebugHook>
 80005b4:	1d28      	adds	r0, r5, #4
 80005b6:	f000 fb6d 	bl	8000c94 <__restore_core_regs>
 80005ba:	2201      	movs	r2, #1
 80005bc:	f7ff ff38 	bl	8000430 <unwind_phase2_forced>
 80005c0:	f003 f980 	bl	80038c4 <abort>
 80005c4:	f003 f97e 	bl	80038c4 <abort>

080005c8 <__gnu_Unwind_Resume_or_Rethrow>:
 80005c8:	68c2      	ldr	r2, [r0, #12]
 80005ca:	b11a      	cbz	r2, 80005d4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80005cc:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80005ce:	640a      	str	r2, [r1, #64]	@ 0x40
 80005d0:	2200      	movs	r2, #0
 80005d2:	e72d      	b.n	8000430 <unwind_phase2_forced>
 80005d4:	e79a      	b.n	800050c <__gnu_Unwind_RaiseException>
 80005d6:	bf00      	nop

080005d8 <_Unwind_Complete>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_Unwind_DeleteException>:
 80005dc:	6883      	ldr	r3, [r0, #8]
 80005de:	4601      	mov	r1, r0
 80005e0:	b10b      	cbz	r3, 80005e6 <_Unwind_DeleteException+0xa>
 80005e2:	2001      	movs	r0, #1
 80005e4:	4718      	bx	r3
 80005e6:	4770      	bx	lr

080005e8 <_Unwind_VRS_Get>:
 80005e8:	2905      	cmp	r1, #5
 80005ea:	d815      	bhi.n	8000618 <_Unwind_VRS_Get+0x30>
 80005ec:	e8df f001 	tbb	[pc, r1]
 80005f0:	0314030a 	.word	0x0314030a
 80005f4:	0503      	.short	0x0503
 80005f6:	2001      	movs	r0, #1
 80005f8:	4770      	bx	lr
 80005fa:	9a00      	ldr	r2, [sp, #0]
 80005fc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	2000      	movs	r0, #0
 8000602:	4770      	bx	lr
 8000604:	b943      	cbnz	r3, 8000618 <_Unwind_VRS_Get+0x30>
 8000606:	2a0f      	cmp	r2, #15
 8000608:	d806      	bhi.n	8000618 <_Unwind_VRS_Get+0x30>
 800060a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800060e:	2000      	movs	r0, #0
 8000610:	6853      	ldr	r3, [r2, #4]
 8000612:	9a00      	ldr	r2, [sp, #0]
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	4770      	bx	lr
 8000618:	2002      	movs	r0, #2
 800061a:	4770      	bx	lr

0800061c <_Unwind_GetGR>:
 800061c:	b500      	push	{lr}
 800061e:	b085      	sub	sp, #20
 8000620:	460a      	mov	r2, r1
 8000622:	2300      	movs	r3, #0
 8000624:	a903      	add	r1, sp, #12
 8000626:	9100      	str	r1, [sp, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	f7ff ffdd 	bl	80005e8 <_Unwind_VRS_Get>
 800062e:	9803      	ldr	r0, [sp, #12]
 8000630:	b005      	add	sp, #20
 8000632:	f85d fb04 	ldr.w	pc, [sp], #4
 8000636:	bf00      	nop

08000638 <_Unwind_VRS_Set>:
 8000638:	2905      	cmp	r1, #5
 800063a:	d815      	bhi.n	8000668 <_Unwind_VRS_Set+0x30>
 800063c:	e8df f001 	tbb	[pc, r1]
 8000640:	0314030a 	.word	0x0314030a
 8000644:	0503      	.short	0x0503
 8000646:	2001      	movs	r0, #1
 8000648:	4770      	bx	lr
 800064a:	9b00      	ldr	r3, [sp, #0]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	6443      	str	r3, [r0, #68]	@ 0x44
 8000650:	2000      	movs	r0, #0
 8000652:	4770      	bx	lr
 8000654:	b943      	cbnz	r3, 8000668 <_Unwind_VRS_Set+0x30>
 8000656:	2a0f      	cmp	r2, #15
 8000658:	d806      	bhi.n	8000668 <_Unwind_VRS_Set+0x30>
 800065a:	9b00      	ldr	r3, [sp, #0]
 800065c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6053      	str	r3, [r2, #4]
 8000664:	2000      	movs	r0, #0
 8000666:	4770      	bx	lr
 8000668:	2002      	movs	r0, #2
 800066a:	4770      	bx	lr

0800066c <_Unwind_SetGR>:
 800066c:	b510      	push	{r4, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	2300      	movs	r3, #0
 8000672:	ac03      	add	r4, sp, #12
 8000674:	9203      	str	r2, [sp, #12]
 8000676:	9400      	str	r4, [sp, #0]
 8000678:	460a      	mov	r2, r1
 800067a:	4619      	mov	r1, r3
 800067c:	f7ff ffdc 	bl	8000638 <_Unwind_VRS_Set>
 8000680:	b004      	add	sp, #16
 8000682:	bd10      	pop	{r4, pc}

08000684 <__gnu_Unwind_Backtrace>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000688:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 800068c:	f102 0c04 	add.w	ip, r2, #4
 8000690:	6413      	str	r3, [r2, #64]	@ 0x40
 8000692:	4605      	mov	r5, r0
 8000694:	460c      	mov	r4, r1
 8000696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069a:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 800069e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006b2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006b6:	f04f 36ff 	mov.w	r6, #4294967295
 80006ba:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006be:	9616      	str	r6, [sp, #88]	@ 0x58
 80006c0:	e010      	b.n	80006e4 <__gnu_Unwind_Backtrace+0x60>
 80006c2:	f7ff ffd3 	bl	800066c <_Unwind_SetGR>
 80006c6:	4621      	mov	r1, r4
 80006c8:	a816      	add	r0, sp, #88	@ 0x58
 80006ca:	47a8      	blx	r5
 80006cc:	4603      	mov	r3, r0
 80006ce:	aa16      	add	r2, sp, #88	@ 0x58
 80006d0:	2008      	movs	r0, #8
 80006d2:	4669      	mov	r1, sp
 80006d4:	b983      	cbnz	r3, 80006f8 <__gnu_Unwind_Backtrace+0x74>
 80006d6:	9b04      	ldr	r3, [sp, #16]
 80006d8:	4798      	blx	r3
 80006da:	2805      	cmp	r0, #5
 80006dc:	4606      	mov	r6, r0
 80006de:	d00c      	beq.n	80006fa <__gnu_Unwind_Backtrace+0x76>
 80006e0:	2809      	cmp	r0, #9
 80006e2:	d009      	beq.n	80006f8 <__gnu_Unwind_Backtrace+0x74>
 80006e4:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80006e6:	4668      	mov	r0, sp
 80006e8:	f7ff fe02 	bl	80002f0 <get_eit_entry>
 80006ec:	4603      	mov	r3, r0
 80006ee:	210c      	movs	r1, #12
 80006f0:	466a      	mov	r2, sp
 80006f2:	a816      	add	r0, sp, #88	@ 0x58
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0e4      	beq.n	80006c2 <__gnu_Unwind_Backtrace+0x3e>
 80006f8:	2609      	movs	r6, #9
 80006fa:	a816      	add	r0, sp, #88	@ 0x58
 80006fc:	f7ff fe44 	bl	8000388 <restore_non_core_regs>
 8000700:	4630      	mov	r0, r6
 8000702:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
 8000706:	bd70      	pop	{r4, r5, r6, pc}

08000708 <__gnu_unwind_pr_common>:
 8000708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800070c:	4616      	mov	r6, r2
 800070e:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8000710:	b089      	sub	sp, #36	@ 0x24
 8000712:	460d      	mov	r5, r1
 8000714:	f852 1b04 	ldr.w	r1, [r2], #4
 8000718:	9206      	str	r2, [sp, #24]
 800071a:	f000 0c03 	and.w	ip, r0, #3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d079      	beq.n	8000816 <__gnu_unwind_pr_common+0x10e>
 8000722:	0c0c      	lsrs	r4, r1, #16
 8000724:	f88d 401d 	strb.w	r4, [sp, #29]
 8000728:	0409      	lsls	r1, r1, #16
 800072a:	b2e4      	uxtb	r4, r4
 800072c:	9105      	str	r1, [sp, #20]
 800072e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8000732:	2102      	movs	r1, #2
 8000734:	f88d 101c 	strb.w	r1, [sp, #28]
 8000738:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800073a:	f1bc 0f02 	cmp.w	ip, #2
 800073e:	bf08      	it	eq
 8000740:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8000742:	f011 0801 	ands.w	r8, r1, #1
 8000746:	d009      	beq.n	800075c <__gnu_unwind_pr_common+0x54>
 8000748:	a905      	add	r1, sp, #20
 800074a:	4630      	mov	r0, r6
 800074c:	f000 fba4 	bl	8000e98 <__gnu_unwind_execute>
 8000750:	2800      	cmp	r0, #0
 8000752:	d156      	bne.n	8000802 <__gnu_unwind_pr_common+0xfa>
 8000754:	2008      	movs	r0, #8
 8000756:	b009      	add	sp, #36	@ 0x24
 8000758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800075c:	6817      	ldr	r7, [r2, #0]
 800075e:	2f00      	cmp	r7, #0
 8000760:	d0f2      	beq.n	8000748 <__gnu_unwind_pr_common+0x40>
 8000762:	f000 0108 	and.w	r1, r0, #8
 8000766:	e9cd 1801 	strd	r1, r8, [sp, #4]
 800076a:	46e3      	mov	fp, ip
 800076c:	469a      	mov	sl, r3
 800076e:	f1ba 0f02 	cmp.w	sl, #2
 8000772:	d04c      	beq.n	800080e <__gnu_unwind_pr_common+0x106>
 8000774:	8817      	ldrh	r7, [r2, #0]
 8000776:	8854      	ldrh	r4, [r2, #2]
 8000778:	f102 0904 	add.w	r9, r2, #4
 800077c:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 800077e:	f024 0301 	bic.w	r3, r4, #1
 8000782:	210f      	movs	r1, #15
 8000784:	4630      	mov	r0, r6
 8000786:	eb03 0802 	add.w	r8, r3, r2
 800078a:	f7ff ff47 	bl	800061c <_Unwind_GetGR>
 800078e:	4580      	cmp	r8, r0
 8000790:	d83b      	bhi.n	800080a <__gnu_unwind_pr_common+0x102>
 8000792:	f027 0201 	bic.w	r2, r7, #1
 8000796:	eb02 0308 	add.w	r3, r2, r8
 800079a:	4283      	cmp	r3, r0
 800079c:	bf94      	ite	ls
 800079e:	2300      	movls	r3, #0
 80007a0:	2301      	movhi	r3, #1
 80007a2:	0064      	lsls	r4, r4, #1
 80007a4:	f004 0402 	and.w	r4, r4, #2
 80007a8:	f007 0701 	and.w	r7, r7, #1
 80007ac:	4327      	orrs	r7, r4
 80007ae:	2f01      	cmp	r7, #1
 80007b0:	d04e      	beq.n	8000850 <__gnu_unwind_pr_common+0x148>
 80007b2:	2f02      	cmp	r7, #2
 80007b4:	d035      	beq.n	8000822 <__gnu_unwind_pr_common+0x11a>
 80007b6:	bb27      	cbnz	r7, 8000802 <__gnu_unwind_pr_common+0xfa>
 80007b8:	f1bb 0f00 	cmp.w	fp, #0
 80007bc:	d002      	beq.n	80007c4 <__gnu_unwind_pr_common+0xbc>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f040 80d3 	bne.w	800096a <__gnu_unwind_pr_common+0x262>
 80007c4:	f109 0204 	add.w	r2, r9, #4
 80007c8:	6817      	ldr	r7, [r2, #0]
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d1cf      	bne.n	800076e <__gnu_unwind_pr_common+0x66>
 80007ce:	a905      	add	r1, sp, #20
 80007d0:	4630      	mov	r0, r6
 80007d2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80007d6:	f000 fb5f 	bl	8000e98 <__gnu_unwind_execute>
 80007da:	b990      	cbnz	r0, 8000802 <__gnu_unwind_pr_common+0xfa>
 80007dc:	f1b8 0f00 	cmp.w	r8, #0
 80007e0:	d0b8      	beq.n	8000754 <__gnu_unwind_pr_common+0x4c>
 80007e2:	210f      	movs	r1, #15
 80007e4:	4630      	mov	r0, r6
 80007e6:	f7ff ff19 	bl	800061c <_Unwind_GetGR>
 80007ea:	210e      	movs	r1, #14
 80007ec:	4602      	mov	r2, r0
 80007ee:	4630      	mov	r0, r6
 80007f0:	f7ff ff3c 	bl	800066c <_Unwind_SetGR>
 80007f4:	4a6c      	ldr	r2, [pc, #432]	@ (80009a8 <__gnu_unwind_pr_common+0x2a0>)
 80007f6:	210f      	movs	r1, #15
 80007f8:	4630      	mov	r0, r6
 80007fa:	f7ff ff37 	bl	800066c <_Unwind_SetGR>
 80007fe:	2007      	movs	r0, #7
 8000800:	e000      	b.n	8000804 <__gnu_unwind_pr_common+0xfc>
 8000802:	2009      	movs	r0, #9
 8000804:	b009      	add	sp, #36	@ 0x24
 8000806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800080a:	2300      	movs	r3, #0
 800080c:	e7c9      	b.n	80007a2 <__gnu_unwind_pr_common+0x9a>
 800080e:	6854      	ldr	r4, [r2, #4]
 8000810:	f102 0908 	add.w	r9, r2, #8
 8000814:	e7b2      	b.n	800077c <__gnu_unwind_pr_common+0x74>
 8000816:	0209      	lsls	r1, r1, #8
 8000818:	9105      	str	r1, [sp, #20]
 800081a:	f88d 301d 	strb.w	r3, [sp, #29]
 800081e:	2103      	movs	r1, #3
 8000820:	e788      	b.n	8000734 <__gnu_unwind_pr_common+0x2c>
 8000822:	f8d9 4000 	ldr.w	r4, [r9]
 8000826:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
 800082a:	f1bb 0f00 	cmp.w	fp, #0
 800082e:	d147      	bne.n	80008c0 <__gnu_unwind_pr_common+0x1b8>
 8000830:	b12b      	cbz	r3, 800083e <__gnu_unwind_pr_common+0x136>
 8000832:	9b01      	ldr	r3, [sp, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d05c      	beq.n	80008f2 <__gnu_unwind_pr_common+0x1ea>
 8000838:	f1b8 0f00 	cmp.w	r8, #0
 800083c:	d059      	beq.n	80008f2 <__gnu_unwind_pr_common+0x1ea>
 800083e:	2c00      	cmp	r4, #0
 8000840:	da01      	bge.n	8000846 <__gnu_unwind_pr_common+0x13e>
 8000842:	f109 0904 	add.w	r9, r9, #4
 8000846:	f108 0201 	add.w	r2, r8, #1
 800084a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800084e:	e7bb      	b.n	80007c8 <__gnu_unwind_pr_common+0xc0>
 8000850:	f1bb 0f00 	cmp.w	fp, #0
 8000854:	d11c      	bne.n	8000890 <__gnu_unwind_pr_common+0x188>
 8000856:	b1c3      	cbz	r3, 800088a <__gnu_unwind_pr_common+0x182>
 8000858:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800085c:	f8d9 2000 	ldr.w	r2, [r9]
 8000860:	1c99      	adds	r1, r3, #2
 8000862:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000866:	d0cc      	beq.n	8000802 <__gnu_unwind_pr_common+0xfa>
 8000868:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800086c:	3301      	adds	r3, #1
 800086e:	9404      	str	r4, [sp, #16]
 8000870:	f000 808e 	beq.w	8000990 <__gnu_unwind_pr_common+0x288>
 8000874:	f109 0004 	add.w	r0, r9, #4
 8000878:	f7ff fdb2 	bl	80003e0 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800087c:	ab04      	add	r3, sp, #16
 800087e:	4601      	mov	r1, r0
 8000880:	4628      	mov	r0, r5
 8000882:	f002 fb53 	bl	8002f2c <__cxa_type_match>
 8000886:	2800      	cmp	r0, #0
 8000888:	d159      	bne.n	800093e <__gnu_unwind_pr_common+0x236>
 800088a:	f109 0208 	add.w	r2, r9, #8
 800088e:	e79b      	b.n	80007c8 <__gnu_unwind_pr_common+0xc0>
 8000890:	210d      	movs	r1, #13
 8000892:	4630      	mov	r0, r6
 8000894:	f7ff fec2 	bl	800061c <_Unwind_GetGR>
 8000898:	6a2c      	ldr	r4, [r5, #32]
 800089a:	4284      	cmp	r4, r0
 800089c:	d1f5      	bne.n	800088a <__gnu_unwind_pr_common+0x182>
 800089e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80008a0:	4599      	cmp	r9, r3
 80008a2:	d1f2      	bne.n	800088a <__gnu_unwind_pr_common+0x182>
 80008a4:	4648      	mov	r0, r9
 80008a6:	f7ff fcd1 	bl	800024c <selfrel_offset31>
 80008aa:	210f      	movs	r1, #15
 80008ac:	4602      	mov	r2, r0
 80008ae:	4630      	mov	r0, r6
 80008b0:	f7ff fedc 	bl	800066c <_Unwind_SetGR>
 80008b4:	462a      	mov	r2, r5
 80008b6:	2100      	movs	r1, #0
 80008b8:	4630      	mov	r0, r6
 80008ba:	f7ff fed7 	bl	800066c <_Unwind_SetGR>
 80008be:	e79e      	b.n	80007fe <__gnu_unwind_pr_common+0xf6>
 80008c0:	210d      	movs	r1, #13
 80008c2:	4630      	mov	r0, r6
 80008c4:	f7ff feaa 	bl	800061c <_Unwind_GetGR>
 80008c8:	6a2f      	ldr	r7, [r5, #32]
 80008ca:	4287      	cmp	r7, r0
 80008cc:	d1b7      	bne.n	800083e <__gnu_unwind_pr_common+0x136>
 80008ce:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80008d0:	4599      	cmp	r9, r3
 80008d2:	d1b4      	bne.n	800083e <__gnu_unwind_pr_common+0x136>
 80008d4:	2400      	movs	r4, #0
 80008d6:	2304      	movs	r3, #4
 80008d8:	e9c5 430b 	strd	r4, r3, [r5, #44]	@ 0x2c
 80008dc:	444b      	add	r3, r9
 80008de:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 80008e2:	636b      	str	r3, [r5, #52]	@ 0x34
 80008e4:	f8d9 3000 	ldr.w	r3, [r9]
 80008e8:	42a3      	cmp	r3, r4
 80008ea:	db58      	blt.n	800099e <__gnu_unwind_pr_common+0x296>
 80008ec:	2301      	movs	r3, #1
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	e7a9      	b.n	8000846 <__gnu_unwind_pr_common+0x13e>
 80008f2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80008f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80008fa:	f109 0704 	add.w	r7, r9, #4
 80008fe:	46b3      	mov	fp, r6
 8000900:	2400      	movs	r4, #0
 8000902:	461e      	mov	r6, r3
 8000904:	e00b      	b.n	800091e <__gnu_unwind_pr_common+0x216>
 8000906:	4638      	mov	r0, r7
 8000908:	9604      	str	r6, [sp, #16]
 800090a:	f7ff fd69 	bl	80003e0 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800090e:	2200      	movs	r2, #0
 8000910:	4601      	mov	r1, r0
 8000912:	ab04      	add	r3, sp, #16
 8000914:	4628      	mov	r0, r5
 8000916:	f002 fb09 	bl	8002f2c <__cxa_type_match>
 800091a:	3704      	adds	r7, #4
 800091c:	b9f8      	cbnz	r0, 800095e <__gnu_unwind_pr_common+0x256>
 800091e:	4544      	cmp	r4, r8
 8000920:	f104 0401 	add.w	r4, r4, #1
 8000924:	d1ef      	bne.n	8000906 <__gnu_unwind_pr_common+0x1fe>
 8000926:	210d      	movs	r1, #13
 8000928:	4658      	mov	r0, fp
 800092a:	f7ff fe77 	bl	800061c <_Unwind_GetGR>
 800092e:	9b04      	ldr	r3, [sp, #16]
 8000930:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
 8000934:	4602      	mov	r2, r0
 8000936:	e9c5 2308 	strd	r2, r3, [r5, #32]
 800093a:	2006      	movs	r0, #6
 800093c:	e762      	b.n	8000804 <__gnu_unwind_pr_common+0xfc>
 800093e:	4604      	mov	r4, r0
 8000940:	210d      	movs	r1, #13
 8000942:	4630      	mov	r0, r6
 8000944:	f7ff fe6a 	bl	800061c <_Unwind_GetGR>
 8000948:	9e04      	ldr	r6, [sp, #16]
 800094a:	6228      	str	r0, [r5, #32]
 800094c:	2c02      	cmp	r4, #2
 800094e:	bf04      	itt	eq
 8000950:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8000952:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8000956:	e9c5 6909 	strd	r6, r9, [r5, #36]	@ 0x24
 800095a:	2006      	movs	r0, #6
 800095c:	e752      	b.n	8000804 <__gnu_unwind_pr_common+0xfc>
 800095e:	465e      	mov	r6, fp
 8000960:	f8d9 4000 	ldr.w	r4, [r9]
 8000964:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8000968:	e769      	b.n	800083e <__gnu_unwind_pr_common+0x136>
 800096a:	4648      	mov	r0, r9
 800096c:	f7ff fc6e 	bl	800024c <selfrel_offset31>
 8000970:	f109 0304 	add.w	r3, r9, #4
 8000974:	4604      	mov	r4, r0
 8000976:	63ab      	str	r3, [r5, #56]	@ 0x38
 8000978:	4628      	mov	r0, r5
 800097a:	f002 fb29 	bl	8002fd0 <__cxa_begin_cleanup>
 800097e:	2800      	cmp	r0, #0
 8000980:	f43f af3f 	beq.w	8000802 <__gnu_unwind_pr_common+0xfa>
 8000984:	4622      	mov	r2, r4
 8000986:	210f      	movs	r1, #15
 8000988:	4630      	mov	r0, r6
 800098a:	f7ff fe6f 	bl	800066c <_Unwind_SetGR>
 800098e:	e736      	b.n	80007fe <__gnu_unwind_pr_common+0xf6>
 8000990:	4630      	mov	r0, r6
 8000992:	210d      	movs	r1, #13
 8000994:	f7ff fe42 	bl	800061c <_Unwind_GetGR>
 8000998:	4626      	mov	r6, r4
 800099a:	6228      	str	r0, [r5, #32]
 800099c:	e7db      	b.n	8000956 <__gnu_unwind_pr_common+0x24e>
 800099e:	f108 0201 	add.w	r2, r8, #1
 80009a2:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 80009a6:	e77e      	b.n	80008a6 <__gnu_unwind_pr_common+0x19e>
 80009a8:	0800380d 	.word	0x0800380d

080009ac <__aeabi_unwind_cpp_pr0>:
 80009ac:	2300      	movs	r3, #0
 80009ae:	e6ab      	b.n	8000708 <__gnu_unwind_pr_common>

080009b0 <__aeabi_unwind_cpp_pr1>:
 80009b0:	2301      	movs	r3, #1
 80009b2:	e6a9      	b.n	8000708 <__gnu_unwind_pr_common>

080009b4 <__aeabi_unwind_cpp_pr2>:
 80009b4:	2302      	movs	r3, #2
 80009b6:	e6a7      	b.n	8000708 <__gnu_unwind_pr_common>

080009b8 <_Unwind_VRS_Pop>:
 80009b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009bc:	4606      	mov	r6, r0
 80009be:	b0c4      	sub	sp, #272	@ 0x110
 80009c0:	4614      	mov	r4, r2
 80009c2:	2905      	cmp	r1, #5
 80009c4:	f200 80e8 	bhi.w	8000b98 <_Unwind_VRS_Pop+0x1e0>
 80009c8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80009cc:	002d0012 	.word	0x002d0012
 80009d0:	006600e6 	.word	0x006600e6
 80009d4:	0006008b 	.word	0x0006008b
 80009d8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80009da:	2c00      	cmp	r4, #0
 80009dc:	f040 80dc 	bne.w	8000b98 <_Unwind_VRS_Pop+0x1e0>
 80009e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80009e4:	6442      	str	r2, [r0, #68]	@ 0x44
 80009e6:	6383      	str	r3, [r0, #56]	@ 0x38
 80009e8:	2000      	movs	r0, #0
 80009ea:	b044      	add	sp, #272	@ 0x110
 80009ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	f040 80d1 	bne.w	8000b98 <_Unwind_VRS_Pop+0x1e0>
 80009f6:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80009f8:	fa1f fc84 	uxth.w	ip, r4
 80009fc:	2001      	movs	r0, #1
 80009fe:	f106 0e04 	add.w	lr, r6, #4
 8000a02:	fa00 f103 	lsl.w	r1, r0, r3
 8000a06:	ea11 0f0c 	tst.w	r1, ip
 8000a0a:	462a      	mov	r2, r5
 8000a0c:	d004      	beq.n	8000a18 <_Unwind_VRS_Pop+0x60>
 8000a0e:	f852 1b04 	ldr.w	r1, [r2], #4
 8000a12:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
 8000a16:	4615      	mov	r5, r2
 8000a18:	3301      	adds	r3, #1
 8000a1a:	2b10      	cmp	r3, #16
 8000a1c:	d1f1      	bne.n	8000a02 <_Unwind_VRS_Pop+0x4a>
 8000a1e:	04a7      	lsls	r7, r4, #18
 8000a20:	d4e2      	bmi.n	80009e8 <_Unwind_VRS_Pop+0x30>
 8000a22:	63b5      	str	r5, [r6, #56]	@ 0x38
 8000a24:	e7e0      	b.n	80009e8 <_Unwind_VRS_Pop+0x30>
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8000a2c:	b2a4      	uxth	r4, r4
 8000a2e:	d07c      	beq.n	8000b2a <_Unwind_VRS_Pop+0x172>
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	f040 80b1 	bne.w	8000b98 <_Unwind_VRS_Pop+0x1e0>
 8000a36:	eb07 0804 	add.w	r8, r7, r4
 8000a3a:	f1b8 0f20 	cmp.w	r8, #32
 8000a3e:	f200 80ab 	bhi.w	8000b98 <_Unwind_VRS_Pop+0x1e0>
 8000a42:	2f0f      	cmp	r7, #15
 8000a44:	f240 80aa 	bls.w	8000b9c <_Unwind_VRS_Pop+0x1e4>
 8000a48:	2c00      	cmp	r4, #0
 8000a4a:	d0cd      	beq.n	80009e8 <_Unwind_VRS_Pop+0x30>
 8000a4c:	6802      	ldr	r2, [r0, #0]
 8000a4e:	0755      	lsls	r5, r2, #29
 8000a50:	f100 80ff 	bmi.w	8000c52 <_Unwind_VRS_Pop+0x29a>
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	ad02      	add	r5, sp, #8
 8000a58:	4628      	mov	r0, r5
 8000a5a:	f000 f93b 	bl	8000cd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000a5e:	0064      	lsls	r4, r4, #1
 8000a60:	f1a7 0010 	sub.w	r0, r7, #16
 8000a64:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000a66:	9b01      	ldr	r3, [sp, #4]
 8000a68:	1e61      	subs	r1, r4, #1
 8000a6a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8000a6e:	3101      	adds	r1, #1
 8000a70:	3804      	subs	r0, #4
 8000a72:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8000a76:	f852 4b04 	ldr.w	r4, [r2], #4
 8000a7a:	f840 4f04 	str.w	r4, [r0, #4]!
 8000a7e:	428a      	cmp	r2, r1
 8000a80:	d1f9      	bne.n	8000a76 <_Unwind_VRS_Pop+0xbe>
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	f000 80cd 	beq.w	8000c22 <_Unwind_VRS_Pop+0x26a>
 8000a88:	2f0f      	cmp	r7, #15
 8000a8a:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000a8c:	f240 80e9 	bls.w	8000c62 <_Unwind_VRS_Pop+0x2aa>
 8000a90:	4628      	mov	r0, r5
 8000a92:	f000 f91b 	bl	8000ccc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a96:	e7a7      	b.n	80009e8 <_Unwind_VRS_Pop+0x30>
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d17d      	bne.n	8000b98 <_Unwind_VRS_Pop+0x1e0>
 8000a9c:	b2a7      	uxth	r7, r4
 8000a9e:	eb07 4314 	add.w	r3, r7, r4, lsr #16
 8000aa2:	2b10      	cmp	r3, #16
 8000aa4:	ea4f 4414 	mov.w	r4, r4, lsr #16
 8000aa8:	d876      	bhi.n	8000b98 <_Unwind_VRS_Pop+0x1e0>
 8000aaa:	6803      	ldr	r3, [r0, #0]
 8000aac:	0719      	lsls	r1, r3, #28
 8000aae:	f100 80a4 	bmi.w	8000bfa <_Unwind_VRS_Pop+0x242>
 8000ab2:	ad22      	add	r5, sp, #136	@ 0x88
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	f000 f933 	bl	8000d20 <__gnu_Unwind_Save_WMMXD>
 8000aba:	007a      	lsls	r2, r7, #1
 8000abc:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 8000abe:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8000ac2:	1e53      	subs	r3, r2, #1
 8000ac4:	b142      	cbz	r2, 8000ad8 <_Unwind_VRS_Pop+0x120>
 8000ac6:	1b01      	subs	r1, r0, r4
 8000ac8:	5862      	ldr	r2, [r4, r1]
 8000aca:	f844 2b04 	str.w	r2, [r4], #4
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	d1f9      	bne.n	8000ac8 <_Unwind_VRS_Pop+0x110>
 8000ad4:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8000ad8:	63b0      	str	r0, [r6, #56]	@ 0x38
 8000ada:	4628      	mov	r0, r5
 8000adc:	f000 f8fe 	bl	8000cdc <__gnu_Unwind_Restore_WMMXD>
 8000ae0:	e782      	b.n	80009e8 <_Unwind_VRS_Pop+0x30>
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d158      	bne.n	8000b98 <_Unwind_VRS_Pop+0x1e0>
 8000ae6:	2c10      	cmp	r4, #16
 8000ae8:	d856      	bhi.n	8000b98 <_Unwind_VRS_Pop+0x1e0>
 8000aea:	6803      	ldr	r3, [r0, #0]
 8000aec:	06d8      	lsls	r0, r3, #27
 8000aee:	d47c      	bmi.n	8000bea <_Unwind_VRS_Pop+0x232>
 8000af0:	ad22      	add	r5, sp, #136	@ 0x88
 8000af2:	4628      	mov	r0, r5
 8000af4:	f000 f940 	bl	8000d78 <__gnu_Unwind_Save_WMMXC>
 8000af8:	6bb7      	ldr	r7, [r6, #56]	@ 0x38
 8000afa:	4629      	mov	r1, r5
 8000afc:	2300      	movs	r3, #0
 8000afe:	f04f 0c01 	mov.w	ip, #1
 8000b02:	fa0c f203 	lsl.w	r2, ip, r3
 8000b06:	4222      	tst	r2, r4
 8000b08:	4638      	mov	r0, r7
 8000b0a:	f103 0301 	add.w	r3, r3, #1
 8000b0e:	d003      	beq.n	8000b18 <_Unwind_VRS_Pop+0x160>
 8000b10:	f850 2b04 	ldr.w	r2, [r0], #4
 8000b14:	600a      	str	r2, [r1, #0]
 8000b16:	4607      	mov	r7, r0
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	f101 0104 	add.w	r1, r1, #4
 8000b1e:	d1f0      	bne.n	8000b02 <_Unwind_VRS_Pop+0x14a>
 8000b20:	63b7      	str	r7, [r6, #56]	@ 0x38
 8000b22:	4628      	mov	r0, r5
 8000b24:	f000 f91e 	bl	8000d64 <__gnu_Unwind_Restore_WMMXC>
 8000b28:	e75e      	b.n	80009e8 <_Unwind_VRS_Pop+0x30>
 8000b2a:	193a      	adds	r2, r7, r4
 8000b2c:	2a10      	cmp	r2, #16
 8000b2e:	d833      	bhi.n	8000b98 <_Unwind_VRS_Pop+0x1e0>
 8000b30:	2f10      	cmp	r7, #16
 8000b32:	d031      	beq.n	8000b98 <_Unwind_VRS_Pop+0x1e0>
 8000b34:	6802      	ldr	r2, [r0, #0]
 8000b36:	07d1      	lsls	r1, r2, #31
 8000b38:	d508      	bpl.n	8000b4c <_Unwind_VRS_Pop+0x194>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	f022 0203 	bic.w	r2, r2, #3
 8000b40:	f840 2b50 	str.w	r2, [r0], #80
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	f000 f8b5 	bl	8000cb4 <__gnu_Unwind_Save_VFP>
 8000b4a:	9b01      	ldr	r3, [sp, #4]
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	ad22      	add	r5, sp, #136	@ 0x88
 8000b50:	4628      	mov	r0, r5
 8000b52:	f000 f8af 	bl	8000cb4 <__gnu_Unwind_Save_VFP>
 8000b56:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8000b58:	9b01      	ldr	r3, [sp, #4]
 8000b5a:	2c00      	cmp	r4, #0
 8000b5c:	d062      	beq.n	8000c24 <_Unwind_VRS_Pop+0x26c>
 8000b5e:	0062      	lsls	r2, r4, #1
 8000b60:	3a01      	subs	r2, #1
 8000b62:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8000b66:	f04f 0800 	mov.w	r8, #0
 8000b6a:	3201      	adds	r2, #1
 8000b6c:	3804      	subs	r0, #4
 8000b6e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8000b72:	f851 4b04 	ldr.w	r4, [r1], #4
 8000b76:	f840 4f04 	str.w	r4, [r0, #4]!
 8000b7a:	4291      	cmp	r1, r2
 8000b7c:	d1f9      	bne.n	8000b72 <_Unwind_VRS_Pop+0x1ba>
 8000b7e:	f1b8 0f00 	cmp.w	r8, #0
 8000b82:	d142      	bne.n	8000c0a <_Unwind_VRS_Pop+0x252>
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d04d      	beq.n	8000c24 <_Unwind_VRS_Pop+0x26c>
 8000b88:	2f0f      	cmp	r7, #15
 8000b8a:	63b1      	str	r1, [r6, #56]	@ 0x38
 8000b8c:	f63f af2c 	bhi.w	80009e8 <_Unwind_VRS_Pop+0x30>
 8000b90:	4628      	mov	r0, r5
 8000b92:	f000 f893 	bl	8000cbc <__gnu_Unwind_Restore_VFP_D>
 8000b96:	e727      	b.n	80009e8 <_Unwind_VRS_Pop+0x30>
 8000b98:	2002      	movs	r0, #2
 8000b9a:	e726      	b.n	80009ea <_Unwind_VRS_Pop+0x32>
 8000b9c:	6802      	ldr	r2, [r0, #0]
 8000b9e:	f1b8 0f10 	cmp.w	r8, #16
 8000ba2:	f002 0101 	and.w	r1, r2, #1
 8000ba6:	d943      	bls.n	8000c30 <_Unwind_VRS_Pop+0x278>
 8000ba8:	b151      	cbz	r1, 8000bc0 <_Unwind_VRS_Pop+0x208>
 8000baa:	f022 0201 	bic.w	r2, r2, #1
 8000bae:	f042 0202 	orr.w	r2, r2, #2
 8000bb2:	f840 2b50 	str.w	r2, [r0], #80
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	f000 f884 	bl	8000cc4 <__gnu_Unwind_Save_VFP_D>
 8000bbc:	6832      	ldr	r2, [r6, #0]
 8000bbe:	9b01      	ldr	r3, [sp, #4]
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	0750      	lsls	r0, r2, #29
 8000bc4:	d451      	bmi.n	8000c6a <_Unwind_VRS_Pop+0x2b2>
 8000bc6:	ad22      	add	r5, sp, #136	@ 0x88
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f000 f87b 	bl	8000cc4 <__gnu_Unwind_Save_VFP_D>
 8000bce:	a802      	add	r0, sp, #8
 8000bd0:	f000 f880 	bl	8000cd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bd4:	f1c7 0210 	rsb	r2, r7, #16
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8000bdc:	9b01      	ldr	r3, [sp, #4]
 8000bde:	f1a8 0810 	sub.w	r8, r8, #16
 8000be2:	3a01      	subs	r2, #1
 8000be4:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8000be8:	e7bf      	b.n	8000b6a <_Unwind_VRS_Pop+0x1b2>
 8000bea:	f023 0310 	bic.w	r3, r3, #16
 8000bee:	6033      	str	r3, [r6, #0]
 8000bf0:	f506 70ec 	add.w	r0, r6, #472	@ 0x1d8
 8000bf4:	f000 f8c0 	bl	8000d78 <__gnu_Unwind_Save_WMMXC>
 8000bf8:	e77a      	b.n	8000af0 <_Unwind_VRS_Pop+0x138>
 8000bfa:	f023 0308 	bic.w	r3, r3, #8
 8000bfe:	6003      	str	r3, [r0, #0]
 8000c00:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 8000c04:	f000 f88c 	bl	8000d20 <__gnu_Unwind_Save_WMMXD>
 8000c08:	e753      	b.n	8000ab2 <_Unwind_VRS_Pop+0xfa>
 8000c0a:	2f10      	cmp	r7, #16
 8000c0c:	4638      	mov	r0, r7
 8000c0e:	bf38      	it	cc
 8000c10:	2010      	movcc	r0, #16
 8000c12:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8000c16:	3810      	subs	r0, #16
 8000c18:	ad02      	add	r5, sp, #8
 8000c1a:	3901      	subs	r1, #1
 8000c1c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8000c20:	e725      	b.n	8000a6e <_Unwind_VRS_Pop+0xb6>
 8000c22:	ad22      	add	r5, sp, #136	@ 0x88
 8000c24:	3104      	adds	r1, #4
 8000c26:	63b1      	str	r1, [r6, #56]	@ 0x38
 8000c28:	4628      	mov	r0, r5
 8000c2a:	f000 f83f 	bl	8000cac <__gnu_Unwind_Restore_VFP>
 8000c2e:	e6db      	b.n	80009e8 <_Unwind_VRS_Pop+0x30>
 8000c30:	bb19      	cbnz	r1, 8000c7a <_Unwind_VRS_Pop+0x2c2>
 8000c32:	ad22      	add	r5, sp, #136	@ 0x88
 8000c34:	4628      	mov	r0, r5
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	f000 f844 	bl	8000cc4 <__gnu_Unwind_Save_VFP_D>
 8000c3c:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8000c3e:	2c00      	cmp	r4, #0
 8000c40:	d0a6      	beq.n	8000b90 <_Unwind_VRS_Pop+0x1d8>
 8000c42:	0062      	lsls	r2, r4, #1
 8000c44:	9b01      	ldr	r3, [sp, #4]
 8000c46:	3a01      	subs	r2, #1
 8000c48:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8000c4c:	f04f 0800 	mov.w	r8, #0
 8000c50:	e78b      	b.n	8000b6a <_Unwind_VRS_Pop+0x1b2>
 8000c52:	f022 0204 	bic.w	r2, r2, #4
 8000c56:	f840 2bd8 	str.w	r2, [r0], #216
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	f000 f83a 	bl	8000cd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000c60:	e6f9      	b.n	8000a56 <_Unwind_VRS_Pop+0x9e>
 8000c62:	a822      	add	r0, sp, #136	@ 0x88
 8000c64:	f000 f82a 	bl	8000cbc <__gnu_Unwind_Restore_VFP_D>
 8000c68:	e712      	b.n	8000a90 <_Unwind_VRS_Pop+0xd8>
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	f022 0204 	bic.w	r2, r2, #4
 8000c70:	f840 2bd8 	str.w	r2, [r0], #216
 8000c74:	f000 f82e 	bl	8000cd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000c78:	e7a5      	b.n	8000bc6 <_Unwind_VRS_Pop+0x20e>
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	f022 0201 	bic.w	r2, r2, #1
 8000c80:	f042 0202 	orr.w	r2, r2, #2
 8000c84:	f840 2b50 	str.w	r2, [r0], #80
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	f000 f81b 	bl	8000cc4 <__gnu_Unwind_Save_VFP_D>
 8000c8e:	9b01      	ldr	r3, [sp, #4]
 8000c90:	e7cf      	b.n	8000c32 <_Unwind_VRS_Pop+0x27a>
 8000c92:	bf00      	nop

08000c94 <__restore_core_regs>:
 8000c94:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8000c98:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c9c:	469c      	mov	ip, r3
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000ca4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ca8:	46e5      	mov	sp, ip
 8000caa:	bd00      	pop	{pc}

08000cac <__gnu_Unwind_Restore_VFP>:
 8000cac:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <__gnu_Unwind_Save_VFP>:
 8000cb4:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__gnu_Unwind_Restore_VFP_D>:
 8000cbc:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <__gnu_Unwind_Save_VFP_D>:
 8000cc4:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000ccc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000cd4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__gnu_Unwind_Restore_WMMXD>:
 8000cdc:	ecf0 0102 	ldfe	f0, [r0], #8
 8000ce0:	ecf0 1102 	ldfe	f1, [r0], #8
 8000ce4:	ecf0 2102 	ldfe	f2, [r0], #8
 8000ce8:	ecf0 3102 	ldfe	f3, [r0], #8
 8000cec:	ecf0 4102 	ldfe	f4, [r0], #8
 8000cf0:	ecf0 5102 	ldfe	f5, [r0], #8
 8000cf4:	ecf0 6102 	ldfe	f6, [r0], #8
 8000cf8:	ecf0 7102 	ldfe	f7, [r0], #8
 8000cfc:	ecf0 8102 	ldfp	f0, [r0], #8
 8000d00:	ecf0 9102 	ldfp	f1, [r0], #8
 8000d04:	ecf0 a102 	ldfp	f2, [r0], #8
 8000d08:	ecf0 b102 	ldfp	f3, [r0], #8
 8000d0c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000d10:	ecf0 d102 	ldfp	f5, [r0], #8
 8000d14:	ecf0 e102 	ldfp	f6, [r0], #8
 8000d18:	ecf0 f102 	ldfp	f7, [r0], #8
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__gnu_Unwind_Save_WMMXD>:
 8000d20:	ece0 0102 	stfe	f0, [r0], #8
 8000d24:	ece0 1102 	stfe	f1, [r0], #8
 8000d28:	ece0 2102 	stfe	f2, [r0], #8
 8000d2c:	ece0 3102 	stfe	f3, [r0], #8
 8000d30:	ece0 4102 	stfe	f4, [r0], #8
 8000d34:	ece0 5102 	stfe	f5, [r0], #8
 8000d38:	ece0 6102 	stfe	f6, [r0], #8
 8000d3c:	ece0 7102 	stfe	f7, [r0], #8
 8000d40:	ece0 8102 	stfp	f0, [r0], #8
 8000d44:	ece0 9102 	stfp	f1, [r0], #8
 8000d48:	ece0 a102 	stfp	f2, [r0], #8
 8000d4c:	ece0 b102 	stfp	f3, [r0], #8
 8000d50:	ece0 c102 	stfp	f4, [r0], #8
 8000d54:	ece0 d102 	stfp	f5, [r0], #8
 8000d58:	ece0 e102 	stfp	f6, [r0], #8
 8000d5c:	ece0 f102 	stfp	f7, [r0], #8
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <__gnu_Unwind_Restore_WMMXC>:
 8000d64:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000d68:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000d6c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000d70:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__gnu_Unwind_Save_WMMXC>:
 8000d78:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d7c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d80:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d84:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <_Unwind_RaiseException>:
 8000d8c:	46ec      	mov	ip, sp
 8000d8e:	b500      	push	{lr}
 8000d90:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d94:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000da0:	a901      	add	r1, sp, #4
 8000da2:	f7ff fbb3 	bl	800050c <__gnu_Unwind_RaiseException>
 8000da6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000daa:	b012      	add	sp, #72	@ 0x48
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <_Unwind_Resume>:
 8000db0:	46ec      	mov	ip, sp
 8000db2:	b500      	push	{lr}
 8000db4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000db8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000dc4:	a901      	add	r1, sp, #4
 8000dc6:	f7ff fbdd 	bl	8000584 <__gnu_Unwind_Resume>
 8000dca:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000dce:	b012      	add	sp, #72	@ 0x48
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <_Unwind_Resume_or_Rethrow>:
 8000dd4:	46ec      	mov	ip, sp
 8000dd6:	b500      	push	{lr}
 8000dd8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ddc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000de8:	a901      	add	r1, sp, #4
 8000dea:	f7ff fbed 	bl	80005c8 <__gnu_Unwind_Resume_or_Rethrow>
 8000dee:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000df2:	b012      	add	sp, #72	@ 0x48
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <_Unwind_ForcedUnwind>:
 8000df8:	46ec      	mov	ip, sp
 8000dfa:	b500      	push	{lr}
 8000dfc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000e00:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000e0c:	ab01      	add	r3, sp, #4
 8000e0e:	f7ff fbb1 	bl	8000574 <__gnu_Unwind_ForcedUnwind>
 8000e12:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000e16:	b012      	add	sp, #72	@ 0x48
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <_Unwind_Backtrace>:
 8000e1c:	46ec      	mov	ip, sp
 8000e1e:	b500      	push	{lr}
 8000e20:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000e24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000e30:	aa01      	add	r2, sp, #4
 8000e32:	f7ff fc27 	bl	8000684 <__gnu_Unwind_Backtrace>
 8000e36:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000e3a:	b012      	add	sp, #72	@ 0x48
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <next_unwind_byte>:
 8000e40:	7a02      	ldrb	r2, [r0, #8]
 8000e42:	4603      	mov	r3, r0
 8000e44:	b97a      	cbnz	r2, 8000e66 <next_unwind_byte+0x26>
 8000e46:	7a42      	ldrb	r2, [r0, #9]
 8000e48:	b1a2      	cbz	r2, 8000e74 <next_unwind_byte+0x34>
 8000e4a:	6841      	ldr	r1, [r0, #4]
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	b410      	push	{r4}
 8000e50:	7242      	strb	r2, [r0, #9]
 8000e52:	6808      	ldr	r0, [r1, #0]
 8000e54:	2203      	movs	r2, #3
 8000e56:	1d0c      	adds	r4, r1, #4
 8000e58:	721a      	strb	r2, [r3, #8]
 8000e5a:	0202      	lsls	r2, r0, #8
 8000e5c:	605c      	str	r4, [r3, #4]
 8000e5e:	0e00      	lsrs	r0, r0, #24
 8000e60:	bc10      	pop	{r4}
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	4770      	bx	lr
 8000e66:	6800      	ldr	r0, [r0, #0]
 8000e68:	3a01      	subs	r2, #1
 8000e6a:	721a      	strb	r2, [r3, #8]
 8000e6c:	0202      	lsls	r2, r0, #8
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	0e00      	lsrs	r0, r0, #24
 8000e72:	4770      	bx	lr
 8000e74:	20b0      	movs	r0, #176	@ 0xb0
 8000e76:	4770      	bx	lr

08000e78 <_Unwind_GetGR.constprop.0>:
 8000e78:	b500      	push	{lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	aa03      	add	r2, sp, #12
 8000e7e:	2300      	movs	r3, #0
 8000e80:	9200      	str	r2, [sp, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	220c      	movs	r2, #12
 8000e86:	f7ff fbaf 	bl	80005e8 <_Unwind_VRS_Get>
 8000e8a:	9803      	ldr	r0, [sp, #12]
 8000e8c:	b005      	add	sp, #20
 8000e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e92:	bf00      	nop

08000e94 <unwind_UCB_from_context>:
 8000e94:	e7f0      	b.n	8000e78 <_Unwind_GetGR.constprop.0>
 8000e96:	bf00      	nop

08000e98 <__gnu_unwind_execute>:
 8000e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e9c:	4606      	mov	r6, r0
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	460d      	mov	r5, r1
 8000ea2:	f04f 0800 	mov.w	r8, #0
 8000ea6:	4628      	mov	r0, r5
 8000ea8:	f7ff ffca 	bl	8000e40 <next_unwind_byte>
 8000eac:	28b0      	cmp	r0, #176	@ 0xb0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	f000 811c 	beq.w	80010ec <__gnu_unwind_execute+0x254>
 8000eb4:	0607      	lsls	r7, r0, #24
 8000eb6:	d55b      	bpl.n	8000f70 <__gnu_unwind_execute+0xd8>
 8000eb8:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8000ebc:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ebe:	d01a      	beq.n	8000ef6 <__gnu_unwind_execute+0x5e>
 8000ec0:	d830      	bhi.n	8000f24 <__gnu_unwind_execute+0x8c>
 8000ec2:	2b80      	cmp	r3, #128	@ 0x80
 8000ec4:	f000 8082 	beq.w	8000fcc <__gnu_unwind_execute+0x134>
 8000ec8:	2b90      	cmp	r3, #144	@ 0x90
 8000eca:	d127      	bne.n	8000f1c <__gnu_unwind_execute+0x84>
 8000ecc:	f000 030d 	and.w	r3, r0, #13
 8000ed0:	2b0d      	cmp	r3, #13
 8000ed2:	d023      	beq.n	8000f1c <__gnu_unwind_execute+0x84>
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f000 020f 	and.w	r2, r0, #15
 8000edc:	4619      	mov	r1, r3
 8000ede:	9700      	str	r7, [sp, #0]
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	f7ff fb81 	bl	80005e8 <_Unwind_VRS_Get>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9700      	str	r7, [sp, #0]
 8000eea:	220d      	movs	r2, #13
 8000eec:	4619      	mov	r1, r3
 8000eee:	4630      	mov	r0, r6
 8000ef0:	f7ff fba2 	bl	8000638 <_Unwind_VRS_Set>
 8000ef4:	e7d7      	b.n	8000ea6 <__gnu_unwind_execute+0xe>
 8000ef6:	43c3      	mvns	r3, r0
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8000f00:	411a      	asrs	r2, r3
 8000f02:	0701      	lsls	r1, r0, #28
 8000f04:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8000f08:	d501      	bpl.n	8000f0e <__gnu_unwind_execute+0x76>
 8000f0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f0e:	2300      	movs	r3, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	4630      	mov	r0, r6
 8000f14:	f7ff fd50 	bl	80009b8 <_Unwind_VRS_Pop>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d0c4      	beq.n	8000ea6 <__gnu_unwind_execute+0xe>
 8000f1c:	2009      	movs	r0, #9
 8000f1e:	b005      	add	sp, #20
 8000f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f24:	2bb0      	cmp	r3, #176	@ 0xb0
 8000f26:	d068      	beq.n	8000ffa <__gnu_unwind_execute+0x162>
 8000f28:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f2a:	d13d      	bne.n	8000fa8 <__gnu_unwind_execute+0x110>
 8000f2c:	28c6      	cmp	r0, #198	@ 0xc6
 8000f2e:	f000 80ca 	beq.w	80010c6 <__gnu_unwind_execute+0x22e>
 8000f32:	28c7      	cmp	r0, #199	@ 0xc7
 8000f34:	f000 80df 	beq.w	80010f6 <__gnu_unwind_execute+0x25e>
 8000f38:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8000f3c:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f3e:	f000 80ec 	beq.w	800111a <__gnu_unwind_execute+0x282>
 8000f42:	28c8      	cmp	r0, #200	@ 0xc8
 8000f44:	f000 80f7 	beq.w	8001136 <__gnu_unwind_execute+0x29e>
 8000f48:	28c9      	cmp	r0, #201	@ 0xc9
 8000f4a:	d1e7      	bne.n	8000f1c <__gnu_unwind_execute+0x84>
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	f7ff ff77 	bl	8000e40 <next_unwind_byte>
 8000f52:	0302      	lsls	r2, r0, #12
 8000f54:	f000 000f 	and.w	r0, r0, #15
 8000f58:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8000f5c:	3001      	adds	r0, #1
 8000f5e:	4302      	orrs	r2, r0
 8000f60:	2101      	movs	r1, #1
 8000f62:	2305      	movs	r3, #5
 8000f64:	4630      	mov	r0, r6
 8000f66:	f7ff fd27 	bl	80009b8 <_Unwind_VRS_Pop>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d09b      	beq.n	8000ea6 <__gnu_unwind_execute+0xe>
 8000f6e:	e7d5      	b.n	8000f1c <__gnu_unwind_execute+0x84>
 8000f70:	0083      	lsls	r3, r0, #2
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	1d1f      	adds	r7, r3, #4
 8000f76:	f10d 0908 	add.w	r9, sp, #8
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f8cd 9000 	str.w	r9, [sp]
 8000f82:	220d      	movs	r2, #13
 8000f84:	4630      	mov	r0, r6
 8000f86:	f7ff fb2f 	bl	80005e8 <_Unwind_VRS_Get>
 8000f8a:	9b02      	ldr	r3, [sp, #8]
 8000f8c:	f8cd 9000 	str.w	r9, [sp]
 8000f90:	0660      	lsls	r0, r4, #25
 8000f92:	bf4c      	ite	mi
 8000f94:	1bdf      	submi	r7, r3, r7
 8000f96:	18ff      	addpl	r7, r7, r3
 8000f98:	2300      	movs	r3, #0
 8000f9a:	220d      	movs	r2, #13
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	9702      	str	r7, [sp, #8]
 8000fa2:	f7ff fb49 	bl	8000638 <_Unwind_VRS_Set>
 8000fa6:	e77e      	b.n	8000ea6 <__gnu_unwind_execute+0xe>
 8000fa8:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8000fac:	2bd0      	cmp	r3, #208	@ 0xd0
 8000fae:	d1b5      	bne.n	8000f1c <__gnu_unwind_execute+0x84>
 8000fb0:	f000 0207 	and.w	r2, r0, #7
 8000fb4:	3201      	adds	r2, #1
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	f7ff fcfa 	bl	80009b8 <_Unwind_VRS_Pop>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	f43f af6e 	beq.w	8000ea6 <__gnu_unwind_execute+0xe>
 8000fca:	e7a7      	b.n	8000f1c <__gnu_unwind_execute+0x84>
 8000fcc:	4628      	mov	r0, r5
 8000fce:	f7ff ff37 	bl	8000e40 <next_unwind_byte>
 8000fd2:	0224      	lsls	r4, r4, #8
 8000fd4:	4320      	orrs	r0, r4
 8000fd6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8000fda:	d09f      	beq.n	8000f1c <__gnu_unwind_execute+0x84>
 8000fdc:	0104      	lsls	r4, r0, #4
 8000fde:	2300      	movs	r3, #0
 8000fe0:	b2a2      	uxth	r2, r4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	f7ff fce7 	bl	80009b8 <_Unwind_VRS_Pop>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d196      	bne.n	8000f1c <__gnu_unwind_execute+0x84>
 8000fee:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8000ff2:	bf18      	it	ne
 8000ff4:	f04f 0801 	movne.w	r8, #1
 8000ff8:	e755      	b.n	8000ea6 <__gnu_unwind_execute+0xe>
 8000ffa:	f1a0 03b1 	sub.w	r3, r0, #177	@ 0xb1
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	f200 80b5 	bhi.w	800116e <__gnu_unwind_execute+0x2d6>
 8001004:	e8df f003 	tbb	[pc, r3]
 8001008:	0c162955 	.word	0x0c162955
 800100c:	03          	.byte	0x03
 800100d:	00          	.byte	0x00
 800100e:	aa03      	add	r2, sp, #12
 8001010:	2300      	movs	r3, #0
 8001012:	9200      	str	r2, [sp, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	220d      	movs	r2, #13
 8001018:	4630      	mov	r0, r6
 800101a:	f7ff fae5 	bl	80005e8 <_Unwind_VRS_Get>
 800101e:	e742      	b.n	8000ea6 <__gnu_unwind_execute+0xe>
 8001020:	2300      	movs	r3, #0
 8001022:	461a      	mov	r2, r3
 8001024:	2105      	movs	r1, #5
 8001026:	4630      	mov	r0, r6
 8001028:	f7ff fcc6 	bl	80009b8 <_Unwind_VRS_Pop>
 800102c:	2800      	cmp	r0, #0
 800102e:	f43f af3a 	beq.w	8000ea6 <__gnu_unwind_execute+0xe>
 8001032:	e773      	b.n	8000f1c <__gnu_unwind_execute+0x84>
 8001034:	4628      	mov	r0, r5
 8001036:	f7ff ff03 	bl	8000e40 <next_unwind_byte>
 800103a:	0302      	lsls	r2, r0, #12
 800103c:	f000 000f 	and.w	r0, r0, #15
 8001040:	3001      	adds	r0, #1
 8001042:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001046:	2301      	movs	r3, #1
 8001048:	4302      	orrs	r2, r0
 800104a:	4619      	mov	r1, r3
 800104c:	4630      	mov	r0, r6
 800104e:	f7ff fcb3 	bl	80009b8 <_Unwind_VRS_Pop>
 8001052:	2800      	cmp	r0, #0
 8001054:	f43f af27 	beq.w	8000ea6 <__gnu_unwind_execute+0xe>
 8001058:	e760      	b.n	8000f1c <__gnu_unwind_execute+0x84>
 800105a:	2300      	movs	r3, #0
 800105c:	f10d 0908 	add.w	r9, sp, #8
 8001060:	220d      	movs	r2, #13
 8001062:	4619      	mov	r1, r3
 8001064:	f8cd 9000 	str.w	r9, [sp]
 8001068:	4630      	mov	r0, r6
 800106a:	f7ff fabd 	bl	80005e8 <_Unwind_VRS_Get>
 800106e:	4628      	mov	r0, r5
 8001070:	f7ff fee6 	bl	8000e40 <next_unwind_byte>
 8001074:	0602      	lsls	r2, r0, #24
 8001076:	9c02      	ldr	r4, [sp, #8]
 8001078:	f04f 0702 	mov.w	r7, #2
 800107c:	d50b      	bpl.n	8001096 <__gnu_unwind_execute+0x1fe>
 800107e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001082:	40b8      	lsls	r0, r7
 8001084:	4404      	add	r4, r0
 8001086:	4628      	mov	r0, r5
 8001088:	9402      	str	r4, [sp, #8]
 800108a:	f7ff fed9 	bl	8000e40 <next_unwind_byte>
 800108e:	0603      	lsls	r3, r0, #24
 8001090:	f107 0707 	add.w	r7, r7, #7
 8001094:	d4f3      	bmi.n	800107e <__gnu_unwind_execute+0x1e6>
 8001096:	40b8      	lsls	r0, r7
 8001098:	2300      	movs	r3, #0
 800109a:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 800109e:	4404      	add	r4, r0
 80010a0:	f8cd 9000 	str.w	r9, [sp]
 80010a4:	220d      	movs	r2, #13
 80010a6:	4619      	mov	r1, r3
 80010a8:	4630      	mov	r0, r6
 80010aa:	9402      	str	r4, [sp, #8]
 80010ac:	f7ff fac4 	bl	8000638 <_Unwind_VRS_Set>
 80010b0:	e6f9      	b.n	8000ea6 <__gnu_unwind_execute+0xe>
 80010b2:	4628      	mov	r0, r5
 80010b4:	f7ff fec4 	bl	8000e40 <next_unwind_byte>
 80010b8:	1e43      	subs	r3, r0, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b0e      	cmp	r3, #14
 80010be:	4602      	mov	r2, r0
 80010c0:	f67f af25 	bls.w	8000f0e <__gnu_unwind_execute+0x76>
 80010c4:	e72a      	b.n	8000f1c <__gnu_unwind_execute+0x84>
 80010c6:	4628      	mov	r0, r5
 80010c8:	f7ff feba 	bl	8000e40 <next_unwind_byte>
 80010cc:	0302      	lsls	r2, r0, #12
 80010ce:	f000 000f 	and.w	r0, r0, #15
 80010d2:	3001      	adds	r0, #1
 80010d4:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80010d8:	2303      	movs	r3, #3
 80010da:	4302      	orrs	r2, r0
 80010dc:	4619      	mov	r1, r3
 80010de:	4630      	mov	r0, r6
 80010e0:	f7ff fc6a 	bl	80009b8 <_Unwind_VRS_Pop>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	f43f aede 	beq.w	8000ea6 <__gnu_unwind_execute+0xe>
 80010ea:	e717      	b.n	8000f1c <__gnu_unwind_execute+0x84>
 80010ec:	f1b8 0f00 	cmp.w	r8, #0
 80010f0:	d02d      	beq.n	800114e <__gnu_unwind_execute+0x2b6>
 80010f2:	2000      	movs	r0, #0
 80010f4:	e713      	b.n	8000f1e <__gnu_unwind_execute+0x86>
 80010f6:	4628      	mov	r0, r5
 80010f8:	f7ff fea2 	bl	8000e40 <next_unwind_byte>
 80010fc:	1e43      	subs	r3, r0, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b0e      	cmp	r3, #14
 8001102:	4602      	mov	r2, r0
 8001104:	f63f af0a 	bhi.w	8000f1c <__gnu_unwind_execute+0x84>
 8001108:	2300      	movs	r3, #0
 800110a:	2104      	movs	r1, #4
 800110c:	4630      	mov	r0, r6
 800110e:	f7ff fc53 	bl	80009b8 <_Unwind_VRS_Pop>
 8001112:	2800      	cmp	r0, #0
 8001114:	f43f aec7 	beq.w	8000ea6 <__gnu_unwind_execute+0xe>
 8001118:	e700      	b.n	8000f1c <__gnu_unwind_execute+0x84>
 800111a:	f000 020f 	and.w	r2, r0, #15
 800111e:	3201      	adds	r2, #1
 8001120:	2303      	movs	r3, #3
 8001122:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001126:	4619      	mov	r1, r3
 8001128:	4630      	mov	r0, r6
 800112a:	f7ff fc45 	bl	80009b8 <_Unwind_VRS_Pop>
 800112e:	2800      	cmp	r0, #0
 8001130:	f43f aeb9 	beq.w	8000ea6 <__gnu_unwind_execute+0xe>
 8001134:	e6f2      	b.n	8000f1c <__gnu_unwind_execute+0x84>
 8001136:	4628      	mov	r0, r5
 8001138:	f7ff fe82 	bl	8000e40 <next_unwind_byte>
 800113c:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001140:	f000 030f 	and.w	r3, r0, #15
 8001144:	3210      	adds	r2, #16
 8001146:	3301      	adds	r3, #1
 8001148:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800114c:	e708      	b.n	8000f60 <__gnu_unwind_execute+0xc8>
 800114e:	ac02      	add	r4, sp, #8
 8001150:	4643      	mov	r3, r8
 8001152:	4641      	mov	r1, r8
 8001154:	9400      	str	r4, [sp, #0]
 8001156:	220e      	movs	r2, #14
 8001158:	4630      	mov	r0, r6
 800115a:	f7ff fa45 	bl	80005e8 <_Unwind_VRS_Get>
 800115e:	220f      	movs	r2, #15
 8001160:	9400      	str	r4, [sp, #0]
 8001162:	4643      	mov	r3, r8
 8001164:	4641      	mov	r1, r8
 8001166:	4630      	mov	r0, r6
 8001168:	f7ff fa66 	bl	8000638 <_Unwind_VRS_Set>
 800116c:	e7c1      	b.n	80010f2 <__gnu_unwind_execute+0x25a>
 800116e:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001172:	2bb4      	cmp	r3, #180	@ 0xb4
 8001174:	f43f aed2 	beq.w	8000f1c <__gnu_unwind_execute+0x84>
 8001178:	f000 0207 	and.w	r2, r0, #7
 800117c:	3201      	adds	r2, #1
 800117e:	2301      	movs	r3, #1
 8001180:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001184:	4619      	mov	r1, r3
 8001186:	4630      	mov	r0, r6
 8001188:	f7ff fc16 	bl	80009b8 <_Unwind_VRS_Pop>
 800118c:	2800      	cmp	r0, #0
 800118e:	f43f ae8a 	beq.w	8000ea6 <__gnu_unwind_execute+0xe>
 8001192:	e6c3      	b.n	8000f1c <__gnu_unwind_execute+0x84>

08001194 <__gnu_unwind_frame>:
 8001194:	b510      	push	{r4, lr}
 8001196:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001198:	6853      	ldr	r3, [r2, #4]
 800119a:	b084      	sub	sp, #16
 800119c:	f04f 0c03 	mov.w	ip, #3
 80011a0:	3208      	adds	r2, #8
 80011a2:	021c      	lsls	r4, r3, #8
 80011a4:	4608      	mov	r0, r1
 80011a6:	0e1b      	lsrs	r3, r3, #24
 80011a8:	a901      	add	r1, sp, #4
 80011aa:	9401      	str	r4, [sp, #4]
 80011ac:	9202      	str	r2, [sp, #8]
 80011ae:	f88d c00c 	strb.w	ip, [sp, #12]
 80011b2:	f88d 300d 	strb.w	r3, [sp, #13]
 80011b6:	f7ff fe6f 	bl	8000e98 <__gnu_unwind_execute>
 80011ba:	b004      	add	sp, #16
 80011bc:	bd10      	pop	{r4, pc}
 80011be:	bf00      	nop

080011c0 <_Unwind_GetRegionStart>:
 80011c0:	b508      	push	{r3, lr}
 80011c2:	f7ff fe67 	bl	8000e94 <unwind_UCB_from_context>
 80011c6:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80011c8:	bd08      	pop	{r3, pc}
 80011ca:	bf00      	nop

080011cc <_Unwind_GetLanguageSpecificData>:
 80011cc:	b508      	push	{r3, lr}
 80011ce:	f7ff fe61 	bl	8000e94 <unwind_UCB_from_context>
 80011d2:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80011d4:	79c3      	ldrb	r3, [r0, #7]
 80011d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80011da:	3008      	adds	r0, #8
 80011dc:	bd08      	pop	{r3, pc}
 80011de:	bf00      	nop

080011e0 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <SCB_EnableICache+0x2c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80011fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001200:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001204:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001210:	b410      	push	{r4}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <SCB_EnableDCache+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800121a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800121e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001222:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001226:	e000      	b.n	800122a <SCB_EnableDCache+0x1a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8001228:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800122a:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800122e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001232:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001236:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800123a:	490b      	ldr	r1, [pc, #44]	@ (8001268 <SCB_EnableDCache+0x58>)
 800123c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8001240:	4613      	mov	r3, r2
 8001242:	3a01      	subs	r2, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f2      	bne.n	800122e <SCB_EnableDCache+0x1e>
    } while(sets-- != 0U);
 8001248:	1e43      	subs	r3, r0, #1
 800124a:	2800      	cmp	r0, #0
 800124c:	d1ec      	bne.n	8001228 <SCB_EnableDCache+0x18>
 800124e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001252:	694b      	ldr	r3, [r1, #20]
 8001254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001258:	614b      	str	r3, [r1, #20]
 800125a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800125e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <TIM2_IRQHandler>:
	}
}

extern "C" void TIM2_IRQHandler(void) {
	uint32_t now;
	if (TIM2->SR & TIM_SR_CC3IF) {
 800126c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f013 0f08 	tst.w	r3, #8
 8001276:	d017      	beq.n	80012a8 <TIM2_IRQHandler+0x3c>
		now = TIM2->CCR3; // значение счётчика при фронте
 8001278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800127c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
		if (!waiting_fall[0]) {
 800127e:	4a28      	ldr	r2, [pc, #160]	@ (8001320 <TIM2_IRQHandler+0xb4>)
 8001280:	7812      	ldrb	r2, [r2, #0]
 8001282:	2a00      	cmp	r2, #0
 8001284:	d12e      	bne.n	80012e4 <TIM2_IRQHandler+0x78>
			// Поймали фронт вверх
			t_rise[0] = now;
 8001286:	4a27      	ldr	r2, [pc, #156]	@ (8001324 <TIM2_IRQHandler+0xb8>)
 8001288:	6013      	str	r3, [r2, #0]
			waiting_fall[0] = 1;
 800128a:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <TIM2_IRQHandler+0xb4>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
			TIM2->CCER |= TIM_CCER_CC3P;   // переключаем на falling
 8001290:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001294:	6a13      	ldr	r3, [r2, #32]
 8001296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129a:	6213      	str	r3, [r2, #32]
			// Поймали фронт вниз
			high_time[0] = now - t_rise[0];
			waiting_fall[0] = 0;
			TIM2->CCER &= ~TIM_CCER_CC3P;  // обратно на rising
		}
		TIM2->SR &= ~TIM_SR_CC3IF;
 800129c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a0:	6913      	ldr	r3, [r2, #16]
 80012a2:	f023 0308 	bic.w	r3, r3, #8
 80012a6:	6113      	str	r3, [r2, #16]
	}
	if (TIM2->SR & TIM_SR_CC4IF) {
 80012a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	f013 0f10 	tst.w	r3, #16
 80012b2:	d016      	beq.n	80012e2 <TIM2_IRQHandler+0x76>
		now = TIM2->CCR4; // значение счётчика при фронте
 80012b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
		if (!waiting_fall[1]) {
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <TIM2_IRQHandler+0xb4>)
 80012bc:	7852      	ldrb	r2, [r2, #1]
 80012be:	bb02      	cbnz	r2, 8001302 <TIM2_IRQHandler+0x96>
			// Поймали фронт вверх
			t_rise[1] = now;
 80012c0:	4a18      	ldr	r2, [pc, #96]	@ (8001324 <TIM2_IRQHandler+0xb8>)
 80012c2:	6053      	str	r3, [r2, #4]
			waiting_fall[1] = 1;
 80012c4:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <TIM2_IRQHandler+0xb4>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	705a      	strb	r2, [r3, #1]
			TIM2->CCER |= TIM_CCER_CC4P;   // переключаем на falling
 80012ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ce:	6a13      	ldr	r3, [r2, #32]
 80012d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012d4:	6213      	str	r3, [r2, #32]
			// Поймали фронт вниз
			high_time[1] = now - t_rise[1];
			waiting_fall[1] = 0;
			TIM2->CCER &= ~TIM_CCER_CC4P;  // обратно на rising
		}
		TIM2->SR &= ~TIM_SR_CC4IF;
 80012d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012da:	6913      	ldr	r3, [r2, #16]
 80012dc:	f023 0310 	bic.w	r3, r3, #16
 80012e0:	6113      	str	r3, [r2, #16]
	}
}
 80012e2:	4770      	bx	lr
			high_time[0] = now - t_rise[0];
 80012e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001324 <TIM2_IRQHandler+0xb8>)
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001328 <TIM2_IRQHandler+0xbc>)
 80012ec:	6013      	str	r3, [r2, #0]
			waiting_fall[0] = 0;
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <TIM2_IRQHandler+0xb4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
			TIM2->CCER &= ~TIM_CCER_CC3P;  // обратно на rising
 80012f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f8:	6a13      	ldr	r3, [r2, #32]
 80012fa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80012fe:	6213      	str	r3, [r2, #32]
 8001300:	e7cc      	b.n	800129c <TIM2_IRQHandler+0x30>
			high_time[1] = now - t_rise[1];
 8001302:	4a08      	ldr	r2, [pc, #32]	@ (8001324 <TIM2_IRQHandler+0xb8>)
 8001304:	6852      	ldr	r2, [r2, #4]
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	4a07      	ldr	r2, [pc, #28]	@ (8001328 <TIM2_IRQHandler+0xbc>)
 800130a:	6053      	str	r3, [r2, #4]
			waiting_fall[1] = 0;
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <TIM2_IRQHandler+0xb4>)
 800130e:	2200      	movs	r2, #0
 8001310:	705a      	strb	r2, [r3, #1]
			TIM2->CCER &= ~TIM_CCER_CC4P;  // обратно на rising
 8001312:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001316:	6a13      	ldr	r3, [r2, #32]
 8001318:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800131c:	6213      	str	r3, [r2, #32]
 800131e:	e7da      	b.n	80012d6 <TIM2_IRQHandler+0x6a>
 8001320:	2000015c 	.word	0x2000015c
 8001324:	2000017c 	.word	0x2000017c
 8001328:	20000164 	.word	0x20000164

0800132c <TIM3_IRQHandler>:

extern "C" void TIM3_IRQHandler(void) {
	uint16_t now;
	if (TIM3->SR & TIM_SR_CC1IF) {
 800132c:	4b56      	ldr	r3, [pc, #344]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	f013 0f02 	tst.w	r3, #2
 8001334:	d016      	beq.n	8001364 <TIM3_IRQHandler+0x38>
		now = (uint16_t) TIM3->CCR1; // значение счётчика при фронте
 8001336:	4b54      	ldr	r3, [pc, #336]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 8001338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133a:	b293      	uxth	r3, r2
		if (!waiting_fall[2]) {
 800133c:	4953      	ldr	r1, [pc, #332]	@ (800148c <TIM3_IRQHandler+0x160>)
 800133e:	7889      	ldrb	r1, [r1, #2]
 8001340:	2900      	cmp	r1, #0
 8001342:	d164      	bne.n	800140e <TIM3_IRQHandler+0xe2>
			// Поймали фронт вверх
			t_rise[2] = now;
 8001344:	461a      	mov	r2, r3
 8001346:	4b52      	ldr	r3, [pc, #328]	@ (8001490 <TIM3_IRQHandler+0x164>)
 8001348:	609a      	str	r2, [r3, #8]
			waiting_fall[2] = 1;
 800134a:	4b50      	ldr	r3, [pc, #320]	@ (800148c <TIM3_IRQHandler+0x160>)
 800134c:	2201      	movs	r2, #1
 800134e:	709a      	strb	r2, [r3, #2]
			TIM3->CCER |= TIM_CCER_CC1P;   // переключаем на falling
 8001350:	4a4d      	ldr	r2, [pc, #308]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 8001352:	6a13      	ldr	r3, [r2, #32]
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6213      	str	r3, [r2, #32]
			// Поймали фронт вниз
			high_time[2] = (uint16_t) (now - t_rise[2]);
			waiting_fall[2] = 0;
			TIM3->CCER &= ~TIM_CCER_CC1P;  // обратно на rising
		}
		TIM3->SR &= ~TIM_SR_CC1IF;
 800135a:	4a4b      	ldr	r2, [pc, #300]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 800135c:	6913      	ldr	r3, [r2, #16]
 800135e:	f023 0302 	bic.w	r3, r3, #2
 8001362:	6113      	str	r3, [r2, #16]
	}
	if (TIM3->SR & TIM_SR_CC2IF) {
 8001364:	4b48      	ldr	r3, [pc, #288]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	f013 0f04 	tst.w	r3, #4
 800136c:	d016      	beq.n	800139c <TIM3_IRQHandler+0x70>
		now = (uint16_t) TIM3->CCR2; // значение счётчика при фронте
 800136e:	4b46      	ldr	r3, [pc, #280]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 8001370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001372:	b293      	uxth	r3, r2
		if (!waiting_fall[3]) {
 8001374:	4945      	ldr	r1, [pc, #276]	@ (800148c <TIM3_IRQHandler+0x160>)
 8001376:	78c9      	ldrb	r1, [r1, #3]
 8001378:	2900      	cmp	r1, #0
 800137a:	d157      	bne.n	800142c <TIM3_IRQHandler+0x100>
			// Поймали фронт вверх
			t_rise[3] = now;
 800137c:	461a      	mov	r2, r3
 800137e:	4b44      	ldr	r3, [pc, #272]	@ (8001490 <TIM3_IRQHandler+0x164>)
 8001380:	60da      	str	r2, [r3, #12]
			waiting_fall[3] = 1;
 8001382:	4b42      	ldr	r3, [pc, #264]	@ (800148c <TIM3_IRQHandler+0x160>)
 8001384:	2201      	movs	r2, #1
 8001386:	70da      	strb	r2, [r3, #3]
			TIM3->CCER |= TIM_CCER_CC2P;   // переключаем на falling
 8001388:	4a3f      	ldr	r2, [pc, #252]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 800138a:	6a13      	ldr	r3, [r2, #32]
 800138c:	f043 0320 	orr.w	r3, r3, #32
 8001390:	6213      	str	r3, [r2, #32]
			// Поймали фронт вниз
			high_time[3] = (uint16_t) (now - t_rise[3]);
			waiting_fall[3] = 0;
			TIM3->CCER &= ~TIM_CCER_CC2P;  // обратно на rising
		}
		TIM3->SR &= ~TIM_SR_CC2IF;
 8001392:	4a3d      	ldr	r2, [pc, #244]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 8001394:	6913      	ldr	r3, [r2, #16]
 8001396:	f023 0304 	bic.w	r3, r3, #4
 800139a:	6113      	str	r3, [r2, #16]
	}
	if (TIM3->SR & TIM_SR_CC3IF) {
 800139c:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	f013 0f08 	tst.w	r3, #8
 80013a4:	d016      	beq.n	80013d4 <TIM3_IRQHandler+0xa8>
		now = (uint16_t) TIM3->CCR3; // значение счётчика при фронте
 80013a6:	4b38      	ldr	r3, [pc, #224]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 80013a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013aa:	b293      	uxth	r3, r2
		if (!waiting_fall[4]) {
 80013ac:	4937      	ldr	r1, [pc, #220]	@ (800148c <TIM3_IRQHandler+0x160>)
 80013ae:	7909      	ldrb	r1, [r1, #4]
 80013b0:	2900      	cmp	r1, #0
 80013b2:	d14a      	bne.n	800144a <TIM3_IRQHandler+0x11e>
			// Поймали фронт вверх
			t_rise[4] = now;
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b36      	ldr	r3, [pc, #216]	@ (8001490 <TIM3_IRQHandler+0x164>)
 80013b8:	611a      	str	r2, [r3, #16]
			waiting_fall[4] = 1;
 80013ba:	4b34      	ldr	r3, [pc, #208]	@ (800148c <TIM3_IRQHandler+0x160>)
 80013bc:	2201      	movs	r2, #1
 80013be:	711a      	strb	r2, [r3, #4]
			TIM3->CCER |= TIM_CCER_CC3P;   // переключаем на falling
 80013c0:	4a31      	ldr	r2, [pc, #196]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 80013c2:	6a13      	ldr	r3, [r2, #32]
 80013c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c8:	6213      	str	r3, [r2, #32]
			// Поймали фронт вниз
			high_time[4] = (uint16_t) (now - t_rise[4]);
			waiting_fall[4] = 0;
			TIM3->CCER &= ~TIM_CCER_CC3P;  // обратно на rising
		}
		TIM3->SR &= ~TIM_SR_CC3IF;
 80013ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 80013cc:	6913      	ldr	r3, [r2, #16]
 80013ce:	f023 0308 	bic.w	r3, r3, #8
 80013d2:	6113      	str	r3, [r2, #16]
	}
	if (TIM3->SR & TIM_SR_CC4IF) {
 80013d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	f013 0f10 	tst.w	r3, #16
 80013dc:	d016      	beq.n	800140c <TIM3_IRQHandler+0xe0>
		now = (uint16_t) TIM3->CCR4; // значение счётчика при фронте
 80013de:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 80013e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013e2:	b293      	uxth	r3, r2
		if (!waiting_fall[5]) {
 80013e4:	4929      	ldr	r1, [pc, #164]	@ (800148c <TIM3_IRQHandler+0x160>)
 80013e6:	7949      	ldrb	r1, [r1, #5]
 80013e8:	2900      	cmp	r1, #0
 80013ea:	d13d      	bne.n	8001468 <TIM3_IRQHandler+0x13c>
			// Поймали фронт вверх
			t_rise[5] = now;
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <TIM3_IRQHandler+0x164>)
 80013f0:	615a      	str	r2, [r3, #20]
			waiting_fall[5] = 1;
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <TIM3_IRQHandler+0x160>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	715a      	strb	r2, [r3, #5]
			TIM3->CCER |= TIM_CCER_CC4P;   // переключаем на falling
 80013f8:	4a23      	ldr	r2, [pc, #140]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 80013fa:	6a13      	ldr	r3, [r2, #32]
 80013fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001400:	6213      	str	r3, [r2, #32]
			// Поймали фронт вниз
			high_time[5] = (uint16_t) (now - t_rise[5]);
			waiting_fall[5] = 0;
			TIM3->CCER &= ~TIM_CCER_CC4P;  // обратно на rising
		}
		TIM3->SR &= ~TIM_SR_CC4IF;
 8001402:	4a21      	ldr	r2, [pc, #132]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 8001404:	6913      	ldr	r3, [r2, #16]
 8001406:	f023 0310 	bic.w	r3, r3, #16
 800140a:	6113      	str	r3, [r2, #16]
	}
}
 800140c:	4770      	bx	lr
			high_time[2] = (uint16_t) (now - t_rise[2]);
 800140e:	4a20      	ldr	r2, [pc, #128]	@ (8001490 <TIM3_IRQHandler+0x164>)
 8001410:	6892      	ldr	r2, [r2, #8]
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	b29b      	uxth	r3, r3
 8001416:	4a1f      	ldr	r2, [pc, #124]	@ (8001494 <TIM3_IRQHandler+0x168>)
 8001418:	6093      	str	r3, [r2, #8]
			waiting_fall[2] = 0;
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <TIM3_IRQHandler+0x160>)
 800141c:	2200      	movs	r2, #0
 800141e:	709a      	strb	r2, [r3, #2]
			TIM3->CCER &= ~TIM_CCER_CC1P;  // обратно на rising
 8001420:	4a19      	ldr	r2, [pc, #100]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 8001422:	6a13      	ldr	r3, [r2, #32]
 8001424:	f023 0302 	bic.w	r3, r3, #2
 8001428:	6213      	str	r3, [r2, #32]
 800142a:	e796      	b.n	800135a <TIM3_IRQHandler+0x2e>
			high_time[3] = (uint16_t) (now - t_rise[3]);
 800142c:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <TIM3_IRQHandler+0x164>)
 800142e:	68d2      	ldr	r2, [r2, #12]
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	b29b      	uxth	r3, r3
 8001434:	4a17      	ldr	r2, [pc, #92]	@ (8001494 <TIM3_IRQHandler+0x168>)
 8001436:	60d3      	str	r3, [r2, #12]
			waiting_fall[3] = 0;
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <TIM3_IRQHandler+0x160>)
 800143a:	2200      	movs	r2, #0
 800143c:	70da      	strb	r2, [r3, #3]
			TIM3->CCER &= ~TIM_CCER_CC2P;  // обратно на rising
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 8001440:	6a13      	ldr	r3, [r2, #32]
 8001442:	f023 0320 	bic.w	r3, r3, #32
 8001446:	6213      	str	r3, [r2, #32]
 8001448:	e7a3      	b.n	8001392 <TIM3_IRQHandler+0x66>
			high_time[4] = (uint16_t) (now - t_rise[4]);
 800144a:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <TIM3_IRQHandler+0x164>)
 800144c:	6912      	ldr	r2, [r2, #16]
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	4a10      	ldr	r2, [pc, #64]	@ (8001494 <TIM3_IRQHandler+0x168>)
 8001454:	6113      	str	r3, [r2, #16]
			waiting_fall[4] = 0;
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <TIM3_IRQHandler+0x160>)
 8001458:	2200      	movs	r2, #0
 800145a:	711a      	strb	r2, [r3, #4]
			TIM3->CCER &= ~TIM_CCER_CC3P;  // обратно на rising
 800145c:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 800145e:	6a13      	ldr	r3, [r2, #32]
 8001460:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001464:	6213      	str	r3, [r2, #32]
 8001466:	e7b0      	b.n	80013ca <TIM3_IRQHandler+0x9e>
			high_time[5] = (uint16_t) (now - t_rise[5]);
 8001468:	4a09      	ldr	r2, [pc, #36]	@ (8001490 <TIM3_IRQHandler+0x164>)
 800146a:	6952      	ldr	r2, [r2, #20]
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	b29b      	uxth	r3, r3
 8001470:	4a08      	ldr	r2, [pc, #32]	@ (8001494 <TIM3_IRQHandler+0x168>)
 8001472:	6153      	str	r3, [r2, #20]
			waiting_fall[5] = 0;
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <TIM3_IRQHandler+0x160>)
 8001476:	2200      	movs	r2, #0
 8001478:	715a      	strb	r2, [r3, #5]
			TIM3->CCER &= ~TIM_CCER_CC4P;  // обратно на rising
 800147a:	4a03      	ldr	r2, [pc, #12]	@ (8001488 <TIM3_IRQHandler+0x15c>)
 800147c:	6a13      	ldr	r3, [r2, #32]
 800147e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	e7bd      	b.n	8001402 <TIM3_IRQHandler+0xd6>
 8001486:	bf00      	nop
 8001488:	40000400 	.word	0x40000400
 800148c:	2000015c 	.word	0x2000015c
 8001490:	2000017c 	.word	0x2000017c
 8001494:	20000164 	.word	0x20000164

08001498 <_Z9TIM2_Initv>:

void TIM2_Init(void) {

	RCC_TIM2EN();
 8001498:	4a28      	ldr	r2, [pc, #160]	@ (800153c <_Z9TIM2_Initv+0xa4>)
 800149a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6413      	str	r3, [r2, #64]	@ 0x40
	/* Set the Autoreload value */
	TIM2->ARR = 0xFFFFFFFF;
 80014a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014a6:	f04f 32ff 	mov.w	r2, #4294967295
 80014aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Set the Prescaler value */
	TIM2->PSC = 108 - 1;
 80014ac:	226b      	movs	r2, #107	@ 0x6b
 80014ae:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->EGR = TIM_EGR_UG;
 80014b0:	2201      	movs	r2, #1
 80014b2:	615a      	str	r2, [r3, #20]
	/* Clear the update flag */
	TIM2->SR &= ~TIM_SR_UIF;
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	611a      	str	r2, [r3, #16]
	uint32_t tmpccmr2;
	uint32_t tmpccer;
	/*-----------------CHANNEL_3-----------------*/

	TIM2->CCER &= ~TIM_CCER_CC3E;
 80014bc:	6a1a      	ldr	r2, [r3, #32]
 80014be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014c2:	621a      	str	r2, [r3, #32]
	tmpccer = TIM2->CCER;
 80014c4:	6a1a      	ldr	r2, [r3, #32]
	tmpccmr2 = TIM2->CCMR2;
 80014c6:	69d9      	ldr	r1, [r3, #28]
	/* Select the Polarity and set the CC3E Bit */
	tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80014c8:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
	tmpccer |= TIM_CCER_CC3P; //unipolar both edge
 80014cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
	/* Select the Input */
	tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80014d0:	f021 0103 	bic.w	r1, r1, #3
	tmpccmr2 |= TIM_CCMR2_CC3S_0; //CC1 channel is configured as input, IC1 is mapped on TI1
 80014d4:	f041 0101 	orr.w	r1, r1, #1
	/* Write to TIMx CCMR2 and CCER registers */
	TIM2->CCMR2 = tmpccmr2;
 80014d8:	61d9      	str	r1, [r3, #28]
	TIM2->CCER = tmpccer;
 80014da:	621a      	str	r2, [r3, #32]
	// interupt ch3 enable
	TIM2->DIER = TIM_DIER_CC3IE;
 80014dc:	2208      	movs	r2, #8
 80014de:	60da      	str	r2, [r3, #12]
	/* Reset the CCxE Bit */
	TIM2->CCER &= ~TIM_CCER_CC3E;
 80014e0:	6a1a      	ldr	r2, [r3, #32]
 80014e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014e6:	621a      	str	r2, [r3, #32]
	/* Set or reset the CCxE Bit */
	TIM2->CCER |= TIM_CCER_CC3E; // ch1 enable
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014ee:	621a      	str	r2, [r3, #32]

	/*-----------------CHANNEL_4-----------------*/
	TIM2->CCER &= ~TIM_CCER_CC4E;
 80014f0:	6a1a      	ldr	r2, [r3, #32]
 80014f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014f6:	621a      	str	r2, [r3, #32]
	tmpccer = TIM2->CCER;
 80014f8:	6a1a      	ldr	r2, [r3, #32]
	tmpccmr2 = TIM2->CCMR2;
 80014fa:	69d9      	ldr	r1, [r3, #28]
	/* Select the Polarity and set the CC3E Bit */
	tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80014fc:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
	tmpccer |= TIM_CCER_CC4P; //unipolar both edge
 8001500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
	/* Select the Input */
	tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001504:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
	tmpccmr2 |= TIM_CCMR2_CC4S_0; //CC4 channel is configured as input, IC4 is mapped on TI4
 8001508:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
	/* Write to TIMx CCMR2 and CCER registers */
	TIM2->CCMR2 = tmpccmr2;
 800150c:	61d9      	str	r1, [r3, #28]
	TIM2->CCER = tmpccer;
 800150e:	621a      	str	r2, [r3, #32]
	// interupt ch3 enable
	TIM2->DIER = TIM_DIER_CC4IE;
 8001510:	2210      	movs	r2, #16
 8001512:	60da      	str	r2, [r3, #12]
	/* Reset the CCxE Bit */
	TIM2->CCER &= ~TIM_CCER_CC4E;
 8001514:	6a1a      	ldr	r2, [r3, #32]
 8001516:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800151a:	621a      	str	r2, [r3, #32]
	/* Set or reset the CCxE Bit */
	TIM2->CCER |= TIM_CCER_CC4E; // ch4 enable
 800151c:	6a1a      	ldr	r2, [r3, #32]
 800151e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001522:	621a      	str	r2, [r3, #32]
	/*-------------------------------------------*/

	TIM2->CR1 |= TIM_CR1_CEN; // tim2 enable
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <_Z9TIM2_Initv+0xa8>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001538:	601a      	str	r2, [r3, #0]

	__NVIC_SetPriority(TIM2_IRQn, 0);
	__NVIC_EnableIRQ(TIM2_IRQn);
}
 800153a:	4770      	bx	lr
 800153c:	40023800 	.word	0x40023800
 8001540:	e000e100 	.word	0xe000e100

08001544 <_Z9TIM3_Initv>:

void TIM3_Init(void) {

	RCC_TIM3EN();
 8001544:	4a42      	ldr	r2, [pc, #264]	@ (8001650 <_Z9TIM3_Initv+0x10c>)
 8001546:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6413      	str	r3, [r2, #64]	@ 0x40
	/* Set the Autoreload value */
	TIM3->ARR = 0xFFFFFFFF;
 800154e:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <_Z9TIM3_Initv+0x110>)
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Set the Prescaler value */
	TIM3->PSC = 108 - 1;
 8001556:	226b      	movs	r2, #107	@ 0x6b
 8001558:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->EGR = TIM_EGR_UG;
 800155a:	2201      	movs	r2, #1
 800155c:	615a      	str	r2, [r3, #20]
	/* Clear the update flag */
	TIM3->SR &= ~TIM_SR_UIF;
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	f022 0201 	bic.w	r2, r2, #1
 8001564:	611a      	str	r2, [r3, #16]
	uint32_t tmpccer;
	uint32_t tmpccmr1;
	uint32_t tmpccmr2;
	/*-----------------CHANNEL_1-----------------*/
	TIM3->CCER &= ~TIM_CCER_CC1E;
 8001566:	6a1a      	ldr	r2, [r3, #32]
 8001568:	f022 0201 	bic.w	r2, r2, #1
 800156c:	621a      	str	r2, [r3, #32]
	tmpccer = TIM3->CCER;
 800156e:	6a1a      	ldr	r2, [r3, #32]
	tmpccmr1 = TIM3->CCMR1;
 8001570:	6999      	ldr	r1, [r3, #24]
	/* Select the Polarity and set the CC3E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001572:	f022 020a 	bic.w	r2, r2, #10
	tmpccer |= TIM_CCER_CC1P; //unipolar both edge
 8001576:	f042 0202 	orr.w	r2, r2, #2
	/* Select the Input */
	tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800157a:	f021 0103 	bic.w	r1, r1, #3
	tmpccmr1 |= TIM_CCMR1_CC1S_0; //CC1 channel is configured as input, IC1 is mapped on TI1
 800157e:	f041 0101 	orr.w	r1, r1, #1
	/* Write to TIMx CCMR2 and CCER registers */
	TIM3->CCMR1 = tmpccmr1;
 8001582:	6199      	str	r1, [r3, #24]
	TIM3->CCER = tmpccer;
 8001584:	621a      	str	r2, [r3, #32]
	// interupt ch3 enable
	TIM3->DIER = TIM_DIER_CC1IE;
 8001586:	2202      	movs	r2, #2
 8001588:	60da      	str	r2, [r3, #12]
	/* Reset the CCxE Bit */
	TIM3->CCER &= ~TIM_CCER_CC1E;
 800158a:	6a1a      	ldr	r2, [r3, #32]
 800158c:	f022 0201 	bic.w	r2, r2, #1
 8001590:	621a      	str	r2, [r3, #32]
	/* Set or reset the CCxE Bit */
	TIM3->CCER |= TIM_CCER_CC1E; // ch1 enable
 8001592:	6a1a      	ldr	r2, [r3, #32]
 8001594:	f042 0201 	orr.w	r2, r2, #1
 8001598:	621a      	str	r2, [r3, #32]
	/*-----------------CHANNEL_2-----------------*/

	TIM3->CCER &= ~TIM_CCER_CC2E;
 800159a:	6a1a      	ldr	r2, [r3, #32]
 800159c:	f022 0210 	bic.w	r2, r2, #16
 80015a0:	621a      	str	r2, [r3, #32]
	tmpccer = TIM3->CCER;
 80015a2:	6a1a      	ldr	r2, [r3, #32]
	tmpccmr1 = TIM3->CCMR1;
 80015a4:	6999      	ldr	r1, [r3, #24]
	/* Select the Polarity and set the CC3E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
	tmpccer |= TIM_CCER_CC2P; //unipolar both edge
 80015aa:	f042 0220 	orr.w	r2, r2, #32
	/* Select the Input */
	tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80015ae:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
	tmpccmr1 |= TIM_CCMR1_CC2S_0; //CC1 channel is configured as input, IC1 is mapped on TI1
 80015b2:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
	/* Write to TIMx CCMR2 and CCER registers */
	TIM3->CCMR1 = tmpccmr1;
 80015b6:	6199      	str	r1, [r3, #24]
	TIM3->CCER = tmpccer;
 80015b8:	621a      	str	r2, [r3, #32]
	// interupt ch3 enable
	TIM3->DIER = TIM_DIER_CC2IE;
 80015ba:	2204      	movs	r2, #4
 80015bc:	60da      	str	r2, [r3, #12]
	/* Reset the CCxE Bit */
	TIM3->CCER &= ~TIM_CCER_CC2E;
 80015be:	6a1a      	ldr	r2, [r3, #32]
 80015c0:	f022 0210 	bic.w	r2, r2, #16
 80015c4:	621a      	str	r2, [r3, #32]
	/* Set or reset the CCxE Bit */
	TIM3->CCER |= TIM_CCER_CC2E; // ch1 enable
 80015c6:	6a1a      	ldr	r2, [r3, #32]
 80015c8:	f042 0210 	orr.w	r2, r2, #16
 80015cc:	621a      	str	r2, [r3, #32]

	/*-----------------CHANNEL_3-----------------*/

	TIM3->CCER &= ~TIM_CCER_CC3E;
 80015ce:	6a1a      	ldr	r2, [r3, #32]
 80015d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015d4:	621a      	str	r2, [r3, #32]
	tmpccer = TIM3->CCER;
 80015d6:	6a1a      	ldr	r2, [r3, #32]
	tmpccmr2 = TIM3->CCMR2;
 80015d8:	69d9      	ldr	r1, [r3, #28]
	/* Select the Polarity and set the CC3E Bit */
	tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80015da:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
	tmpccer |= TIM_CCER_CC3P; //unipolar both edge
 80015de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
	/* Select the Input */
	tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80015e2:	f021 0103 	bic.w	r1, r1, #3
	tmpccmr2 |= TIM_CCMR2_CC3S_0; //CC1 channel is configured as input, IC1 is mapped on TI1
 80015e6:	f041 0101 	orr.w	r1, r1, #1
	/* Write to TIMx CCMR2 and CCER registers */
	TIM3->CCMR2 = tmpccmr2;
 80015ea:	61d9      	str	r1, [r3, #28]
	TIM3->CCER = tmpccer;
 80015ec:	621a      	str	r2, [r3, #32]
	// interupt ch3 enable
	TIM3->DIER = TIM_DIER_CC3IE;
 80015ee:	2208      	movs	r2, #8
 80015f0:	60da      	str	r2, [r3, #12]
	/* Reset the CCxE Bit */
	TIM3->CCER &= ~TIM_CCER_CC3E;
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015f8:	621a      	str	r2, [r3, #32]
	/* Set or reset the CCxE Bit */
	TIM3->CCER |= TIM_CCER_CC3E; // ch1 enable
 80015fa:	6a1a      	ldr	r2, [r3, #32]
 80015fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001600:	621a      	str	r2, [r3, #32]

	/*-----------------CHANNEL_4-----------------*/
	TIM3->CCER &= ~TIM_CCER_CC4E;
 8001602:	6a1a      	ldr	r2, [r3, #32]
 8001604:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001608:	621a      	str	r2, [r3, #32]
	tmpccer = TIM3->CCER;
 800160a:	6a1a      	ldr	r2, [r3, #32]
	tmpccmr2 = TIM3->CCMR2;
 800160c:	69d9      	ldr	r1, [r3, #28]
	/* Select the Polarity and set the CC3E Bit */
	tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800160e:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
	tmpccer |= TIM_CCER_CC4P; //unipolar both edge
 8001612:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
	/* Select the Input */
	tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001616:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
	tmpccmr2 |= TIM_CCMR2_CC4S_0; //CC4 channel is configured as input, IC4 is mapped on TI4
 800161a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
	/* Write to TIMx CCMR2 and CCER registers */
	TIM3->CCMR2 = tmpccmr2;
 800161e:	61d9      	str	r1, [r3, #28]
	TIM3->CCER = tmpccer;
 8001620:	621a      	str	r2, [r3, #32]
	// interupt ch3 enable
	TIM3->DIER = TIM_DIER_CC4IE;
 8001622:	2210      	movs	r2, #16
 8001624:	60da      	str	r2, [r3, #12]
	/* Reset the CCxE Bit */
	TIM3->CCER &= ~TIM_CCER_CC4E;
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800162c:	621a      	str	r2, [r3, #32]
	/* Set or reset the CCxE Bit */
	TIM3->CCER |= TIM_CCER_CC4E; // ch4 enable
 800162e:	6a1a      	ldr	r2, [r3, #32]
 8001630:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001634:	621a      	str	r2, [r3, #32]
	/*-------------------------------------------*/

	TIM3->CR1 |= TIM_CR1_CEN; // tim2 enable
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f042 0201 	orr.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <_Z9TIM3_Initv+0x114>)
 8001640:	2200      	movs	r2, #0
 8001642:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800164a:	601a      	str	r2, [r3, #0]
	__NVIC_SetPriority(TIM3_IRQn, 0);
	__NVIC_EnableIRQ(TIM3_IRQn);
}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40000400 	.word	0x40000400
 8001658:	e000e100 	.word	0xe000e100

0800165c <_Z9GPIO_Initv>:

void GPIO_Init(void) {
 800165c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001660:	b085      	sub	sp, #20

	RCC_GPIO_ALLEN();
 8001662:	4a2d      	ldr	r2, [pc, #180]	@ (8001718 <_Z9GPIO_Initv+0xbc>)
 8001664:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001666:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 800166a:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIO::GPIO_Config GPIO_ConfigStruct = { };
 800166c:	ac01      	add	r4, sp, #4
 800166e:	2300      	movs	r3, #0
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	6063      	str	r3, [r4, #4]
 8001674:	60a3      	str	r3, [r4, #8]
	 PC5     ------> ETH_RXD1
	 PB13     ------> ETH_TXD1
	 PG11     ------> ETH_TX_EN
	 PG13     ------> ETH_TXD0
	 */
	GPIO_ConfigStruct.port = GPIOA;
 8001676:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8001728 <_Z9GPIO_Initv+0xcc>
 800167a:	f8cd 9004 	str.w	r9, [sp, #4]
	GPIO_ConfigStruct.mode = GPIO::Mode::Alt;
 800167e:	f04f 0802 	mov.w	r8, #2
 8001682:	f88d 8008 	strb.w	r8, [sp, #8]
	GPIO_ConfigStruct.otype = GPIO::OType::PP;
	GPIO_ConfigStruct.pull = GPIO::Pull::None;
	GPIO_ConfigStruct.speed = GPIO::Speed::VeryHigh;
 8001686:	2503      	movs	r5, #3
 8001688:	f88d 500a 	strb.w	r5, [sp, #10]
	GPIO_ConfigStruct.af = GPIO::AF::AF11;
 800168c:	230b      	movs	r3, #11
 800168e:	f88d 300c 	strb.w	r3, [sp, #12]
	pin_mask = (1U << 1) | (1U << 2) | (1U << 7); //(PA1,2,7)
	GPIO::GPIO_ConfigGroupPin(GPIO_ConfigStruct, pin_mask);
 8001692:	2386      	movs	r3, #134	@ 0x86
 8001694:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001698:	f000 fbad 	bl	8001df6 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm>

	GPIO_ConfigStruct.port = GPIOB;
 800169c:	4e1f      	ldr	r6, [pc, #124]	@ (800171c <_Z9GPIO_Initv+0xc0>)
 800169e:	9601      	str	r6, [sp, #4]
	GPIO::GPIO_ConfigPin(GPIO_ConfigStruct, 13); //PB13
 80016a0:	230d      	movs	r3, #13
 80016a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016a6:	f000 fb4f 	bl	8001d48 <_ZN4GPIO14GPIO_ConfigPinENS_11GPIO_ConfigEh>

	GPIO_ConfigStruct.port = GPIOC;
 80016aa:	4f1d      	ldr	r7, [pc, #116]	@ (8001720 <_Z9GPIO_Initv+0xc4>)
 80016ac:	9701      	str	r7, [sp, #4]
	pin_mask = (1U << 1) | (1U << 4) | (1U << 5); //PC1,4,5
	GPIO::GPIO_ConfigGroupPin(GPIO_ConfigStruct, pin_mask);
 80016ae:	2332      	movs	r3, #50	@ 0x32
 80016b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016b4:	f000 fb9f 	bl	8001df6 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm>

	GPIO_ConfigStruct.port = GPIOG;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <_Z9GPIO_Initv+0xc8>)
 80016ba:	9301      	str	r3, [sp, #4]
	pin_mask = (1U << 11) | (1U << 13); //PG11,13
	GPIO::GPIO_ConfigGroupPin(GPIO_ConfigStruct, pin_mask);
 80016bc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80016c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016c4:	f000 fb97 	bl	8001df6 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm>
	 PA6     ------> TIM3_CH1
	 PC7     ------> TIM3_CH2
	 PB0     ------> TIM3_CH3
	 PB1     ------> TIM3_CH4
	 */
	GPIO_ConfigStruct.port = GPIOB;
 80016c8:	9601      	str	r6, [sp, #4]
	GPIO_ConfigStruct.pull = GPIO::Pull::PullUp;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f88d 300b 	strb.w	r3, [sp, #11]
	GPIO_ConfigStruct.af = GPIO::AF::AF1; // TIM2
 80016d0:	f88d 300c 	strb.w	r3, [sp, #12]
	GPIO::GPIO_ConfigPin(GPIO_ConfigStruct, 10); // PB10
 80016d4:	230a      	movs	r3, #10
 80016d6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016da:	f000 fb35 	bl	8001d48 <_ZN4GPIO14GPIO_ConfigPinENS_11GPIO_ConfigEh>

	GPIO_ConfigStruct.port = GPIOA;
 80016de:	f8cd 9004 	str.w	r9, [sp, #4]
	GPIO::GPIO_ConfigPin(GPIO_ConfigStruct, 3); // PA3
 80016e2:	462b      	mov	r3, r5
 80016e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016e8:	f000 fb2e 	bl	8001d48 <_ZN4GPIO14GPIO_ConfigPinENS_11GPIO_ConfigEh>

	GPIO_ConfigStruct.af = GPIO::AF::AF2; // TIM3
 80016ec:	f88d 800c 	strb.w	r8, [sp, #12]
	GPIO::GPIO_ConfigPin(GPIO_ConfigStruct, 6); //PA6
 80016f0:	2306      	movs	r3, #6
 80016f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016f6:	f000 fb27 	bl	8001d48 <_ZN4GPIO14GPIO_ConfigPinENS_11GPIO_ConfigEh>

	GPIO_ConfigStruct.port = GPIOC;
 80016fa:	9701      	str	r7, [sp, #4]
	GPIO::GPIO_ConfigPin(GPIO_ConfigStruct, 7); //PC7
 80016fc:	2307      	movs	r3, #7
 80016fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001702:	f000 fb21 	bl	8001d48 <_ZN4GPIO14GPIO_ConfigPinENS_11GPIO_ConfigEh>

	pin_mask = (1U << 0) | (1U << 1); //PB0,1
	GPIO_ConfigStruct.port = GPIOB;
 8001706:	9601      	str	r6, [sp, #4]
	GPIO::GPIO_ConfigGroupPin(GPIO_ConfigStruct, pin_mask);
 8001708:	462b      	mov	r3, r5
 800170a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800170e:	f000 fb72 	bl	8001df6 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm>
}
 8001712:	b005      	add	sp, #20
 8001714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40021800 	.word	0x40021800
 8001728:	40020000 	.word	0x40020000

0800172c <_Z13Error_Handlerv>:

void Error_Handler(void) {
	while (1) {
 800172c:	e7fe      	b.n	800172c <_Z13Error_Handlerv>
	...

08001730 <main>:
int main(void) {
 8001730:	b510      	push	{r4, lr}
	MPU_Config();
 8001732:	f000 fbd9 	bl	8001ee8 <_Z10MPU_Configv>
	SCB_EnableICache();
 8001736:	f7ff fd53 	bl	80011e0 <SCB_EnableICache>
	SCB_EnableDCache();
 800173a:	f7ff fd69 	bl	8001210 <SCB_EnableDCache>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173e:	491c      	ldr	r1, [pc, #112]	@ (80017b0 <main+0x80>)
 8001740:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001746:	0412      	lsls	r2, r2, #16
 8001748:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 800174a:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <main+0x84>)
 800174c:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 800174e:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001750:	b662      	cpsie	i
	enablePowerInterface();
 8001752:	f000 fe67 	bl	8002424 <_Z20enablePowerInterfacev>
	if (RCCInit(RccCfg) != RCCStatus::OK) {
 8001756:	4818      	ldr	r0, [pc, #96]	@ (80017b8 <main+0x88>)
 8001758:	f000 fd94 	bl	8002284 <_Z7RCCInitRK11ClockConfig>
 800175c:	b108      	cbz	r0, 8001762 <main+0x32>
		Error_Handler();
 800175e:	f7ff ffe5 	bl	800172c <_Z13Error_Handlerv>
	enableEthInterface();
 8001762:	f000 fe69 	bl	8002438 <_Z18enableEthInterfacev>
	GPIO_Init();
 8001766:	f7ff ff79 	bl	800165c <_Z9GPIO_Initv>
	ETH_Init();
 800176a:	f000 f9e5 	bl	8001b38 <_Z8ETH_Initv>
	TIM2_Init();
 800176e:	f7ff fe93 	bl	8001498 <_Z9TIM2_Initv>
	TIM3_Init();
 8001772:	f7ff fee7 	bl	8001544 <_Z9TIM3_Initv>
	NET_TCP_Init();
 8001776:	f000 fe9f 	bl	80024b8 <_Z12NET_TCP_Initv>
	uint32_t tickstart = get_tick();
 800177a:	f000 fe79 	bl	8002470 <_Z8get_tickv>
 800177e:	4604      	mov	r4, r0
		ETH_RxWorker();
 8001780:	f000 f8ba 	bl	80018f8 <_Z12ETH_RxWorkerv>
		if ((get_tick() - tickstart) > 25000) {
 8001784:	f000 fe74 	bl	8002470 <_Z8get_tickv>
 8001788:	1b00      	subs	r0, r0, r4
 800178a:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800178e:	4298      	cmp	r0, r3
 8001790:	d9f6      	bls.n	8001780 <main+0x50>
			tickstart = get_tick();
 8001792:	f000 fe6d 	bl	8002470 <_Z8get_tickv>
 8001796:	4604      	mov	r4, r0
			if (tcp_clients[9].state == tcp_state_t::TCP_ESTABLISHED){
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <main+0x8c>)
 800179a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d1ee      	bne.n	8001780 <main+0x50>
			NET_TCP_SendUser(&tcp_clients[9], udp_data,sizeof(udp_data));
 80017a2:	2223      	movs	r2, #35	@ 0x23
 80017a4:	4906      	ldr	r1, [pc, #24]	@ (80017c0 <main+0x90>)
 80017a6:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <main+0x94>)
 80017a8:	f001 fade 	bl	8002d68 <_Z16NET_TCP_SendUserP10tcp_conn_tPKht>
 80017ac:	e7e8      	b.n	8001780 <main+0x50>
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00
 80017b4:	05fa0300 	.word	0x05fa0300
 80017b8:	20000024 	.word	0x20000024
 80017bc:	2000fa24 	.word	0x2000fa24
 80017c0:	20000000 	.word	0x20000000
 80017c4:	2000fa94 	.word	0x2000fa94

080017c8 <_Z14ETH_RxDescInitv>:

	__NVIC_EnableIRQ(ETH_IRQn);
	__NVIC_SetPriority(ETH_IRQn, 0);
}

void ETH_RxDescInit(void) {
 80017c8:	b410      	push	{r4}
	for (uint32_t i = 0; i < ETH_RX_DESC_CNT; i++) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	e01a      	b.n	8001804 <_Z14ETH_RxDescInitv+0x3c>
		DMARxDscrTab[i].DESC0 = ETH_DMARXDESC_OWN;
 80017ce:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <_Z14ETH_RxDescInitv+0x58>)
 80017d0:	0158      	lsls	r0, r3, #5
 80017d2:	eb02 1143 	add.w	r1, r2, r3, lsl #5
 80017d6:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80017da:	5014      	str	r4, [r2, r0]
		DMARxDscrTab[i].DESC1 = ETH_MAX_PACKET_SIZE | ETH_DMARXDESC_RCH;
 80017dc:	f44f 408c 	mov.w	r0, #17920	@ 0x4600
 80017e0:	6048      	str	r0, [r1, #4]
		DMARxDscrTab[i].DESC2 = (uint32_t) &Rx_Buff[i][0];
 80017e2:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80017e6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80017ea:	4c0e      	ldr	r4, [pc, #56]	@ (8001824 <_Z14ETH_RxDescInitv+0x5c>)
 80017ec:	4420      	add	r0, r4
 80017ee:	6088      	str	r0, [r1, #8]
		DMARxDscrTab[i].DESC3 = (uint32_t) &DMARxDscrTab[(i + 1)
 80017f0:	1c58      	adds	r0, r3, #1
				% ETH_RX_DESC_CNT];
 80017f2:	f000 0c07 	and.w	ip, r0, #7
		DMARxDscrTab[i].DESC3 = (uint32_t) &DMARxDscrTab[(i + 1)
 80017f6:	eb02 124c 	add.w	r2, r2, ip, lsl #5
 80017fa:	60ca      	str	r2, [r1, #12]
		RxDescList.RxDesc[i] = &DMARxDscrTab[i];
 80017fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <_Z14ETH_RxDescInitv+0x60>)
 80017fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ETH_RX_DESC_CNT; i++) {
 8001802:	4603      	mov	r3, r0
 8001804:	2b07      	cmp	r3, #7
 8001806:	d9e2      	bls.n	80017ce <_Z14ETH_RxDescInitv+0x6>
	}
	RxDescList.CurrDescNum = 0;
 8001808:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <_Z14ETH_RxDescInitv+0x60>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24
	RxDescList.CurrRxDesc = &DMARxDscrTab[0];
 800180e:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <_Z14ETH_RxDescInitv+0x58>)
 8001810:	621a      	str	r2, [r3, #32]
	RxDescList.pBuff = &Rx_Buff[0][0];
 8001812:	4904      	ldr	r1, [pc, #16]	@ (8001824 <_Z14ETH_RxDescInitv+0x5c>)
 8001814:	6299      	str	r1, [r3, #40]	@ 0x28

	ETH->DMARDLAR = (uint32_t) &DMARxDscrTab[0];
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <_Z14ETH_RxDescInitv+0x64>)
 8001818:	60da      	str	r2, [r3, #12]
}
 800181a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	2007c000 	.word	0x2007c000
 8001824:	20078000 	.word	0x20078000
 8001828:	200001c4 	.word	0x200001c4
 800182c:	40029000 	.word	0x40029000

08001830 <_Z14ETH_TxDescInitv>:

void ETH_TxDescInit(void) {
 8001830:	b410      	push	{r4}

	for (uint32_t i = 0; i < ETH_TX_DESC_CNT; i++) {
 8001832:	2300      	movs	r3, #0
 8001834:	e019      	b.n	800186a <_Z14ETH_TxDescInitv+0x3a>
		DMATxDscrTab[i].DESC0 = ETH_DMATXDESC_TCH;
 8001836:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <_Z14ETH_TxDescInitv+0x58>)
 8001838:	0158      	lsls	r0, r3, #5
 800183a:	eb02 1143 	add.w	r1, r2, r3, lsl #5
 800183e:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
 8001842:	5014      	str	r4, [r2, r0]
		DMATxDscrTab[i].DESC1 = 0;
 8001844:	2000      	movs	r0, #0
 8001846:	6048      	str	r0, [r1, #4]
		DMATxDscrTab[i].DESC2 = (uint32_t) &Tx_Buff[i][0];
 8001848:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800184c:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001850:	4c0e      	ldr	r4, [pc, #56]	@ (800188c <_Z14ETH_TxDescInitv+0x5c>)
 8001852:	4420      	add	r0, r4
 8001854:	6088      	str	r0, [r1, #8]
		DMATxDscrTab[i].DESC3 = (uint32_t) &DMATxDscrTab[(i + 1)
 8001856:	1c58      	adds	r0, r3, #1
				% ETH_TX_DESC_CNT];
 8001858:	f000 0c03 	and.w	ip, r0, #3
		DMATxDscrTab[i].DESC3 = (uint32_t) &DMATxDscrTab[(i + 1)
 800185c:	eb02 124c 	add.w	r2, r2, ip, lsl #5
 8001860:	60ca      	str	r2, [r1, #12]
		TxDescList.TxDesc[i] = &DMATxDscrTab[i];
 8001862:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <_Z14ETH_TxDescInitv+0x60>)
 8001864:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ETH_TX_DESC_CNT; i++) {
 8001868:	4603      	mov	r3, r0
 800186a:	2b03      	cmp	r3, #3
 800186c:	d9e3      	bls.n	8001836 <_Z14ETH_TxDescInitv+0x6>
	}
	TxDescList.CurrHeadNum = 0;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <_Z14ETH_TxDescInitv+0x60>)
 8001870:	2200      	movs	r2, #0
 8001872:	761a      	strb	r2, [r3, #24]
	TxDescList.CurrTailNum = 0;
 8001874:	765a      	strb	r2, [r3, #25]
	TxDescList.CurrTxDesc = &DMATxDscrTab[0];
 8001876:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <_Z14ETH_TxDescInitv+0x58>)
 8001878:	611a      	str	r2, [r3, #16]
	TxDescList.pBuff = &Tx_Buff[0][0];
 800187a:	4904      	ldr	r1, [pc, #16]	@ (800188c <_Z14ETH_TxDescInitv+0x5c>)
 800187c:	61d9      	str	r1, [r3, #28]
	ETH->DMATDLAR = (uint32_t) &DMATxDscrTab[0];
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <_Z14ETH_TxDescInitv+0x64>)
 8001880:	611a      	str	r2, [r3, #16]
}
 8001882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	2007c100 	.word	0x2007c100
 800188c:	20000200 	.word	0x20000200
 8001890:	200001a4 	.word	0x200001a4
 8001894:	40029000 	.word	0x40029000

08001898 <ETH_IRQHandler>:

extern "C" void ETH_IRQHandler(void) {

	uint32_t DMASR = ETH->DMASR;
 8001898:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <ETH_IRQHandler+0x4c>)
 800189a:	6953      	ldr	r3, [r2, #20]
	uint32_t DMAIER = ETH->DMAIER;
 800189c:	69d2      	ldr	r2, [r2, #28]

	/*RX interrupt*/
	if ((DMASR & ETH_DMASR_RS) && (DMAIER & ETH_DMAIER_RIE)) {
 800189e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80018a2:	d008      	beq.n	80018b6 <ETH_IRQHandler+0x1e>
 80018a4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80018a8:	d005      	beq.n	80018b6 <ETH_IRQHandler+0x1e>
		ETH->DMASR = ETH_DMASR_RS | ETH_DMASR_NIS;
 80018aa:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <ETH_IRQHandler+0x4c>)
 80018ac:	480e      	ldr	r0, [pc, #56]	@ (80018e8 <ETH_IRQHandler+0x50>)
 80018ae:	6148      	str	r0, [r1, #20]
		eth_rx_event = 1;
 80018b0:	490e      	ldr	r1, [pc, #56]	@ (80018ec <ETH_IRQHandler+0x54>)
 80018b2:	2001      	movs	r0, #1
 80018b4:	6008      	str	r0, [r1, #0]
	}
	/*TX interrupt*/
	if ((DMASR & ETH_DMASR_TS) && (DMAIER & ETH_DMAIER_TIE)) {
 80018b6:	f013 0f01 	tst.w	r3, #1
 80018ba:	d012      	beq.n	80018e2 <ETH_IRQHandler+0x4a>
 80018bc:	f012 0f01 	tst.w	r2, #1
 80018c0:	d00f      	beq.n	80018e2 <ETH_IRQHandler+0x4a>
		ETH->DMASR = ETH_DMASR_TS | ETH_DMASR_NIS;
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <ETH_IRQHandler+0x4c>)
 80018c4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80018c8:	615a      	str	r2, [r3, #20]

		TxDescList.CurrTailNum = (TxDescList.CurrTailNum + 1) % ETH_TX_DESC_CNT;
 80018ca:	4a09      	ldr	r2, [pc, #36]	@ (80018f0 <ETH_IRQHandler+0x58>)
 80018cc:	7e53      	ldrb	r3, [r2, #25]
 80018ce:	3301      	adds	r3, #1
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	7653      	strb	r3, [r2, #25]
//		TxDescList.pBuff = &Tx_Buff[TxDescList.CurrDescNum][0];
		TxDescList.CurrTxDesc = TxDescList.TxDesc[TxDescList.CurrTailNum];
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	6113      	str	r3, [r2, #16]
		eth_tx_event = 1;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <ETH_IRQHandler+0x5c>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
	}
}
 80018e2:	4770      	bx	lr
 80018e4:	40029000 	.word	0x40029000
 80018e8:	00010040 	.word	0x00010040
 80018ec:	200001a0 	.word	0x200001a0
 80018f0:	200001a4 	.word	0x200001a4
 80018f4:	2000019c 	.word	0x2000019c

080018f8 <_Z12ETH_RxWorkerv>:

void ETH_RxWorker(void) {
 80018f8:	b510      	push	{r4, lr}

	static uint32_t start_tick = get_tick();
 80018fa:	4b28      	ldr	r3, [pc, #160]	@ (800199c <_Z12ETH_RxWorkerv+0xa4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f3bf 8f5b 	dmb	ish
 8001902:	f013 0f01 	tst.w	r3, #1
 8001906:	d103      	bne.n	8001910 <_Z12ETH_RxWorkerv+0x18>
 8001908:	4824      	ldr	r0, [pc, #144]	@ (800199c <_Z12ETH_RxWorkerv+0xa4>)
 800190a:	f001 fe30 	bl	800356e <__cxa_guard_acquire>
 800190e:	b960      	cbnz	r0, 800192a <_Z12ETH_RxWorkerv+0x32>
	if((get_tick()-start_tick) >= 100) {
 8001910:	f000 fdae 	bl	8002470 <_Z8get_tickv>
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <_Z12ETH_RxWorkerv+0xa8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	1ac0      	subs	r0, r0, r3
 800191a:	2863      	cmp	r0, #99	@ 0x63
 800191c:	d80d      	bhi.n	800193a <_Z12ETH_RxWorkerv+0x42>
		NET_TCP_Timers();
		start_tick = get_tick();
	}
	// начинаем с индекса последнего обработанного дескриптора
	eth_rx_event = 0;
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <_Z12ETH_RxWorkerv+0xac>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
	uint32_t idx = RxDescList.CurrDescNum;
 8001924:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <_Z12ETH_RxWorkerv+0xb0>)
 8001926:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001928:	e018      	b.n	800195c <_Z12ETH_RxWorkerv+0x64>
	static uint32_t start_tick = get_tick();
 800192a:	f000 fda1 	bl	8002470 <_Z8get_tickv>
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <_Z12ETH_RxWorkerv+0xa8>)
 8001930:	6018      	str	r0, [r3, #0]
 8001932:	481a      	ldr	r0, [pc, #104]	@ (800199c <_Z12ETH_RxWorkerv+0xa4>)
 8001934:	f001 fe2a 	bl	800358c <__cxa_guard_release>
 8001938:	e7ea      	b.n	8001910 <_Z12ETH_RxWorkerv+0x18>
		NET_TCP_Timers();
 800193a:	f000 ffd3 	bl	80028e4 <_Z14NET_TCP_Timersv>
		start_tick = get_tick();
 800193e:	f000 fd97 	bl	8002470 <_Z8get_tickv>
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <_Z12ETH_RxWorkerv+0xa8>)
 8001944:	6018      	str	r0, [r3, #0]
 8001946:	e7ea      	b.n	800191e <_Z12ETH_RxWorkerv+0x26>
		} else {
			// поддержка мульти-сегментных фреймов здесь при необходимости
			// для простоты — бросаем или собираем в буфер
		}
		// возвращаем дескриптор DMA
		DMARxDscrTab[idx].DESC0 = ETH_DMARXDESC_OWN;
 8001948:	0163      	lsls	r3, r4, #5
 800194a:	4a18      	ldr	r2, [pc, #96]	@ (80019ac <_Z12ETH_RxWorkerv+0xb4>)
 800194c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001950:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
 8001952:	f3bf 8f4f 	dsb	sy
		__DSB(); // ensure descriptor written before moving on

		idx = (idx + 1) % ETH_RX_DESC_CNT;
 8001956:	3401      	adds	r4, #1
 8001958:	f004 0407 	and.w	r4, r4, #7
		uint32_t desc0 = DMARxDscrTab[idx].DESC0;
 800195c:	0163      	lsls	r3, r4, #5
 800195e:	4a13      	ldr	r2, [pc, #76]	@ (80019ac <_Z12ETH_RxWorkerv+0xb4>)
 8001960:	58d3      	ldr	r3, [r2, r3]
		if (desc0 & ETH_DMARXDESC_OWN)
 8001962:	2b00      	cmp	r3, #0
 8001964:	db12      	blt.n	800198c <_Z12ETH_RxWorkerv+0x94>
		if ((desc0 & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS))
 8001966:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800196a:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800196e:	d1eb      	bne.n	8001948 <_Z12ETH_RxWorkerv+0x50>
			RxDescList.BuffLen = (uint16_t) ((desc0 & ETH_DMARXDESC_FL) >> 16);
 8001970:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8001974:	480c      	ldr	r0, [pc, #48]	@ (80019a8 <_Z12ETH_RxWorkerv+0xb0>)
 8001976:	62c3      	str	r3, [r0, #44]	@ 0x2c
			RxDescList.pBuff = (uint8_t*) DMARxDscrTab[idx].DESC2;
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <_Z12ETH_RxWorkerv+0xb4>)
 800197a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	6282      	str	r2, [r0, #40]	@ 0x28
			RxDescList.CurrRxDesc = &DMARxDscrTab[idx];
 8001982:	6203      	str	r3, [r0, #32]
			NET_ProcessRx(&RxDescList, &TxDescList);
 8001984:	490a      	ldr	r1, [pc, #40]	@ (80019b0 <_Z12ETH_RxWorkerv+0xb8>)
 8001986:	f000 fc19 	bl	80021bc <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct>
 800198a:	e7dd      	b.n	8001948 <_Z12ETH_RxWorkerv+0x50>
	}
	RxDescList.CurrDescNum = idx;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <_Z12ETH_RxWorkerv+0xb0>)
 800198e:	625c      	str	r4, [r3, #36]	@ 0x24

}
 8001990:	bd10      	pop	{r4, pc}
	static uint32_t start_tick = get_tick();
 8001992:	4802      	ldr	r0, [pc, #8]	@ (800199c <_Z12ETH_RxWorkerv+0xa4>)
 8001994:	f001 fdf7 	bl	8003586 <__cxa_guard_abort>
 8001998:	f001 faa5 	bl	8002ee6 <__cxa_end_cleanup>
 800199c:	20000194 	.word	0x20000194
 80019a0:	20000198 	.word	0x20000198
 80019a4:	200001a0 	.word	0x200001a0
 80019a8:	200001c4 	.word	0x200001c4
 80019ac:	2007c000 	.word	0x2007c000
 80019b0:	200001a4 	.word	0x200001a4

080019b4 <_Z13ETH_SendFramem>:

void ETH_SendFrame(uint32_t len) {
	TxDescList.TxDesc[TxDescList.CurrHeadNum]->DESC1 =
 80019b4:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <_Z13ETH_SendFramem+0x3c>)
 80019b6:	7e13      	ldrb	r3, [r2, #24]
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			(len & ETH_DMATXDESC_TBS1); // first address chained
 80019bc:	f3c0 000c 	ubfx	r0, r0, #0, #13
	TxDescList.TxDesc[TxDescList.CurrHeadNum]->DESC1 =
 80019c0:	6058      	str	r0, [r3, #4]

	TxDescList.TxDesc[TxDescList.CurrHeadNum]->DESC0 = ETH_DMATXDESC_OWN
 80019c2:	7e13      	ldrb	r3, [r2, #24]
 80019c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c8:	490a      	ldr	r1, [pc, #40]	@ (80019f4 <_Z13ETH_SendFramem+0x40>)
 80019ca:	6019      	str	r1, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019cc:	f3bf 8f5f 	dmb	sy
			| ETH_DMATXDESC_TCH | ETH_DMATXDESC_FS | ETH_DMATXDESC_LS
			| ETH_DMATXDESC_IC; // Owned by DMA
	__DMB();
	ETH->DMATPDR = 0; // запускаем DMA
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <_Z13ETH_SendFramem+0x44>)
 80019d2:	2100      	movs	r1, #0
 80019d4:	6059      	str	r1, [r3, #4]
	TxDescList.CurrHeadNum = ((TxDescList.CurrHeadNum + 1) % ETH_TX_DESC_CNT);
 80019d6:	7e13      	ldrb	r3, [r2, #24]
 80019d8:	3301      	adds	r3, #1
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	7613      	strb	r3, [r2, #24]
	TxDescList.pBuff = &Tx_Buff[TxDescList.CurrHeadNum][0];
 80019e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80019e4:	4905      	ldr	r1, [pc, #20]	@ (80019fc <_Z13ETH_SendFramem+0x48>)
 80019e6:	eb01 2343 	add.w	r3, r1, r3, lsl #9
 80019ea:	61d3      	str	r3, [r2, #28]
}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200001a4 	.word	0x200001a4
 80019f4:	f0100000 	.word	0xf0100000
 80019f8:	40029000 	.word	0x40029000
 80019fc:	20000200 	.word	0x20000200

08001a00 <_Z8PHY_ReadmmPm>:
	}

	ETH->MACMIIAR = tmpreg;
}

void PHY_Read(uint32_t phy_addr, uint32_t phy_reg, uint32_t *pRegValue) {
 8001a00:	b570      	push	{r4, r5, r6, lr}
 8001a02:	4615      	mov	r5, r2

	int32_t tmpreg;
	int32_t tickstart;
	/* Get the ETHERNET MACMIIAR value */
	tmpreg = ETH->MACMIIAR & ETH_MACMIIAR_CR_Msk;
 8001a04:	4a11      	ldr	r2, [pc, #68]	@ (8001a4c <_Z8PHY_ReadmmPm+0x4c>)
 8001a06:	6913      	ldr	r3, [r2, #16]
	/* Prepare the MII address register value */
	tmpreg |= ((phy_addr << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001a08:	02c0      	lsls	r0, r0, #11
 8001a0a:	b280      	uxth	r0, r0
 8001a0c:	f003 031c 	and.w	r3, r3, #28
 8001a10:	4303      	orrs	r3, r0
	tmpreg |= ((phy_reg << 6U) & ETH_MACMIIAR_MR); /* Set the PHY register address */
 8001a12:	0189      	lsls	r1, r1, #6
 8001a14:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
	tmpreg &= ~ETH_MACMIIAR_MW; /* Set the read mode            */
	tmpreg |= ETH_MACMIIAR_MB; /* Set the MII Busy bit         */
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	f043 0401 	orr.w	r4, r3, #1
	/* Write the result value into the MII Address register */
	ETH->MACMIIAR = tmpreg;
 8001a1e:	6114      	str	r4, [r2, #16]
	/* Check for the Busy flag */
	tickstart = get_tick();
 8001a20:	f000 fd26 	bl	8002470 <_Z8get_tickv>
 8001a24:	4606      	mov	r6, r0
	while ((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB) {
 8001a26:	f014 0f01 	tst.w	r4, #1
 8001a2a:	d009      	beq.n	8001a40 <_Z8PHY_ReadmmPm+0x40>
		tmpreg = ETH->MACMIIAR;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <_Z8PHY_ReadmmPm+0x4c>)
 8001a2e:	691c      	ldr	r4, [r3, #16]
		if ((get_tick() - tickstart) > 5000)
 8001a30:	f000 fd1e 	bl	8002470 <_Z8get_tickv>
 8001a34:	1b80      	subs	r0, r0, r6
 8001a36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a3a:	4298      	cmp	r0, r3
 8001a3c:	d9f3      	bls.n	8001a26 <_Z8PHY_ReadmmPm+0x26>
 8001a3e:	e003      	b.n	8001a48 <_Z8PHY_ReadmmPm+0x48>
			return;
	}
	*pRegValue = (uint16_t) (ETH->MACMIIDR & 0xFFFFU);
 8001a40:	4b02      	ldr	r3, [pc, #8]	@ (8001a4c <_Z8PHY_ReadmmPm+0x4c>)
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	602b      	str	r3, [r5, #0]
}
 8001a48:	bd70      	pop	{r4, r5, r6, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40028000 	.word	0x40028000

08001a50 <_Z9PHY_Writemmm>:

void PHY_Write(uint32_t phy_addr, uint32_t phy_reg, uint32_t RegValue) {
 8001a50:	b538      	push	{r3, r4, r5, lr}

	int32_t tmpreg;
	int32_t tickstart;
	/* Get the ETHERNET MACMIIAR value */
	tmpreg = ETH->MACMIIAR & ETH_MACMIIAR_CR_Msk;
 8001a52:	4d10      	ldr	r5, [pc, #64]	@ (8001a94 <_Z9PHY_Writemmm+0x44>)
 8001a54:	692b      	ldr	r3, [r5, #16]
	/* Prepare the MII register address value */
	tmpreg |= ((phy_addr << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a56:	02c0      	lsls	r0, r0, #11
 8001a58:	b280      	uxth	r0, r0
 8001a5a:	f003 031c 	and.w	r3, r3, #28
 8001a5e:	4303      	orrs	r3, r0
	tmpreg |= (((uint32_t) phy_reg << 6U) & ETH_MACMIIAR_MR); /* Set the PHY register address */
 8001a60:	0189      	lsls	r1, r1, #6
 8001a62:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 8001a66:	430b      	orrs	r3, r1
	tmpreg |= ETH_MACMIIAR_MW; /* Set the write mode */
	tmpreg |= ETH_MACMIIAR_MB; /* Set the MII Busy bit */
 8001a68:	f043 0403 	orr.w	r4, r3, #3
	/* Give the value to the MII data register */
	ETH->MACMIIDR = (uint16_t) RegValue;
 8001a6c:	b292      	uxth	r2, r2
 8001a6e:	616a      	str	r2, [r5, #20]
	/* Write the result value into the MII Address register */
	ETH->MACMIIAR = tmpreg;
 8001a70:	612c      	str	r4, [r5, #16]
	/* Check for the Busy flag */
	tickstart = get_tick();
 8001a72:	f000 fcfd 	bl	8002470 <_Z8get_tickv>
 8001a76:	4605      	mov	r5, r0
	while ((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB) {
 8001a78:	f014 0f01 	tst.w	r4, #1
 8001a7c:	d008      	beq.n	8001a90 <_Z9PHY_Writemmm+0x40>
		tmpreg = ETH->MACMIIAR;
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <_Z9PHY_Writemmm+0x44>)
 8001a80:	691c      	ldr	r4, [r3, #16]
		if ((get_tick() - tickstart) > 5000)
 8001a82:	f000 fcf5 	bl	8002470 <_Z8get_tickv>
 8001a86:	1b40      	subs	r0, r0, r5
 8001a88:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a8c:	4298      	cmp	r0, r3
 8001a8e:	d9f3      	bls.n	8001a78 <_Z9PHY_Writemmm+0x28>
			return;
	}

}
 8001a90:	bd38      	pop	{r3, r4, r5, pc}
 8001a92:	bf00      	nop
 8001a94:	40028000 	.word	0x40028000

08001a98 <_Z8PHY_Initv>:
void PHY_Init(void) {
 8001a98:	b510      	push	{r4, lr}
 8001a9a:	b084      	sub	sp, #16
	uint32_t bcr = 0;
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	9003      	str	r0, [sp, #12]
	uint32_t bsr = 0;
 8001aa0:	9002      	str	r0, [sp, #8]
	uint32_t regval = 0;
 8001aa2:	9001      	str	r0, [sp, #4]
	PHY_Write(PHY_ADDR, PHY_BCR, PHY_RESET);
 8001aa4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	f7ff ffd1 	bl	8001a50 <_Z9PHY_Writemmm>
	tickstart = get_tick();
 8001aae:	f000 fcdf 	bl	8002470 <_Z8get_tickv>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	e004      	b.n	8001ac0 <_Z8PHY_Initv+0x28>
		PHY_Read(PHY_ADDR, PHY_BCR, &bcr);
 8001ab6:	aa03      	add	r2, sp, #12
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4608      	mov	r0, r1
 8001abc:	f7ff ffa0 	bl	8001a00 <_Z8PHY_ReadmmPm>
	while (bcr & (PHY_RESET)) {
 8001ac0:	9b03      	ldr	r3, [sp, #12]
 8001ac2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8001ac6:	d008      	beq.n	8001ada <_Z8PHY_Initv+0x42>
		if ((get_tick() - tickstart) > 5000) {
 8001ac8:	f000 fcd2 	bl	8002470 <_Z8get_tickv>
 8001acc:	1b00      	subs	r0, r0, r4
 8001ace:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ad2:	4298      	cmp	r0, r3
 8001ad4:	d9ef      	bls.n	8001ab6 <_Z8PHY_Initv+0x1e>
}
 8001ad6:	b004      	add	sp, #16
 8001ad8:	bd10      	pop	{r4, pc}
	PHY_Write(PHY_ADDR, PHY_BCR, PHY_AUTONEG_EN);
 8001ada:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	f7ff ffb5 	bl	8001a50 <_Z9PHY_Writemmm>
	tickstart = get_tick();
 8001ae6:	f000 fcc3 	bl	8002470 <_Z8get_tickv>
 8001aea:	4604      	mov	r4, r0
	while (!(bsr & (PHY_AUTONEG_DONE))) {
 8001aec:	9b02      	ldr	r3, [sp, #8]
 8001aee:	f013 0f20 	tst.w	r3, #32
 8001af2:	d10c      	bne.n	8001b0e <_Z8PHY_Initv+0x76>
		if ((get_tick() - tickstart) > 50000) {
 8001af4:	f000 fcbc 	bl	8002470 <_Z8get_tickv>
 8001af8:	1b00      	subs	r0, r0, r4
 8001afa:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d8e9      	bhi.n	8001ad6 <_Z8PHY_Initv+0x3e>
		PHY_Read(PHY_ADDR, PHY_BSR, &bsr);
 8001b02:	aa02      	add	r2, sp, #8
 8001b04:	2101      	movs	r1, #1
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff ff7a 	bl	8001a00 <_Z8PHY_ReadmmPm>
 8001b0c:	e7ee      	b.n	8001aec <_Z8PHY_Initv+0x54>
	tickstart = get_tick();
 8001b0e:	f000 fcaf 	bl	8002470 <_Z8get_tickv>
 8001b12:	4604      	mov	r4, r0
 8001b14:	e004      	b.n	8001b20 <_Z8PHY_Initv+0x88>
		PHY_Read(PHY_ADDR, PHY_BSR, &regval);
 8001b16:	aa01      	add	r2, sp, #4
 8001b18:	2101      	movs	r1, #1
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ff70 	bl	8001a00 <_Z8PHY_ReadmmPm>
	while ((regval & PHY_LINKED_STATUS) != PHY_LINKED_STATUS) {
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	f013 0f04 	tst.w	r3, #4
 8001b26:	d1d6      	bne.n	8001ad6 <_Z8PHY_Initv+0x3e>
		if ((get_tick() - tickstart) > 5000) {
 8001b28:	f000 fca2 	bl	8002470 <_Z8get_tickv>
 8001b2c:	1b00      	subs	r0, r0, r4
 8001b2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b32:	4298      	cmp	r0, r3
 8001b34:	d9ef      	bls.n	8001b16 <_Z8PHY_Initv+0x7e>
 8001b36:	e7ce      	b.n	8001ad6 <_Z8PHY_Initv+0x3e>

08001b38 <_Z8ETH_Initv>:
void ETH_Init(void) {
 8001b38:	b570      	push	{r4, r5, r6, lr}
 8001b3a:	b082      	sub	sp, #8
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001b3c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c78 <_Z8ETH_Initv+0x140>)
 8001b3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b44:	645a      	str	r2, [r3, #68]	@ 0x44
	(void) (RCC->APB2ENR & RCC_APB2ENR_SYSCFGEN);
 8001b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
	SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8001b48:	4b4c      	ldr	r3, [pc, #304]	@ (8001c7c <_Z8ETH_Initv+0x144>)
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001b50:	605a      	str	r2, [r3, #4]
	(void) SYSCFG->PMC;
 8001b52:	685b      	ldr	r3, [r3, #4]
	ETH->DMABMR |= ETH_DMABMR_SR;
 8001b54:	4a4a      	ldr	r2, [pc, #296]	@ (8001c80 <_Z8ETH_Initv+0x148>)
 8001b56:	6813      	ldr	r3, [r2, #0]
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]
	tickstart = get_tick();
 8001b5e:	f000 fc87 	bl	8002470 <_Z8get_tickv>
 8001b62:	4604      	mov	r4, r0
	while (ETH->DMABMR & ETH_DMABMR_SR) {
 8001b64:	4b46      	ldr	r3, [pc, #280]	@ (8001c80 <_Z8ETH_Initv+0x148>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f013 0f01 	tst.w	r3, #1
 8001b6c:	d005      	beq.n	8001b7a <_Z8ETH_Initv+0x42>
		if (((get_tick() - tickstart) > 10)) {
 8001b6e:	f000 fc7f 	bl	8002470 <_Z8get_tickv>
 8001b72:	1b00      	subs	r0, r0, r4
 8001b74:	280a      	cmp	r0, #10
 8001b76:	d9f5      	bls.n	8001b64 <_Z8ETH_Initv+0x2c>
 8001b78:	e07c      	b.n	8001c74 <_Z8ETH_Initv+0x13c>
	ETH->MACCR = tmpreg;
 8001b7a:	4c42      	ldr	r4, [pc, #264]	@ (8001c84 <_Z8ETH_Initv+0x14c>)
 8001b7c:	4b42      	ldr	r3, [pc, #264]	@ (8001c88 <_Z8ETH_Initv+0x150>)
 8001b7e:	6023      	str	r3, [r4, #0]
	tmpreg = ETH->MACCR;
 8001b80:	6825      	ldr	r5, [r4, #0]
	delay_ms(1);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f000 fc6a 	bl	800245c <_Z8delay_msm>
	ETH->MACCR = tmpreg;
 8001b88:	6025      	str	r5, [r4, #0]
	ETH->MACFCR = tmpreg;
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	61a3      	str	r3, [r4, #24]
	tmpreg = ETH->MACFCR;
 8001b8e:	69a5      	ldr	r5, [r4, #24]
	delay_ms(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f000 fc63 	bl	800245c <_Z8delay_msm>
	ETH->MACFCR = tmpreg;
 8001b96:	61a5      	str	r5, [r4, #24]
	ETH->DMAOMR = tmpreg;
 8001b98:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c8c <_Z8ETH_Initv+0x154>)
 8001b9e:	61ab      	str	r3, [r5, #24]
	tmpreg = ETH->DMAOMR;
 8001ba0:	69ae      	ldr	r6, [r5, #24]
	delay_ms(1);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f000 fc5a 	bl	800245c <_Z8delay_msm>
	ETH->DMAOMR = tmpreg;
 8001ba8:	61ae      	str	r6, [r5, #24]
	MAC_addr[0] = 0x02;
 8001baa:	2302      	movs	r3, #2
 8001bac:	f88d 3000 	strb.w	r3, [sp]
	MAC_addr[1] = 0x12;
 8001bb0:	2312      	movs	r3, #18
 8001bb2:	f88d 3001 	strb.w	r3, [sp, #1]
	MAC_addr[2] = 0x34;
 8001bb6:	2334      	movs	r3, #52	@ 0x34
 8001bb8:	f88d 3002 	strb.w	r3, [sp, #2]
	MAC_addr[3] = 0x56;
 8001bbc:	2356      	movs	r3, #86	@ 0x56
 8001bbe:	f88d 3003 	strb.w	r3, [sp, #3]
	MAC_addr[4] = 0x78;
 8001bc2:	2378      	movs	r3, #120	@ 0x78
 8001bc4:	f88d 3004 	strb.w	r3, [sp, #4]
	MAC_addr[5] = 0x9A;
 8001bc8:	239a      	movs	r3, #154	@ 0x9a
 8001bca:	f88d 3005 	strb.w	r3, [sp, #5]
	ETH->MACA0HR = (MAC_addr[5] << 8) | MAC_addr[4];       // MAC[5]<<8 | MAC[4]
 8001bce:	f649 2378 	movw	r3, #39544	@ 0x9a78
 8001bd2:	6423      	str	r3, [r4, #64]	@ 0x40
	ETH->MACA0LR = (MAC_addr[3] << 24) | (MAC_addr[2] << 16)
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <_Z8ETH_Initv+0x158>)
 8001bd6:	6463      	str	r3, [r4, #68]	@ 0x44
	ETH->DMABMR = tmpreg;
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <_Z8ETH_Initv+0x15c>)
 8001bda:	602b      	str	r3, [r5, #0]
	tmpreg = ETH->DMABMR;
 8001bdc:	682e      	ldr	r6, [r5, #0]
	delay_ms(1);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f000 fc3c 	bl	800245c <_Z8delay_msm>
	ETH->DMABMR = tmpreg;
 8001be4:	602e      	str	r6, [r5, #0]
	ETH_RxDescInit();
 8001be6:	f7ff fdef 	bl	80017c8 <_Z14ETH_RxDescInitv>
	ETH_TxDescInit();
 8001bea:	f7ff fe21 	bl	8001830 <_Z14ETH_TxDescInitv>
	ETH->MACIMR |= ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM;
 8001bee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001bf0:	f443 7302 	orr.w	r3, r3, #520	@ 0x208
 8001bf4:	63e3      	str	r3, [r4, #60]	@ 0x3c
	ETH->MMCRIMR |= ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | ETH_MMCRIMR_RFCEM;
 8001bf6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
 8001bfa:	4b27      	ldr	r3, [pc, #156]	@ (8001c98 <_Z8ETH_Initv+0x160>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
	ETH->MMCTIMR |= ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | ETH_MMCTIMR_TGFSCM;
 8001c02:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
 8001c06:	f443 1303 	orr.w	r3, r3, #2146304	@ 0x20c000
 8001c0a:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
	ETH->DMAIER |= ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE;
 8001c0e:	69ea      	ldr	r2, [r5, #28]
 8001c10:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <_Z8ETH_Initv+0x164>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61eb      	str	r3, [r5, #28]
	tmpreg = ETH->DMAIER;
 8001c16:	69eb      	ldr	r3, [r5, #28]
	PHY_Init();
 8001c18:	f7ff ff3e 	bl	8001a98 <_Z8PHY_Initv>
	ETH->MACCR |= ETH_MACCR_TE;
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	6023      	str	r3, [r4, #0]
	tmpreg = ETH->MACCR;
 8001c24:	6826      	ldr	r6, [r4, #0]
	delay_ms(1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f000 fc18 	bl	800245c <_Z8delay_msm>
	ETH->MACCR = tmpreg;
 8001c2c:	6026      	str	r6, [r4, #0]
	ETH->MACCR |= ETH_MACCR_RE;
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6023      	str	r3, [r4, #0]
	tmpreg = ETH->MACCR;
 8001c36:	6826      	ldr	r6, [r4, #0]
	delay_ms(1);
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f000 fc0f 	bl	800245c <_Z8delay_msm>
	ETH->MACCR = tmpreg;
 8001c3e:	6026      	str	r6, [r4, #0]
	ETH->DMAOMR |= ETH_DMAOMR_FTF;
 8001c40:	69ab      	ldr	r3, [r5, #24]
 8001c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c46:	61ab      	str	r3, [r5, #24]
	delay_ms(1);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f000 fc07 	bl	800245c <_Z8delay_msm>
	ETH->DMAOMR &= ~ETH_DMAOMR_FTF;
 8001c4e:	69ab      	ldr	r3, [r5, #24]
 8001c50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c54:	61ab      	str	r3, [r5, #24]
	ETH->DMAOMR |= ETH_DMAOMR_ST;
 8001c56:	69ab      	ldr	r3, [r5, #24]
 8001c58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c5c:	61ab      	str	r3, [r5, #24]
	ETH->DMAOMR |= ETH_DMAOMR_SR;
 8001c5e:	69ab      	ldr	r3, [r5, #24]
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	61ab      	str	r3, [r5, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <_Z8ETH_Initv+0x168>)
 8001c68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c6c:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 233d 	strb.w	r2, [r3, #829]	@ 0x33d
}
 8001c74:	b002      	add	sp, #8
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40029000 	.word	0x40029000
 8001c84:	40028000 	.word	0x40028000
 8001c88:	02004e0c 	.word	0x02004e0c
 8001c8c:	02200040 	.word	0x02200040
 8001c90:	56341202 	.word	0x56341202
 8001c94:	02c12082 	.word	0x02c12082
 8001c98:	00020060 	.word	0x00020060
 8001c9c:	00010041 	.word	0x00010041
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <_Z8checksumPKht>:


// Вычисление IP checksum (над IP header)
uint16_t checksum(const uint8_t *data, uint16_t len) {

	uint32_t sum = 0;
 8001ca4:	2300      	movs	r3, #0
	while (len > 1) {
 8001ca6:	e008      	b.n	8001cba <_Z8checksumPKht+0x16>
		sum += ((uint16_t) data[0] << 8) | data[1];
 8001ca8:	f890 c000 	ldrb.w	ip, [r0]
 8001cac:	7842      	ldrb	r2, [r0, #1]
 8001cae:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8001cb2:	4413      	add	r3, r2
		data += 2;
 8001cb4:	3002      	adds	r0, #2
		len -= 2;
 8001cb6:	3902      	subs	r1, #2
 8001cb8:	b289      	uxth	r1, r1
	while (len > 1) {
 8001cba:	2901      	cmp	r1, #1
 8001cbc:	d8f4      	bhi.n	8001ca8 <_Z8checksumPKht+0x4>
	}
	if (len > 0) { // остался один байт
 8001cbe:	b129      	cbz	r1, 8001ccc <_Z8checksumPKht+0x28>
		sum += ((uint16_t) data[0] << 8);
 8001cc0:	7802      	ldrb	r2, [r0, #0]
 8001cc2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001cc6:	e001      	b.n	8001ccc <_Z8checksumPKht+0x28>
	}
	while (sum >> 16) {
		sum = (sum & 0xFFFF) + (sum >> 16);
 8001cc8:	fa12 f383 	uxtah	r3, r2, r3
	while (sum >> 16) {
 8001ccc:	0c1a      	lsrs	r2, r3, #16
 8001cce:	d1fb      	bne.n	8001cc8 <_Z8checksumPKht+0x24>
	}
	return (uint16_t) (~sum);
 8001cd0:	43d8      	mvns	r0, r3
}
 8001cd2:	b280      	uxth	r0, r0
 8001cd4:	4770      	bx	lr

08001cd6 <_Z12tcp_checksumPhS_S_t>:

	return (uint16_t) (~sum);
}

uint16_t tcp_checksum(uint8_t *src_ip, uint8_t *dst_ip, uint8_t *tcp_hdr,
		uint16_t tcp_len) {
 8001cd6:	b500      	push	{lr}

	uint32_t sum = 0;
	// --- Pseudo-IP header (12B) ---
	  // --- Псевдо-IP заголовок (12 байт) ---
	    sum += (src_ip[0] << 8) | src_ip[1];
 8001cd8:	f890 e000 	ldrb.w	lr, [r0]
 8001cdc:	f890 c001 	ldrb.w	ip, [r0, #1]
 8001ce0:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
	    sum += (src_ip[2] << 8) | src_ip[3];
 8001ce4:	f890 e002 	ldrb.w	lr, [r0, #2]
 8001ce8:	78c0      	ldrb	r0, [r0, #3]
 8001cea:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
 8001cee:	4460      	add	r0, ip

	    sum += (dst_ip[0] << 8) | dst_ip[1];
 8001cf0:	f891 e000 	ldrb.w	lr, [r1]
 8001cf4:	f891 c001 	ldrb.w	ip, [r1, #1]
 8001cf8:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 8001cfc:	4484      	add	ip, r0
	    sum += (dst_ip[2] << 8) | dst_ip[3];
 8001cfe:	f891 e002 	ldrb.w	lr, [r1, #2]
 8001d02:	78c8      	ldrb	r0, [r1, #3]
 8001d04:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
 8001d08:	4460      	add	r0, ip

	    sum += 0x0006;          // Protocol = TCP (6)
 8001d0a:	3006      	adds	r0, #6
	    sum += tcp_len;         // TCP length (заголовок + payload)
 8001d0c:	4418      	add	r0, r3

	    // --- TCP заголовок + payload ---
	    for (int i = 0; i < tcp_len; i += 2) {
 8001d0e:	2100      	movs	r1, #0
 8001d10:	e001      	b.n	8001d16 <_Z12tcp_checksumPhS_S_t+0x40>
	        uint16_t word = tcp_hdr[i] << 8;
	        if (i + 1 < tcp_len)
	            word |= tcp_hdr[i + 1];
	        sum += word;
 8001d12:	4460      	add	r0, ip
	    for (int i = 0; i < tcp_len; i += 2) {
 8001d14:	3102      	adds	r1, #2
 8001d16:	428b      	cmp	r3, r1
 8001d18:	dd10      	ble.n	8001d3c <_Z12tcp_checksumPhS_S_t+0x66>
	        uint16_t word = tcp_hdr[i] << 8;
 8001d1a:	f812 c001 	ldrb.w	ip, [r2, r1]
 8001d1e:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
	        if (i + 1 < tcp_len)
 8001d22:	f101 0e01 	add.w	lr, r1, #1
 8001d26:	459e      	cmp	lr, r3
 8001d28:	daf3      	bge.n	8001d12 <_Z12tcp_checksumPhS_S_t+0x3c>
	            word |= tcp_hdr[i + 1];
 8001d2a:	eb02 0e01 	add.w	lr, r2, r1
 8001d2e:	f89e e001 	ldrb.w	lr, [lr, #1]
 8001d32:	ea4e 0c0c 	orr.w	ip, lr, ip
 8001d36:	e7ec      	b.n	8001d12 <_Z12tcp_checksumPhS_S_t+0x3c>
	    }

	    // --- Обработка переносов ---
	    while (sum >> 16)
	        sum = (sum & 0xFFFF) + (sum >> 16);
 8001d38:	fa13 f080 	uxtah	r0, r3, r0
	    while (sum >> 16)
 8001d3c:	0c03      	lsrs	r3, r0, #16
 8001d3e:	d1fb      	bne.n	8001d38 <_Z12tcp_checksumPhS_S_t+0x62>

	    return (uint16_t)(~sum);
 8001d40:	43c0      	mvns	r0, r0
}
 8001d42:	b280      	uxth	r0, r0
 8001d44:	f85d fb04 	ldr.w	pc, [sp], #4

08001d48 <_ZN4GPIO14GPIO_ConfigPinENS_11GPIO_ConfigEh>:
#include "mcore_gpio.hpp"


namespace GPIO {

void GPIO_ConfigPin(GPIO_Config cfg, uint8_t pin_number) {
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	ac04      	add	r4, sp, #16
 8001d4e:	e904 0007 	stmdb	r4, {r0, r1, r2}

	uint32_t pos  = pin_number * 2;
 8001d52:	ea4f 0c43 	mov.w	ip, r3, lsl #1
	uint32_t temp = 0x00;

	// --- MODER ---
	temp = cfg.port->MODER;
 8001d56:	4602      	mov	r2, r0
 8001d58:	6804      	ldr	r4, [r0, #0]
	temp &= ~(3U << pos);
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	fa01 f10c 	lsl.w	r1, r1, ip
 8001d60:	ea24 0401 	bic.w	r4, r4, r1
	temp |= (static_cast<uint32_t>(cfg.mode) << pos);
 8001d64:	f89d e008 	ldrb.w	lr, [sp, #8]
 8001d68:	fa0e f00c 	lsl.w	r0, lr, ip
 8001d6c:	4320      	orrs	r0, r4
	cfg.port->MODER = temp;
 8001d6e:	6010      	str	r0, [r2, #0]

	// --- OTYPER ---
	temp = cfg.port->OTYPER;
 8001d70:	6854      	ldr	r4, [r2, #4]
	temp &= ~(1U << pin_number);
 8001d72:	2001      	movs	r0, #1
 8001d74:	4098      	lsls	r0, r3
 8001d76:	ea24 0400 	bic.w	r4, r4, r0
	temp |= (static_cast<uint32_t>(cfg.otype) << pin_number);
 8001d7a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001d7e:	4098      	lsls	r0, r3
 8001d80:	4320      	orrs	r0, r4
	cfg.port->OTYPER = temp;
 8001d82:	6050      	str	r0, [r2, #4]

	// --- OSPEEDR ---
	temp = cfg.port->OSPEEDR;
 8001d84:	6894      	ldr	r4, [r2, #8]
	temp &= ~(3U << pos);
 8001d86:	ea24 0401 	bic.w	r4, r4, r1
	temp |= (static_cast<uint32_t>(cfg.speed) << pos);
 8001d8a:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8001d8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8001d92:	4320      	orrs	r0, r4
	cfg.port->OSPEEDR = temp;
 8001d94:	6090      	str	r0, [r2, #8]

	// --- PUPDR ---
	temp = cfg.port->PUPDR;
 8001d96:	68d0      	ldr	r0, [r2, #12]
	temp &= ~(3U << pos);
 8001d98:	ea20 0001 	bic.w	r0, r0, r1
	temp |= (static_cast<uint32_t>(cfg.pull) << pos);
 8001d9c:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8001da0:	fa01 f10c 	lsl.w	r1, r1, ip
 8001da4:	4301      	orrs	r1, r0
	cfg.port->PUPDR = temp;
 8001da6:	60d1      	str	r1, [r2, #12]

	// --- AFR (если выбран Alternate Function) ---
	if (cfg.mode == Mode::Alt) {
 8001da8:	f1be 0f02 	cmp.w	lr, #2
 8001dac:	d001      	beq.n	8001db2 <_ZN4GPIO14GPIO_ConfigPinENS_11GPIO_ConfigEh+0x6a>
			temp |= ((static_cast<uint32_t>(cfg.af) & 0xFU)
					<< ((static_cast<uint32_t>(pin_number) - 8) * 4));
			cfg.port->AFR[1] = temp;
		}
	}
}
 8001dae:	b004      	add	sp, #16
 8001db0:	bd10      	pop	{r4, pc}
		if (pin_number < 8) {
 8001db2:	2b07      	cmp	r3, #7
 8001db4:	d80e      	bhi.n	8001dd4 <_ZN4GPIO14GPIO_ConfigPinENS_11GPIO_ConfigEh+0x8c>
			temp = cfg.port->AFR[0];
 8001db6:	6a10      	ldr	r0, [r2, #32]
			temp &= ~(0xFU << (pin_number * 4));
 8001db8:	009c      	lsls	r4, r3, #2
 8001dba:	210f      	movs	r1, #15
 8001dbc:	40a1      	lsls	r1, r4
 8001dbe:	ea20 0001 	bic.w	r0, r0, r1
			temp |= ((static_cast<uint32_t>(cfg.af) & 0xFU)
 8001dc2:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8001dc6:	f001 010f 	and.w	r1, r1, #15
					<< (static_cast<uint32_t>(pin_number) * 4));
 8001dca:	fa01 f304 	lsl.w	r3, r1, r4
			temp |= ((static_cast<uint32_t>(cfg.af) & 0xFU)
 8001dce:	4303      	orrs	r3, r0
			cfg.port->AFR[0] = temp;
 8001dd0:	6213      	str	r3, [r2, #32]
 8001dd2:	e7ec      	b.n	8001dae <_ZN4GPIO14GPIO_ConfigPinENS_11GPIO_ConfigEh+0x66>
			temp = cfg.port->AFR[1];
 8001dd4:	6a50      	ldr	r0, [r2, #36]	@ 0x24
			temp &= ~(0xFU << ((pin_number - 8) * 4));
 8001dd6:	f1a3 0408 	sub.w	r4, r3, #8
 8001dda:	00a4      	lsls	r4, r4, #2
 8001ddc:	210f      	movs	r1, #15
 8001dde:	40a1      	lsls	r1, r4
 8001de0:	ea20 0001 	bic.w	r0, r0, r1
			temp |= ((static_cast<uint32_t>(cfg.af) & 0xFU)
 8001de4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8001de8:	f001 010f 	and.w	r1, r1, #15
					<< ((static_cast<uint32_t>(pin_number) - 8) * 4));
 8001dec:	fa01 f304 	lsl.w	r3, r1, r4
			temp |= ((static_cast<uint32_t>(cfg.af) & 0xFU)
 8001df0:	4303      	orrs	r3, r0
			cfg.port->AFR[1] = temp;
 8001df2:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001df4:	e7db      	b.n	8001dae <_ZN4GPIO14GPIO_ConfigPinENS_11GPIO_ConfigEh+0x66>

08001df6 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm>:

void GPIO_ConfigGroupPin(GPIO_Config cfg, uint32_t pin_mask) {
 8001df6:	b570      	push	{r4, r5, r6, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	ac04      	add	r4, sp, #16
 8001dfc:	e904 0007 	stmdb	r4, {r0, r1, r2}

	uint32_t pos = 0;
	uint32_t temp = 0x00;

	for (int i = 0; i < 16; i++) {
 8001e00:	2200      	movs	r2, #0
 8001e02:	e00f      	b.n	8001e24 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm+0x2e>
					temp = cfg.port->AFR[0];
					temp &= ~(0xFU << (i * 4));
					temp |= ((static_cast<uint32_t>(cfg.af) & 0xFU) << (i * 4));
					cfg.port->AFR[0] = temp;
				} else {
					temp = cfg.port->AFR[1];
 8001e04:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
					temp &= ~(0xFU << ((i - 8) * 4));
 8001e06:	f1a2 0408 	sub.w	r4, r2, #8
 8001e0a:	00a4      	lsls	r4, r4, #2
 8001e0c:	200f      	movs	r0, #15
 8001e0e:	40a0      	lsls	r0, r4
 8001e10:	ea25 0500 	bic.w	r5, r5, r0
					temp |= ((static_cast<uint32_t>(cfg.af) & 0xFU)
 8001e14:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001e18:	f000 000f 	and.w	r0, r0, #15
							<< ((i - 8) * 4));
 8001e1c:	40a0      	lsls	r0, r4
					temp |= ((static_cast<uint32_t>(cfg.af) & 0xFU)
 8001e1e:	4328      	orrs	r0, r5
					cfg.port->AFR[1] = temp;
 8001e20:	6248      	str	r0, [r1, #36]	@ 0x24
	for (int i = 0; i < 16; i++) {
 8001e22:	3201      	adds	r2, #1
 8001e24:	2a0f      	cmp	r2, #15
 8001e26:	dc3e      	bgt.n	8001ea6 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm+0xb0>
		if (pin_mask & (1U << i)) {
 8001e28:	2001      	movs	r0, #1
 8001e2a:	4090      	lsls	r0, r2
 8001e2c:	4218      	tst	r0, r3
 8001e2e:	d0f8      	beq.n	8001e22 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm+0x2c>
			pos = i * 2;
 8001e30:	0054      	lsls	r4, r2, #1
			temp = cfg.port->MODER;
 8001e32:	9901      	ldr	r1, [sp, #4]
 8001e34:	680e      	ldr	r6, [r1, #0]
			temp &= ~(3U << pos);
 8001e36:	f04f 0c03 	mov.w	ip, #3
 8001e3a:	fa0c fc04 	lsl.w	ip, ip, r4
 8001e3e:	ea26 060c 	bic.w	r6, r6, ip
			temp |= (static_cast<uint32_t>(cfg.mode) << pos);
 8001e42:	f89d e008 	ldrb.w	lr, [sp, #8]
 8001e46:	fa0e f504 	lsl.w	r5, lr, r4
 8001e4a:	4335      	orrs	r5, r6
			cfg.port->MODER = temp;
 8001e4c:	600d      	str	r5, [r1, #0]
			temp = cfg.port->OTYPER;
 8001e4e:	684d      	ldr	r5, [r1, #4]
			temp &= ~(1U << i);
 8001e50:	ea25 0500 	bic.w	r5, r5, r0
			temp |= (static_cast<uint32_t>(cfg.otype) << i);
 8001e54:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001e58:	4090      	lsls	r0, r2
 8001e5a:	4328      	orrs	r0, r5
			cfg.port->OTYPER = temp;
 8001e5c:	6048      	str	r0, [r1, #4]
			temp = cfg.port->OSPEEDR;
 8001e5e:	688d      	ldr	r5, [r1, #8]
			temp &= ~(3U << pos);
 8001e60:	ea25 050c 	bic.w	r5, r5, ip
			temp |= (static_cast<uint32_t>(cfg.speed) << pos);
 8001e64:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8001e68:	40a0      	lsls	r0, r4
 8001e6a:	4328      	orrs	r0, r5
			cfg.port->OSPEEDR = temp;
 8001e6c:	6088      	str	r0, [r1, #8]
			temp = cfg.port->PUPDR;
 8001e6e:	68c8      	ldr	r0, [r1, #12]
			temp &= ~(3U << pos);
 8001e70:	ea20 0c0c 	bic.w	ip, r0, ip
			temp |= (static_cast<uint32_t>(cfg.pull) << pos);
 8001e74:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8001e78:	40a0      	lsls	r0, r4
 8001e7a:	ea40 000c 	orr.w	r0, r0, ip
			cfg.port->PUPDR = temp;
 8001e7e:	60c8      	str	r0, [r1, #12]
			if (cfg.mode == Mode::Alt) {
 8001e80:	f1be 0f02 	cmp.w	lr, #2
 8001e84:	d1cd      	bne.n	8001e22 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm+0x2c>
				if (i < 8) {
 8001e86:	2a07      	cmp	r2, #7
 8001e88:	dcbc      	bgt.n	8001e04 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm+0xe>
					temp = cfg.port->AFR[0];
 8001e8a:	6a0c      	ldr	r4, [r1, #32]
					temp &= ~(0xFU << (i * 4));
 8001e8c:	0095      	lsls	r5, r2, #2
 8001e8e:	200f      	movs	r0, #15
 8001e90:	40a8      	lsls	r0, r5
 8001e92:	ea24 0400 	bic.w	r4, r4, r0
					temp |= ((static_cast<uint32_t>(cfg.af) & 0xFU) << (i * 4));
 8001e96:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001e9a:	f000 000f 	and.w	r0, r0, #15
 8001e9e:	40a8      	lsls	r0, r5
 8001ea0:	4320      	orrs	r0, r4
					cfg.port->AFR[0] = temp;
 8001ea2:	6208      	str	r0, [r1, #32]
 8001ea4:	e7bd      	b.n	8001e22 <_ZN4GPIO19GPIO_ConfigGroupPinENS_11GPIO_ConfigEm+0x2c>
				}
			}
		}
	}

}
 8001ea6:	b004      	add	sp, #16
 8001ea8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001eac <_Z11MPU_Disablev>:
 8001eac:	f3bf 8f5f 	dmb	sy
}

void MPU_Disable(void) {
	__DMB();
	/* Disable fault exceptions */
	SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <_Z11MPU_Disablev+0x18>)
 8001eb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eb4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Disable the MPU and clear the control register*/
	MPU->CTRL = 0;
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <_Z10MPU_Enablev>:
void MPU_Enable(void) {
	/* Enable the MPU */
	MPU->CTRL = MPU_PRIVILEGED_DEFAULT | MPU_CTRL_ENABLE_Msk;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <_Z10MPU_Enablev+0x1c>)
 8001eca:	2205      	movs	r2, #5
 8001ecc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	/* Enable fault exceptions */
	SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ed2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001edc:	f3bf 8f6f 	isb	sy
	/* Ensure MPU setting take effects */
	__DSB();
	__ISB();
}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <_Z10MPU_Configv>:
void MPU_Config(void) {
 8001ee8:	b508      	push	{r3, lr}
	MPU_Disable();
 8001eea:	f7ff ffdf 	bl	8001eac <_Z11MPU_Disablev>
	MPU->RNR = 0x00;
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <_Z10MPU_Configv+0x68>)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	f8c3 1098 	str.w	r1, [r3, #152]	@ 0x98
	MPU->RASR &= ~MPU_RASR_ENABLE_Msk;
 8001ef6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	MPU->RBAR = 0x00; //base address
 8001f02:	f8c3 109c 	str.w	r1, [r3, #156]	@ 0x9c
	MPU->RASR =
 8001f06:	4a13      	ldr	r2, [pc, #76]	@ (8001f54 <_Z10MPU_Configv+0x6c>)
 8001f08:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	MPU->RNR = 0x01;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	MPU->RASR &= ~MPU_RASR_ENABLE_Msk;
 8001f12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	MPU->RBAR = 0x20078000; //base address
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <_Z10MPU_Configv+0x70>)
 8001f20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	MPU->RASR = ((uint32_t) 0x01 << MPU_RASR_XN_Pos) | // istruction access disable
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <_Z10MPU_Configv+0x74>)
 8001f26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	MPU->RNR = 0x02;
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	MPU->RASR &= ~MPU_RASR_ENABLE_Msk;
 8001f30:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	MPU->RBAR = 0x2007c000; //base address
 8001f3c:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <_Z10MPU_Configv+0x78>)
 8001f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	MPU->RASR = ((uint32_t) 0x01 << MPU_RASR_XN_Pos) | // istruction access disable
 8001f42:	4a08      	ldr	r2, [pc, #32]	@ (8001f64 <_Z10MPU_Configv+0x7c>)
 8001f44:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	MPU_Enable();
 8001f48:	f7ff ffbe 	bl	8001ec8 <_Z10MPU_Enablev>
}
 8001f4c:	bd08      	pop	{r3, pc}
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00
 8001f54:	1004873f 	.word	0x1004873f
 8001f58:	20078000 	.word	0x20078000
 8001f5c:	1308001b 	.word	0x1308001b
 8001f60:	2007c000 	.word	0x2007c000
 8001f64:	13050013 	.word	0x13050013

08001f68 <_Z41__static_initialization_and_destruction_0v>:
	memcpy(&txBuf[32], frame->scr_mac, 6); // target MAC = sender из запроса
	memcpy(&txBuf[38], frame->scr_addr, 4); // target IP = sender IP
	// Передаём через DMA (один дескриптор)
	ETH_SendFrame(frame->frame_len);

}
 8001f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		MAC_ADDR[0], MAC_ADDR[1], MAC_ADDR[2], MAC_ADDR[3], MAC_ADDR[4],
 8001f6c:	4a16      	ldr	r2, [pc, #88]	@ (8001fc8 <_Z41__static_initialization_and_destruction_0v+0x60>)
 8001f6e:	f892 8000 	ldrb.w	r8, [r2]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f72:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <_Z41__static_initialization_and_destruction_0v+0x64>)
 8001f74:	f883 8006 	strb.w	r8, [r3, #6]
		MAC_ADDR[0], MAC_ADDR[1], MAC_ADDR[2], MAC_ADDR[3], MAC_ADDR[4],
 8001f78:	7857      	ldrb	r7, [r2, #1]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f7a:	71df      	strb	r7, [r3, #7]
		MAC_ADDR[0], MAC_ADDR[1], MAC_ADDR[2], MAC_ADDR[3], MAC_ADDR[4],
 8001f7c:	7896      	ldrb	r6, [r2, #2]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f7e:	721e      	strb	r6, [r3, #8]
		MAC_ADDR[0], MAC_ADDR[1], MAC_ADDR[2], MAC_ADDR[3], MAC_ADDR[4],
 8001f80:	78d5      	ldrb	r5, [r2, #3]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f82:	725d      	strb	r5, [r3, #9]
		MAC_ADDR[0], MAC_ADDR[1], MAC_ADDR[2], MAC_ADDR[3], MAC_ADDR[4],
 8001f84:	7914      	ldrb	r4, [r2, #4]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f86:	729c      	strb	r4, [r3, #10]
		MAC_ADDR[5],   // src MAC = my MAC
 8001f88:	f892 e005 	ldrb.w	lr, [r2, #5]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f8c:	f883 e00b 	strb.w	lr, [r3, #11]
		IP_ADDR[0], IP_ADDR[1], IP_ADDR[2], IP_ADDR[3], // Src IP = my IP (192.168.1.50)
 8001f90:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd0 <_Z41__static_initialization_and_destruction_0v+0x68>)
 8001f92:	f892 c000 	ldrb.w	ip, [r2]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f96:	f883 c01a 	strb.w	ip, [r3, #26]
		IP_ADDR[0], IP_ADDR[1], IP_ADDR[2], IP_ADDR[3], // Src IP = my IP (192.168.1.50)
 8001f9a:	7850      	ldrb	r0, [r2, #1]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001f9c:	76d8      	strb	r0, [r3, #27]
		IP_ADDR[0], IP_ADDR[1], IP_ADDR[2], IP_ADDR[3], // Src IP = my IP (192.168.1.50)
 8001f9e:	7891      	ldrb	r1, [r2, #2]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001fa0:	7719      	strb	r1, [r3, #28]
		IP_ADDR[0], IP_ADDR[1], IP_ADDR[2], IP_ADDR[3], // Src IP = my IP (192.168.1.50)
 8001fa2:	78d2      	ldrb	r2, [r2, #3]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001fa4:	775a      	strb	r2, [r3, #29]
		};
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <_Z41__static_initialization_and_destruction_0v+0x6c>)
 8001fa8:	f883 8006 	strb.w	r8, [r3, #6]
 8001fac:	71df      	strb	r7, [r3, #7]
 8001fae:	721e      	strb	r6, [r3, #8]
 8001fb0:	725d      	strb	r5, [r3, #9]
 8001fb2:	729c      	strb	r4, [r3, #10]
 8001fb4:	f883 e00b 	strb.w	lr, [r3, #11]
 8001fb8:	f883 c01a 	strb.w	ip, [r3, #26]
 8001fbc:	76d8      	strb	r0, [r3, #27]
 8001fbe:	7719      	strb	r1, [r3, #28]
 8001fc0:	775a      	strb	r2, [r3, #29]
}
 8001fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000098 	.word	0x20000098
 8001fcc:	20000060 	.word	0x20000060
 8001fd0:	20000094 	.word	0x20000094
 8001fd4:	20000034 	.word	0x20000034

08001fd8 <_Z24NET_SendICMP_UnreachableP10ipv4_frame>:
void NET_SendICMP_Unreachable(ipv4_frame* frame) {
 8001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fda:	4684      	mov	ip, r0
	uint8_t *tx_buffer = *frame->tx_buff;
 8001fdc:	6943      	ldr	r3, [r0, #20]
 8001fde:	681c      	ldr	r4, [r3, #0]
	memcpy(tx_buffer, icmp_port_unrchble_template, ICMP_UNRCHBLE_FRAME_LEN);
 8001fe0:	4d25      	ldr	r5, [pc, #148]	@ (8002078 <_Z24NET_SendICMP_UnreachableP10ipv4_frame+0xa0>)
 8001fe2:	46a6      	mov	lr, r4
 8001fe4:	f105 0730 	add.w	r7, r5, #48	@ 0x30
 8001fe8:	462e      	mov	r6, r5
 8001fea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001fec:	f8ce 0000 	str.w	r0, [lr]
 8001ff0:	f8ce 1004 	str.w	r1, [lr, #4]
 8001ff4:	f8ce 2008 	str.w	r2, [lr, #8]
 8001ff8:	f8ce 300c 	str.w	r3, [lr, #12]
 8001ffc:	4635      	mov	r5, r6
 8001ffe:	f10e 0e10 	add.w	lr, lr, #16
 8002002:	42be      	cmp	r6, r7
 8002004:	d1f0      	bne.n	8001fe8 <_Z24NET_SendICMP_UnreachableP10ipv4_frame+0x10>
 8002006:	8833      	ldrh	r3, [r6, #0]
 8002008:	f8ae 3000 	strh.w	r3, [lr]
	memcpy(tx_buffer, frame->scr_mac, 6);       // MAC источника → dst
 800200c:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	6022      	str	r2, [r4, #0]
 8002014:	889b      	ldrh	r3, [r3, #4]
 8002016:	80a3      	strh	r3, [r4, #4]
	memcpy(&tx_buffer[DST_ADDR_POS],frame->scr_addr, 4); // dst IP = src IP из входящего пакета
 8002018:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8c4 301e 	str.w	r3, [r4, #30]
	uint16_t icmp_data_len = frame->ip_hdr_len + 8;
 8002022:	f89c 5004 	ldrb.w	r5, [ip, #4]
	memcpy(&tx_buffer[14 + 20 + 8], frame->ip_hdr, icmp_data_len);
 8002026:	f105 0208 	add.w	r2, r5, #8
 800202a:	f8dc 1010 	ldr.w	r1, [ip, #16]
 800202e:	f104 002a 	add.w	r0, r4, #42	@ 0x2a
 8002032:	f001 fceb 	bl	8003a0c <memcpy>
	uint16_t new_ip_total_len = 20 /*IP hdr*/+ 8 /*ICMP hdr*/+ icmp_data_len;
 8002036:	f105 0324 	add.w	r3, r5, #36	@ 0x24
 800203a:	461e      	mov	r6, r3
	tx_buffer[16] = (uint8_t)(new_ip_total_len >> 8);
 800203c:	0a1a      	lsrs	r2, r3, #8
 800203e:	7422      	strb	r2, [r4, #16]
	tx_buffer[17] = (uint8_t)(new_ip_total_len & 0xFF);
 8002040:	7463      	strb	r3, [r4, #17]
	uint16_t ip_csum = checksum(&tx_buffer[IP_HDR_POS], IP_HDR_LEN);
 8002042:	2114      	movs	r1, #20
 8002044:	f104 000e 	add.w	r0, r4, #14
 8002048:	f7ff fe2c 	bl	8001ca4 <_Z8checksumPKht>
	tx_buffer[24] = (uint8_t)(ip_csum >> 8);
 800204c:	f3c0 230f 	ubfx	r3, r0, #8, #16
 8002050:	7623      	strb	r3, [r4, #24]
	tx_buffer[25] = (uint8_t)(ip_csum & 0xFF);
 8002052:	7660      	strb	r0, [r4, #25]
	uint16_t icmp_csum = checksum(&tx_buffer[14 + 20], 8 + icmp_data_len);
 8002054:	f105 0110 	add.w	r1, r5, #16
 8002058:	f104 0022 	add.w	r0, r4, #34	@ 0x22
 800205c:	f7ff fe22 	bl	8001ca4 <_Z8checksumPKht>
	tx_buffer[14 + 20 + 2] = (uint8_t)(icmp_csum >> 8);
 8002060:	f3c0 230f 	ubfx	r3, r0, #8, #16
 8002064:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
	tx_buffer[14 + 20 + 3] = (uint8_t)(icmp_csum & 0xFF);
 8002068:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	ETH_SendFrame(14 + new_ip_total_len);
 800206c:	f106 000e 	add.w	r0, r6, #14
 8002070:	f7ff fca0 	bl	80019b4 <_Z13ETH_SendFramem>
}
 8002074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002076:	bf00      	nop
 8002078:	20000060 	.word	0x20000060

0800207c <_Z14NET_ProcessUDPP10ipv4_frame>:
void NET_ProcessUDP(ipv4_frame* frame) {
 800207c:	b508      	push	{r3, lr}
	uint16_t dst_port = (frame->ip_hdr[frame->ip_hdr_len + 2] << 8) | frame->ip_hdr[frame->ip_hdr_len + 3];
 800207e:	6903      	ldr	r3, [r0, #16]
 8002080:	7902      	ldrb	r2, [r0, #4]
 8002082:	4413      	add	r3, r2
 8002084:	789a      	ldrb	r2, [r3, #2]
 8002086:	78db      	ldrb	r3, [r3, #3]
 8002088:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800208c:	b21b      	sxth	r3, r3
	if (dst_port != UDP_DST_PORT) {
 800208e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d100      	bne.n	8002098 <_Z14NET_ProcessUDPP10ipv4_frame+0x1c>
}
 8002096:	bd08      	pop	{r3, pc}
		NET_SendICMP_Unreachable(frame);
 8002098:	f7ff ff9e 	bl	8001fd8 <_Z24NET_SendICMP_UnreachableP10ipv4_frame>
		return; // не наш порт
 800209c:	e7fb      	b.n	8002096 <_Z14NET_ProcessUDPP10ipv4_frame+0x1a>
	...

080020a0 <_Z15NET_ProcessICMPP10ipv4_frame>:
void NET_ProcessICMP(ipv4_frame* frame) {
 80020a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t *icmp = &frame->ip_hdr[frame->ip_hdr_len];
 80020a2:	6901      	ldr	r1, [r0, #16]
 80020a4:	7903      	ldrb	r3, [r0, #4]
	if (icmp[0] != 8) return; // not Echo request
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d000      	beq.n	80020ae <_Z15NET_ProcessICMPP10ipv4_frame+0xe>
}
 80020ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020ae:	4604      	mov	r4, r0
	uint8_t *txBuf = *frame->tx_buff;
 80020b0:	6943      	ldr	r3, [r0, #20]
 80020b2:	681d      	ldr	r5, [r3, #0]
	memcpy(&txBuf[IP_HDR_POS], frame->ip_hdr, frame->ip_len);
 80020b4:	f105 070e 	add.w	r7, r5, #14
 80020b8:	4606      	mov	r6, r0
 80020ba:	f836 2b08 	ldrh.w	r2, [r6], #8
 80020be:	4638      	mov	r0, r7
 80020c0:	f001 fca4 	bl	8003a0c <memcpy>
	memcpy(txBuf, &frame->scr_mac, 6);       // dst = src
 80020c4:	68a3      	ldr	r3, [r4, #8]
 80020c6:	602b      	str	r3, [r5, #0]
 80020c8:	88b3      	ldrh	r3, [r6, #4]
 80020ca:	80ab      	strh	r3, [r5, #4]
	memcpy(&txBuf[6], MAC_ADDR, 6);    // src = my MAC
 80020cc:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <_Z15NET_ProcessICMPP10ipv4_frame+0x90>)
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	f8c5 0006 	str.w	r0, [r5, #6]
 80020d4:	889b      	ldrh	r3, [r3, #4]
 80020d6:	816b      	strh	r3, [r5, #10]
	txBuf[12] = 0x08;
 80020d8:	2308      	movs	r3, #8
 80020da:	732b      	strb	r3, [r5, #12]
	txBuf[13] = 0x00;
 80020dc:	2600      	movs	r6, #0
 80020de:	736e      	strb	r6, [r5, #13]
	memcpy(&txBuf[SCR_ADDR_POS], IP_ADDR, 4);    // src = my IP
 80020e0:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <_Z15NET_ProcessICMPP10ipv4_frame+0x94>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8c5 301a 	str.w	r3, [r5, #26]
	memcpy(&txBuf[DST_ADDR_POS], frame->scr_addr, 4); // dst = src IP
 80020e8:	68e3      	ldr	r3, [r4, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8c5 301e 	str.w	r3, [r5, #30]
	ip[10] = 0;
 80020f0:	762e      	strb	r6, [r5, #24]
	ip[11] = 0;
 80020f2:	766e      	strb	r6, [r5, #25]
	uint16_t ip_csum = checksum(ip, frame->ip_hdr_len);
 80020f4:	7921      	ldrb	r1, [r4, #4]
 80020f6:	4638      	mov	r0, r7
 80020f8:	f7ff fdd4 	bl	8001ca4 <_Z8checksumPKht>
	ip[10] = (uint8_t) (ip_csum >> 8);
 80020fc:	f3c0 230f 	ubfx	r3, r0, #8, #16
 8002100:	762b      	strb	r3, [r5, #24]
	ip[11] = (uint8_t) (ip_csum & 0xFF);
 8002102:	7668      	strb	r0, [r5, #25]
	icmp = &ip[frame->ip_hdr_len];
 8002104:	7923      	ldrb	r3, [r4, #4]
 8002106:	18fd      	adds	r5, r7, r3
	icmp[0] = 0; // Echo Reply
 8002108:	54fe      	strb	r6, [r7, r3]
	icmp[2] = 0;
 800210a:	70ae      	strb	r6, [r5, #2]
	icmp[3] = 0;
 800210c:	70ee      	strb	r6, [r5, #3]
	uint16_t icmp_len = frame->ip_len - frame->ip_hdr_len;
 800210e:	8821      	ldrh	r1, [r4, #0]
 8002110:	7923      	ldrb	r3, [r4, #4]
 8002112:	1ac9      	subs	r1, r1, r3
	uint16_t icmp_csum = checksum(icmp, icmp_len);
 8002114:	b289      	uxth	r1, r1
 8002116:	4628      	mov	r0, r5
 8002118:	f7ff fdc4 	bl	8001ca4 <_Z8checksumPKht>
	icmp[2] = (uint8_t)(icmp_csum >> 8);
 800211c:	f3c0 230f 	ubfx	r3, r0, #8, #16
 8002120:	70ab      	strb	r3, [r5, #2]
	icmp[3] = (uint8_t)(icmp_csum & 0xFF);
 8002122:	70e8      	strb	r0, [r5, #3]
	ETH_SendFrame(frame->ip_len+ETH_HDR_LEN);
 8002124:	8820      	ldrh	r0, [r4, #0]
 8002126:	300e      	adds	r0, #14
 8002128:	f7ff fc44 	bl	80019b4 <_Z13ETH_SendFramem>
 800212c:	e7be      	b.n	80020ac <_Z15NET_ProcessICMPP10ipv4_frame+0xc>
 800212e:	bf00      	nop
 8002130:	20000098 	.word	0x20000098
 8002134:	20000094 	.word	0x20000094

08002138 <_Z14NET_ProcessARPP10ipv4_frame>:
void NET_ProcessARP(ipv4_frame* frame) {
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (frame->frame_len < 42)return; // слишком короткий
 800213a:	8846      	ldrh	r6, [r0, #2]
 800213c:	2e29      	cmp	r6, #41	@ 0x29
 800213e:	d90b      	bls.n	8002158 <_Z14NET_ProcessARPP10ipv4_frame+0x20>
 8002140:	4604      	mov	r4, r0
	if (frame->rx_buff[ETH_HDR_LEN+7] != 1)return; // не ARP-request
 8002142:	6987      	ldr	r7, [r0, #24]
 8002144:	7d7b      	ldrb	r3, [r7, #21]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d106      	bne.n	8002158 <_Z14NET_ProcessARPP10ipv4_frame+0x20>
	if (memcmp(&frame->rx_buff[ETH_HDR_LEN+24], IP_ADDR, 4) != 0)return;
 800214a:	2204      	movs	r2, #4
 800214c:	4919      	ldr	r1, [pc, #100]	@ (80021b4 <_Z14NET_ProcessARPP10ipv4_frame+0x7c>)
 800214e:	f107 0026 	add.w	r0, r7, #38	@ 0x26
 8002152:	f001 fbd3 	bl	80038fc <memcmp>
 8002156:	b100      	cbz	r0, 800215a <_Z14NET_ProcessARPP10ipv4_frame+0x22>
}
 8002158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t *txBuf = *frame->tx_buff;
 800215a:	6963      	ldr	r3, [r4, #20]
 800215c:	681d      	ldr	r5, [r3, #0]
	memcpy(&txBuf[12], &frame->rx_buff[12], frame->frame_len - 12); // dst = src запроса
 800215e:	f1a6 020c 	sub.w	r2, r6, #12
 8002162:	f107 010c 	add.w	r1, r7, #12
 8002166:	f105 000c 	add.w	r0, r5, #12
 800216a:	f001 fc4f 	bl	8003a0c <memcpy>
	memcpy(&txBuf[0],   frame->scr_mac, 6);   // dst = src запроса
 800216e:	68a3      	ldr	r3, [r4, #8]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	602a      	str	r2, [r5, #0]
 8002174:	889b      	ldrh	r3, [r3, #4]
 8002176:	80ab      	strh	r3, [r5, #4]
	memcpy(&txBuf[6],   MAC_ADDR, 6);       // src = мой MAC
 8002178:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <_Z14NET_ProcessARPP10ipv4_frame+0x80>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	f8c5 0006 	str.w	r0, [r5, #6]
 8002180:	889b      	ldrh	r3, [r3, #4]
 8002182:	816b      	strh	r3, [r5, #10]
	txBuf[20] = 0x00;
 8002184:	2200      	movs	r2, #0
 8002186:	752a      	strb	r2, [r5, #20]
	txBuf[21] = 0x02; // Opcode = reply (2)
 8002188:	2202      	movs	r2, #2
 800218a:	756a      	strb	r2, [r5, #21]
	memcpy(&txBuf[22], MAC_ADDR, 6);      // sender MAC
 800218c:	f8c5 0016 	str.w	r0, [r5, #22]
 8002190:	836b      	strh	r3, [r5, #26]
	memcpy(&txBuf[28], IP_ADDR, 4);       // sender IP
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <_Z14NET_ProcessARPP10ipv4_frame+0x7c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	61eb      	str	r3, [r5, #28]
	memcpy(&txBuf[32], frame->scr_mac, 6); // target MAC = sender из запроса
 8002198:	68a3      	ldr	r3, [r4, #8]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	622a      	str	r2, [r5, #32]
 800219e:	889b      	ldrh	r3, [r3, #4]
 80021a0:	84ab      	strh	r3, [r5, #36]	@ 0x24
	memcpy(&txBuf[38], frame->scr_addr, 4); // target IP = sender IP
 80021a2:	68e3      	ldr	r3, [r4, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8c5 3026 	str.w	r3, [r5, #38]	@ 0x26
	ETH_SendFrame(frame->frame_len);
 80021aa:	8860      	ldrh	r0, [r4, #2]
 80021ac:	f7ff fc02 	bl	80019b4 <_Z13ETH_SendFramem>
 80021b0:	e7d2      	b.n	8002158 <_Z14NET_ProcessARPP10ipv4_frame+0x20>
 80021b2:	bf00      	nop
 80021b4:	20000094 	.word	0x20000094
 80021b8:	20000098 	.word	0x20000098

080021bc <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct>:
	if (RxDesc->BuffLen < 14)
 80021bc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80021be:	2a0d      	cmp	r2, #13
 80021c0:	d959      	bls.n	8002276 <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0xba>
void NET_ProcessRx(ETH_RxDescListStruct* RxDesc, ETH_TxDescListStruct* TxDesc) {
 80021c2:	b570      	push	{r4, r5, r6, lr}
 80021c4:	b088      	sub	sp, #32
 80021c6:	4604      	mov	r4, r0
 80021c8:	460d      	mov	r5, r1
	uint16_t ethertype = (RxDesc->pBuff[12] << 8) | RxDesc->pBuff[13];
 80021ca:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 80021cc:	7b31      	ldrb	r1, [r6, #12]
 80021ce:	7b73      	ldrb	r3, [r6, #13]
 80021d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80021d4:	b21b      	sxth	r3, r3
	if (ethertype == 0x0806) {
 80021d6:	f640 0106 	movw	r1, #2054	@ 0x806
 80021da:	428b      	cmp	r3, r1
 80021dc:	d010      	beq.n	8002200 <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0x44>
	if (RxDesc->BuffLen < 34)
 80021de:	2a21      	cmp	r2, #33	@ 0x21
 80021e0:	d90c      	bls.n	80021fc <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0x40>
	if (memcmp(&(RxDesc->pBuff[DST_ADDR_POS]), IP_ADDR, 4) != 0)
 80021e2:	2204      	movs	r2, #4
 80021e4:	4924      	ldr	r1, [pc, #144]	@ (8002278 <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0xbc>)
 80021e6:	f106 001e 	add.w	r0, r6, #30
 80021ea:	f001 fb87 	bl	80038fc <memcmp>
 80021ee:	b928      	cbnz	r0, 80021fc <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0x40>
	uint32_t ExtStatus = RxDesc->CurrRxDesc->DESC4;
 80021f0:	6a23      	ldr	r3, [r4, #32]
 80021f2:	691a      	ldr	r2, [r3, #16]
			&& !(ExtStatus & ETH_DMAPTPRXDESC_IPPE)) {
 80021f4:	f002 0350 	and.w	r3, r2, #80	@ 0x50
	if ((ExtStatus & ETH_DMAPTPRXDESC_IPV4PR)
 80021f8:	2b40      	cmp	r3, #64	@ 0x40
 80021fa:	d00f      	beq.n	800221c <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0x60>
}
 80021fc:	b008      	add	sp, #32
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
		ip_frame.rx_buff    =  RxDesc->pBuff;
 8002200:	9607      	str	r6, [sp, #28]
		ip_frame.tx_buff    = &(TxDesc->pBuff);
 8002202:	351c      	adds	r5, #28
 8002204:	9506      	str	r5, [sp, #24]
		ip_frame.scr_mac    = &RxDesc->pBuff[22];
 8002206:	f106 0316 	add.w	r3, r6, #22
 800220a:	9303      	str	r3, [sp, #12]
		ip_frame.scr_addr   = &RxDesc->pBuff[28];
 800220c:	361c      	adds	r6, #28
 800220e:	9604      	str	r6, [sp, #16]
		ip_frame.frame_len = (uint16_t) RxDesc->BuffLen;
 8002210:	f8ad 2006 	strh.w	r2, [sp, #6]
		NET_ProcessARP(&ip_frame);
 8002214:	a801      	add	r0, sp, #4
 8002216:	f7ff ff8f 	bl	8002138 <_Z14NET_ProcessARPP10ipv4_frame>
		return;
 800221a:	e7ef      	b.n	80021fc <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0x40>
		ip_frame.rx_buff    =  RxDesc->pBuff;
 800221c:	9607      	str	r6, [sp, #28]
		ip_frame.tx_buff    = &(TxDesc->pBuff);
 800221e:	351c      	adds	r5, #28
 8002220:	9506      	str	r5, [sp, #24]
		ip_frame.ip_hdr     = &RxDesc->pBuff[IP_HDR_POS];
 8002222:	f106 010e 	add.w	r1, r6, #14
 8002226:	9105      	str	r1, [sp, #20]
		ip_frame.ip_hdr_len = (ip_frame.ip_hdr[0] & 0x0F) * 4;
 8002228:	7bb3      	ldrb	r3, [r6, #14]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	f88d 3008 	strb.w	r3, [sp, #8]
		ip_frame.ip_len = (ip_frame.ip_hdr[2]<<8|ip_frame.ip_hdr[3]);
 8002234:	7c30      	ldrb	r0, [r6, #16]
 8002236:	7c73      	ldrb	r3, [r6, #17]
 8002238:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800223c:	f8ad 3004 	strh.w	r3, [sp, #4]
		ip_frame.scr_addr   = &RxDesc->pBuff[SCR_ADDR_POS];
 8002240:	f106 031a 	add.w	r3, r6, #26
 8002244:	9304      	str	r3, [sp, #16]
		ip_frame.scr_mac    = &RxDesc->pBuff[6];
 8002246:	3606      	adds	r6, #6
 8002248:	9603      	str	r6, [sp, #12]
		if ((ExtStatus & ETH_DMAPTPRXDESC_IPPT_ICMP)
 800224a:	f002 0303 	and.w	r3, r2, #3
 800224e:	2b03      	cmp	r3, #3
 8002250:	d009      	beq.n	8002266 <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0xaa>
		if ((ExtStatus & ETH_DMAPTPRXDESC_IPPT_UDP) == ETH_DMAPTPRXDESC_IPPT_UDP) {
 8002252:	f012 0f01 	tst.w	r2, #1
 8002256:	d10a      	bne.n	800226e <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0xb2>
		if ((ExtStatus & ETH_DMAPTPRXDESC_IPPT_TCP) == ETH_DMAPTPRXDESC_IPPT_TCP) {
 8002258:	f012 0f02 	tst.w	r2, #2
 800225c:	d0ce      	beq.n	80021fc <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0x40>
			NET_ProcessTCP(&ip_frame); // когда нибудь
 800225e:	a801      	add	r0, sp, #4
 8002260:	f000 fbba 	bl	80029d8 <_Z14NET_ProcessTCPP10ipv4_frame>
			return;
 8002264:	e7ca      	b.n	80021fc <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0x40>
			NET_ProcessICMP(&ip_frame);
 8002266:	a801      	add	r0, sp, #4
 8002268:	f7ff ff1a 	bl	80020a0 <_Z15NET_ProcessICMPP10ipv4_frame>
			return;
 800226c:	e7c6      	b.n	80021fc <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0x40>
			NET_ProcessUDP(&ip_frame);
 800226e:	a801      	add	r0, sp, #4
 8002270:	f7ff ff04 	bl	800207c <_Z14NET_ProcessUDPP10ipv4_frame>
			return;
 8002274:	e7c2      	b.n	80021fc <_Z13NET_ProcessRxP20ETH_RxDescListStructP20ETH_TxDescListStruct+0x40>
 8002276:	4770      	bx	lr
 8002278:	20000094 	.word	0x20000094

0800227c <_GLOBAL__sub_I_MAC_ADDR>:
}
 800227c:	b508      	push	{r3, lr}
 800227e:	f7ff fe73 	bl	8001f68 <_Z41__static_initialization_and_destruction_0v>
 8002282:	bd08      	pop	{r3, pc}

08002284 <_Z7RCCInitRK11ClockConfig>:

#define HSE_TIMEOUT 0x1000
#define PLL_TIMEOUT 0x1000
#define MS_DIV 1000U

RCCStatus RCCInit(const ClockConfig &cfg) {
 8002284:	b538      	push	{r3, r4, r5, lr}
 8002286:	4604      	mov	r4, r0

	const uint8_t pll_p = static_cast<uint8_t>(cfg.PLLP);
 8002288:	f890 e004 	ldrb.w	lr, [r0, #4]
	const uint16_t ahb_div = static_cast<uint16_t>(cfg.AHBDiv);
 800228c:	88c1      	ldrh	r1, [r0, #6]
	const uint16_t apb1_div = static_cast<uint16_t>(cfg.APB1Div);
 800228e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
	const uint16_t apb2_div = static_cast<uint16_t>(cfg.APB2Div);
 8002292:	8940      	ldrh	r0, [r0, #10]
	const uint8_t flash_ws = static_cast<uint8_t>(cfg.FLASHLatency);
 8002294:	7b25      	ldrb	r5, [r4, #12]
	uint32_t tmpreg;

	// 1. Проверка PLL параметров (валидные диапазоны по Reference Manual)
	if ((cfg.PLLM < 2 || cfg.PLLM > 63) && (cfg.PLLN < 50 || cfg.PLLN > 432)) {
 8002296:	7823      	ldrb	r3, [r4, #0]
 8002298:	3b02      	subs	r3, #2
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b3d      	cmp	r3, #61	@ 0x3d
 800229e:	d906      	bls.n	80022ae <_Z7RCCInitRK11ClockConfig+0x2a>
 80022a0:	8863      	ldrh	r3, [r4, #2]
 80022a2:	3b32      	subs	r3, #50	@ 0x32
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	f5b3 7fbf 	cmp.w	r3, #382	@ 0x17e
 80022aa:	f200 80a5 	bhi.w	80023f8 <_Z7RCCInitRK11ClockConfig+0x174>
		return RCCStatus::PLL_CONFIG_INVALID;
	}
	// Enable voltage scale 1
	tmpreg = (PWR->CR1 & (~PWR_CR1_VOS | PWR_CR1_VOS));
 80022ae:	4b56      	ldr	r3, [pc, #344]	@ (8002408 <_Z7RCCInitRK11ClockConfig+0x184>)
 80022b0:	681a      	ldr	r2, [r3, #0]
	PWR->CR1 = tmpreg;
 80022b2:	601a      	str	r2, [r3, #0]
	tmpreg = PWR->CR1;
 80022b4:	681b      	ldr	r3, [r3, #0]

	if (cfg.useHSE) {
 80022b6:	7b63      	ldrb	r3, [r4, #13]
 80022b8:	b1eb      	cbz	r3, 80022f6 <_Z7RCCInitRK11ClockConfig+0x72>
		// 2. Включение HSE
		if (cfg.useHSEBypass) {
 80022ba:	7ba3      	ldrb	r3, [r4, #14]
 80022bc:	b123      	cbz	r3, 80022c8 <_Z7RCCInitRK11ClockConfig+0x44>
			RCC->CR |= RCC_CR_HSEBYP;
 80022be:	4a53      	ldr	r2, [pc, #332]	@ (800240c <_Z7RCCInitRK11ClockConfig+0x188>)
 80022c0:	6813      	ldr	r3, [r2, #0]
 80022c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c6:	6013      	str	r3, [r2, #0]
		}
		RCC->CR |= RCC_CR_HSEON;
 80022c8:	4a50      	ldr	r2, [pc, #320]	@ (800240c <_Z7RCCInitRK11ClockConfig+0x188>)
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d0:	6013      	str	r3, [r2, #0]

		for (uint32_t i = 0; !(RCC->CR & RCC_CR_HSERDY); ++i) {
 80022d2:	2300      	movs	r3, #0
 80022d4:	4a4d      	ldr	r2, [pc, #308]	@ (800240c <_Z7RCCInitRK11ClockConfig+0x188>)
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80022dc:	d10b      	bne.n	80022f6 <_Z7RCCInitRK11ClockConfig+0x72>
			if (i > HSE_TIMEOUT) {
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e2:	d801      	bhi.n	80022e8 <_Z7RCCInitRK11ClockConfig+0x64>
		for (uint32_t i = 0; !(RCC->CR & RCC_CR_HSERDY); ++i) {
 80022e4:	3301      	adds	r3, #1
 80022e6:	e7f5      	b.n	80022d4 <_Z7RCCInitRK11ClockConfig+0x50>
				RCC->CR &= ~RCC_CR_HSEON;
 80022e8:	4a48      	ldr	r2, [pc, #288]	@ (800240c <_Z7RCCInitRK11ClockConfig+0x188>)
 80022ea:	6813      	ldr	r3, [r2, #0]
 80022ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
				return RCCStatus::HSE_FAILED;
 80022f2:	2001      	movs	r0, #1
 80022f4:	e07f      	b.n	80023f6 <_Z7RCCInitRK11ClockConfig+0x172>
			}
		}
	}
	// 3. Настройка PLL
	RCC->PLLCFGR = (cfg.PLLM << RCC_PLLCFGR_PLLM_Pos)
 80022f6:	7823      	ldrb	r3, [r4, #0]
			| (cfg.PLLN << RCC_PLLCFGR_PLLN_Pos)
 80022f8:	8862      	ldrh	r2, [r4, #2]
 80022fa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
			| (pll_p << RCC_PLLCFGR_PLLP_Pos)
 80022fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
			| (cfg.useHSE ? RCC_PLLCFGR_PLLSRC_HSE : RCC_PLLCFGR_PLLSRC_HSI);
 8002302:	7b62      	ldrb	r2, [r4, #13]
 8002304:	b19a      	cbz	r2, 800232e <_Z7RCCInitRK11ClockConfig+0xaa>
 8002306:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800230a:	4313      	orrs	r3, r2
	RCC->PLLCFGR = (cfg.PLLM << RCC_PLLCFGR_PLLM_Pos)
 800230c:	4a3f      	ldr	r2, [pc, #252]	@ (800240c <_Z7RCCInitRK11ClockConfig+0x188>)
 800230e:	6053      	str	r3, [r2, #4]
	// 4. Включение PLL
	RCC->CR |= RCC_CR_PLLON;
 8002310:	6813      	ldr	r3, [r2, #0]
 8002312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002316:	6013      	str	r3, [r2, #0]
	for (uint32_t i = 0; !(RCC->CR & RCC_CR_PLLRDY); ++i) {
 8002318:	2300      	movs	r3, #0
 800231a:	4a3c      	ldr	r2, [pc, #240]	@ (800240c <_Z7RCCInitRK11ClockConfig+0x188>)
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002322:	d113      	bne.n	800234c <_Z7RCCInitRK11ClockConfig+0xc8>
		if (i > PLL_TIMEOUT) {
 8002324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002328:	d803      	bhi.n	8002332 <_Z7RCCInitRK11ClockConfig+0xae>
	for (uint32_t i = 0; !(RCC->CR & RCC_CR_PLLRDY); ++i) {
 800232a:	3301      	adds	r3, #1
 800232c:	e7f5      	b.n	800231a <_Z7RCCInitRK11ClockConfig+0x96>
			| (cfg.useHSE ? RCC_PLLCFGR_PLLSRC_HSE : RCC_PLLCFGR_PLLSRC_HSI);
 800232e:	2200      	movs	r2, #0
 8002330:	e7eb      	b.n	800230a <_Z7RCCInitRK11ClockConfig+0x86>
			RCC->CR &= ~RCC_CR_PLLON;
 8002332:	4a36      	ldr	r2, [pc, #216]	@ (800240c <_Z7RCCInitRK11ClockConfig+0x188>)
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800233a:	6013      	str	r3, [r2, #0]
			if (cfg.useHSE)
 800233c:	7b63      	ldrb	r3, [r4, #13]
 800233e:	b11b      	cbz	r3, 8002348 <_Z7RCCInitRK11ClockConfig+0xc4>
				RCC->CR &= ~RCC_CR_HSEON;
 8002340:	6813      	ldr	r3, [r2, #0]
 8002342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002346:	6013      	str	r3, [r2, #0]
			return RCCStatus::PLL_FAILED;
 8002348:	2002      	movs	r0, #2
 800234a:	e054      	b.n	80023f6 <_Z7RCCInitRK11ClockConfig+0x172>
		}
	}
	//ENABLE OVER-DRIVE
	PWR->CR1 |= PWR_CR1_ODEN;
 800234c:	4a2e      	ldr	r2, [pc, #184]	@ (8002408 <_Z7RCCInitRK11ClockConfig+0x184>)
 800234e:	6813      	ldr	r3, [r2, #0]
 8002350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002354:	6013      	str	r3, [r2, #0]
	for (uint32_t i = 0; !(PWR->CSR1 & PWR_CSR1_ODRDY); ++i) {
 8002356:	2300      	movs	r3, #0
 8002358:	4a2b      	ldr	r2, [pc, #172]	@ (8002408 <_Z7RCCInitRK11ClockConfig+0x184>)
 800235a:	6852      	ldr	r2, [r2, #4]
 800235c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8002360:	d104      	bne.n	800236c <_Z7RCCInitRK11ClockConfig+0xe8>
		if (i > PLL_TIMEOUT) {
 8002362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002366:	d849      	bhi.n	80023fc <_Z7RCCInitRK11ClockConfig+0x178>
	for (uint32_t i = 0; !(PWR->CSR1 & PWR_CSR1_ODRDY); ++i) {
 8002368:	3301      	adds	r3, #1
 800236a:	e7f5      	b.n	8002358 <_Z7RCCInitRK11ClockConfig+0xd4>
			return RCCStatus::PLL_FAILED;
		}
	}
	PWR->CR1 |= PWR_CR1_ODSWEN;
 800236c:	4a26      	ldr	r2, [pc, #152]	@ (8002408 <_Z7RCCInitRK11ClockConfig+0x184>)
 800236e:	6813      	ldr	r3, [r2, #0]
 8002370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002374:	6013      	str	r3, [r2, #0]
	for (uint32_t i = 0; !(PWR->CSR1 & PWR_CSR1_ODSWRDY); ++i) {
 8002376:	2300      	movs	r3, #0
 8002378:	4a23      	ldr	r2, [pc, #140]	@ (8002408 <_Z7RCCInitRK11ClockConfig+0x184>)
 800237a:	6852      	ldr	r2, [r2, #4]
 800237c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002380:	d104      	bne.n	800238c <_Z7RCCInitRK11ClockConfig+0x108>
		if (i > 200000) {
 8002382:	4a23      	ldr	r2, [pc, #140]	@ (8002410 <_Z7RCCInitRK11ClockConfig+0x18c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d83b      	bhi.n	8002400 <_Z7RCCInitRK11ClockConfig+0x17c>
	for (uint32_t i = 0; !(PWR->CSR1 & PWR_CSR1_ODSWRDY); ++i) {
 8002388:	3301      	adds	r3, #1
 800238a:	e7f5      	b.n	8002378 <_Z7RCCInitRK11ClockConfig+0xf4>
			return RCCStatus::PLL_FAILED;
		}
	}
	// 5. Настройка Flash latency
	FLASH->ACR = flash_ws;
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <_Z7RCCInitRK11ClockConfig+0x190>)
 800238e:	601d      	str	r5, [r3, #0]
	// 6. Настройка делителей шин
	RCC->CFGR |= ahb_div | apb1_div | apb2_div;
 8002390:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	ea41 010c 	orr.w	r1, r1, ip
 800239a:	4301      	orrs	r1, r0
 800239c:	430a      	orrs	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
	// 7. Переключение SYSCLK на PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	f042 0202 	orr.w	r2, r2, #2
 80023a6:	609a      	str	r2, [r3, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL)
 80023a8:	4b18      	ldr	r3, [pc, #96]	@ (800240c <_Z7RCCInitRK11ClockConfig+0x188>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d1f9      	bne.n	80023a8 <_Z7RCCInitRK11ClockConfig+0x124>
		;
	// 8. Обновление SystemCoreClock
	SystemCoreClockUpdate();
 80023b4:	f000 fd1e 	bl	8002df4 <SystemCoreClockUpdate>
	// 9. Настройка SysTick
	if (cfg.useSysTick) {
 80023b8:	7be3      	ldrb	r3, [r4, #15]
 80023ba:	b1a3      	cbz	r3, 80023e6 <_Z7RCCInitRK11ClockConfig+0x162>
		SysTick_Config(SystemCoreClock / MS_DIV);
 80023bc:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <_Z7RCCInitRK11ClockConfig+0x194>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a16      	ldr	r2, [pc, #88]	@ (800241c <_Z7RCCInitRK11ClockConfig+0x198>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	3b01      	subs	r3, #1
 80023ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ce:	d20a      	bcs.n	80023e6 <_Z7RCCInitRK11ClockConfig+0x162>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80023d4:	6153      	str	r3, [r2, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <_Z7RCCInitRK11ClockConfig+0x19c>)
 80023d8:	21f0      	movs	r1, #240	@ 0xf0
 80023da:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023de:	2300      	movs	r3, #0
 80023e0:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e2:	2307      	movs	r3, #7
 80023e4:	6113      	str	r3, [r2, #16]
	}
	// 10. Выключение HSI (если не нужен)
	if (cfg.useHSE)
 80023e6:	7b63      	ldrb	r3, [r4, #13]
 80023e8:	b163      	cbz	r3, 8002404 <_Z7RCCInitRK11ClockConfig+0x180>
		RCC->CR &= ~RCC_CR_HSION;
 80023ea:	4a08      	ldr	r2, [pc, #32]	@ (800240c <_Z7RCCInitRK11ClockConfig+0x188>)
 80023ec:	6813      	ldr	r3, [r2, #0]
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	6013      	str	r3, [r2, #0]
	// 11. Расчет итоговой частоты (если запрошено)
	return RCCStatus::OK;
 80023f4:	2000      	movs	r0, #0
}
 80023f6:	bd38      	pop	{r3, r4, r5, pc}
		return RCCStatus::PLL_CONFIG_INVALID;
 80023f8:	2003      	movs	r0, #3
 80023fa:	e7fc      	b.n	80023f6 <_Z7RCCInitRK11ClockConfig+0x172>
			return RCCStatus::PLL_FAILED;
 80023fc:	2002      	movs	r0, #2
 80023fe:	e7fa      	b.n	80023f6 <_Z7RCCInitRK11ClockConfig+0x172>
			return RCCStatus::PLL_FAILED;
 8002400:	2002      	movs	r0, #2
 8002402:	e7f8      	b.n	80023f6 <_Z7RCCInitRK11ClockConfig+0x172>
	return RCCStatus::OK;
 8002404:	2000      	movs	r0, #0
 8002406:	e7f6      	b.n	80023f6 <_Z7RCCInitRK11ClockConfig+0x172>
 8002408:	40007000 	.word	0x40007000
 800240c:	40023800 	.word	0x40023800
 8002410:	00030d40 	.word	0x00030d40
 8002414:	40023c00 	.word	0x40023c00
 8002418:	200000d8 	.word	0x200000d8
 800241c:	10624dd3 	.word	0x10624dd3
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <_Z20enablePowerInterfacev>:
	return vco / pllp;
}

void enablePowerInterface(void) {
	uint32_t tmpreg;
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <_Z20enablePowerInterfacev+0x10>)
 8002426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002428:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40
	tmpreg = RCC->APB1ENR;
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
	(void) tmpreg;
}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <_Z18enableEthInterfacev>:

void enableEthInterface(void) {
	uint32_t tmpreg;
	RCC->AHB1ENR |=
 8002438:	4b03      	ldr	r3, [pc, #12]	@ (8002448 <_Z18enableEthInterfacev+0x10>)
 800243a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800243c:	f042 6260 	orr.w	r2, r2, #234881024	@ 0xe000000
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
			RCC_AHB1ENR_ETHMACEN
			| RCC_AHB1ENR_ETHMACTXEN
			| RCC_AHB1ENR_ETHMACRXEN;
	tmpreg = RCC->APB1ENR;
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
	(void) tmpreg;
}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800

0800244c <SysTick_Handler>:

volatile uint32_t myTick = 0;   // счетчик миллисекунд

// Обработчик прерывания SysTick
extern "C" void SysTick_Handler(void) {
    myTick += 1;   // каждый тик увеличиваем счетчик
 800244c:	4a02      	ldr	r2, [pc, #8]	@ (8002458 <SysTick_Handler+0xc>)
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20001a00 	.word	0x20001a00

0800245c <_Z8delay_msm>:


void delay_ms(uint32_t ms) {
    uint32_t start = myTick;
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <_Z8delay_msm+0x10>)
 800245e:	681a      	ldr	r2, [r3, #0]
    while ((myTick - start) < ms) {
 8002460:	4b02      	ldr	r3, [pc, #8]	@ (800246c <_Z8delay_msm+0x10>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	4283      	cmp	r3, r0
 8002468:	d3fa      	bcc.n	8002460 <_Z8delay_msm+0x4>
        // ждем
    }
}
 800246a:	4770      	bx	lr
 800246c:	20001a00 	.word	0x20001a00

08002470 <_Z8get_tickv>:

uint32_t get_tick(void){
	return myTick;
 8002470:	4b01      	ldr	r3, [pc, #4]	@ (8002478 <_Z8get_tickv+0x8>)
 8002472:	6818      	ldr	r0, [r3, #0]
}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20001a00 	.word	0x20001a00

0800247c <_Z41__static_initialization_and_destruction_0v>:

uint8_t TCPsendFrameTemplate[TCP_TEMPLATE_FRAME_LEN] = {
		// === Ethernet Header (14B) ===
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00,        // Dst MAC (будет подставлен)
		MAC_ADDR[0], MAC_ADDR[1], MAC_ADDR[2], MAC_ADDR[3], MAC_ADDR[4],
 800247c:	4a0b      	ldr	r2, [pc, #44]	@ (80024ac <_Z41__static_initialization_and_destruction_0v+0x30>)
 800247e:	7811      	ldrb	r1, [r2, #0]
		0x02,        // Flags = SYN (0x02), можно менять на ACK/PSH/FIN
		0x04, 0x00,  // Window size = 1024 (0x0400)
		0x00, 0x00,  // TCP checksum (обнулять перед расчетом)
		0x00, 0x00   // Urgent Pointer = 0
		// Payload идёт сразу после TCP заголовка
		};
 8002480:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <_Z41__static_initialization_and_destruction_0v+0x34>)
 8002482:	7199      	strb	r1, [r3, #6]
		MAC_ADDR[0], MAC_ADDR[1], MAC_ADDR[2], MAC_ADDR[3], MAC_ADDR[4],
 8002484:	7851      	ldrb	r1, [r2, #1]
		};
 8002486:	71d9      	strb	r1, [r3, #7]
		MAC_ADDR[0], MAC_ADDR[1], MAC_ADDR[2], MAC_ADDR[3], MAC_ADDR[4],
 8002488:	7891      	ldrb	r1, [r2, #2]
		};
 800248a:	7219      	strb	r1, [r3, #8]
		MAC_ADDR[0], MAC_ADDR[1], MAC_ADDR[2], MAC_ADDR[3], MAC_ADDR[4],
 800248c:	78d1      	ldrb	r1, [r2, #3]
		};
 800248e:	7259      	strb	r1, [r3, #9]
		MAC_ADDR[0], MAC_ADDR[1], MAC_ADDR[2], MAC_ADDR[3], MAC_ADDR[4],
 8002490:	7911      	ldrb	r1, [r2, #4]
		};
 8002492:	7299      	strb	r1, [r3, #10]
		MAC_ADDR[5], // Src MAC = мой MAC
 8002494:	7952      	ldrb	r2, [r2, #5]
		};
 8002496:	72da      	strb	r2, [r3, #11]
		IP_ADDR[0], IP_ADDR[1], IP_ADDR[2], IP_ADDR[3],  // Src IP
 8002498:	4a06      	ldr	r2, [pc, #24]	@ (80024b4 <_Z41__static_initialization_and_destruction_0v+0x38>)
 800249a:	7811      	ldrb	r1, [r2, #0]
		};
 800249c:	7699      	strb	r1, [r3, #26]
		IP_ADDR[0], IP_ADDR[1], IP_ADDR[2], IP_ADDR[3],  // Src IP
 800249e:	7851      	ldrb	r1, [r2, #1]
		};
 80024a0:	76d9      	strb	r1, [r3, #27]
		IP_ADDR[0], IP_ADDR[1], IP_ADDR[2], IP_ADDR[3],  // Src IP
 80024a2:	7891      	ldrb	r1, [r2, #2]
		};
 80024a4:	7719      	strb	r1, [r3, #28]
		IP_ADDR[0], IP_ADDR[1], IP_ADDR[2], IP_ADDR[3],  // Src IP
 80024a6:	78d2      	ldrb	r2, [r2, #3]
		};
 80024a8:	775a      	strb	r2, [r3, #29]

NET_SendTCP(conn, conn->tcp_my_seq, conn->rcv_next, TCP_ACK | TCP_PSH,
SAVE_FOR_RETRANSMIT, data, len);
conn->tcp_my_seq += len;
return 0;
}
 80024aa:	4770      	bx	lr
 80024ac:	20000098 	.word	0x20000098
 80024b0:	200000a0 	.word	0x200000a0
 80024b4:	20000094 	.word	0x20000094

080024b8 <_Z12NET_TCP_Initv>:
void NET_TCP_Init(void) {
 80024b8:	b508      	push	{r3, lr}
	memset(tcp_clients, 0, sizeof(tcp_clients));
 80024ba:	f64f 1260 	movw	r2, #63840	@ 0xf960
 80024be:	2100      	movs	r1, #0
 80024c0:	480b      	ldr	r0, [pc, #44]	@ (80024f0 <_Z12NET_TCP_Initv+0x38>)
 80024c2:	f001 fa2b 	bl	800391c <memset>
	free_top = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <_Z12NET_TCP_Initv+0x3c>)
 80024ca:	7013      	strb	r3, [r2, #0]
	active_conn = 0;
 80024cc:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <_Z12NET_TCP_Initv+0x40>)
 80024ce:	7013      	strb	r3, [r2, #0]
	ppTxBuff = &TxDescList.pBuff;
 80024d0:	4a0a      	ldr	r2, [pc, #40]	@ (80024fc <_Z12NET_TCP_Initv+0x44>)
 80024d2:	490b      	ldr	r1, [pc, #44]	@ (8002500 <_Z12NET_TCP_Initv+0x48>)
 80024d4:	6011      	str	r1, [r2, #0]
	for (uint8_t i = 0; i < TCP_MAX_CONNECTIONS; i++) {
 80024d6:	e007      	b.n	80024e8 <_Z12NET_TCP_Initv+0x30>
		free_list[free_top++] = i;
 80024d8:	4906      	ldr	r1, [pc, #24]	@ (80024f4 <_Z12NET_TCP_Initv+0x3c>)
 80024da:	780a      	ldrb	r2, [r1, #0]
 80024dc:	1c50      	adds	r0, r2, #1
 80024de:	7008      	strb	r0, [r1, #0]
 80024e0:	4908      	ldr	r1, [pc, #32]	@ (8002504 <_Z12NET_TCP_Initv+0x4c>)
 80024e2:	548b      	strb	r3, [r1, r2]
	for (uint8_t i = 0; i < TCP_MAX_CONNECTIONS; i++) {
 80024e4:	3301      	adds	r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b09      	cmp	r3, #9
 80024ea:	d9f5      	bls.n	80024d8 <_Z12NET_TCP_Initv+0x20>
}
 80024ec:	bd08      	pop	{r3, pc}
 80024ee:	bf00      	nop
 80024f0:	20001a24 	.word	0x20001a24
 80024f4:	20001a08 	.word	0x20001a08
 80024f8:	20001a16 	.word	0x20001a16
 80024fc:	20001a04 	.word	0x20001a04
 8002500:	200001c0 	.word	0x200001c0
 8002504:	20001a0c 	.word	0x20001a0c

08002508 <_Z17NET_TCP_ClientAddv>:
	if (free_top != 0 && active_conn < TCP_MAX_CONNECTIONS) {
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <_Z17NET_TCP_ClientAddv+0x34>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b17b      	cbz	r3, 800252e <_Z17NET_TCP_ClientAddv+0x26>
 800250e:	4a0c      	ldr	r2, [pc, #48]	@ (8002540 <_Z17NET_TCP_ClientAddv+0x38>)
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	2a09      	cmp	r2, #9
 8002514:	d80e      	bhi.n	8002534 <_Z17NET_TCP_ClientAddv+0x2c>
		uint8_t i = free_list[--free_top];
 8002516:	3b01      	subs	r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4908      	ldr	r1, [pc, #32]	@ (800253c <_Z17NET_TCP_ClientAddv+0x34>)
 800251c:	700b      	strb	r3, [r1, #0]
 800251e:	4909      	ldr	r1, [pc, #36]	@ (8002544 <_Z17NET_TCP_ClientAddv+0x3c>)
 8002520:	5cc8      	ldrb	r0, [r1, r3]
		active_list[active_conn++] = i; // добавляем в список активных
 8002522:	1c51      	adds	r1, r2, #1
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <_Z17NET_TCP_ClientAddv+0x38>)
 8002526:	7019      	strb	r1, [r3, #0]
 8002528:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <_Z17NET_TCP_ClientAddv+0x40>)
 800252a:	5498      	strb	r0, [r3, r2]
		return i;
 800252c:	4770      	bx	lr
	return -1;
 800252e:	f04f 30ff 	mov.w	r0, #4294967295
 8002532:	4770      	bx	lr
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20001a08 	.word	0x20001a08
 8002540:	20001a16 	.word	0x20001a16
 8002544:	20001a0c 	.word	0x20001a0c
 8002548:	20001a18 	.word	0x20001a18

0800254c <_Z20NET_TCP_ClientRemoveh>:
void NET_TCP_ClientRemove(uint8_t idx) {
 800254c:	b510      	push	{r4, lr}
 800254e:	4604      	mov	r4, r0
	for (int j = 0; j < active_conn; j++) {
 8002550:	2300      	movs	r3, #0
 8002552:	e004      	b.n	800255e <_Z20NET_TCP_ClientRemoveh+0x12>
				active_conn--;
 8002554:	3a01      	subs	r2, #1
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <_Z20NET_TCP_ClientRemoveh+0x54>)
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e011      	b.n	8002580 <_Z20NET_TCP_ClientRemoveh+0x34>
	for (int j = 0; j < active_conn; j++) {
 800255c:	3301      	adds	r3, #1
 800255e:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <_Z20NET_TCP_ClientRemoveh+0x54>)
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	dd1a      	ble.n	800259c <_Z20NET_TCP_ClientRemoveh+0x50>
		if (active_list[j] == idx) {
 8002566:	490f      	ldr	r1, [pc, #60]	@ (80025a4 <_Z20NET_TCP_ClientRemoveh+0x58>)
 8002568:	5cc9      	ldrb	r1, [r1, r3]
 800256a:	42a1      	cmp	r1, r4
 800256c:	d1f6      	bne.n	800255c <_Z20NET_TCP_ClientRemoveh+0x10>
			if (j != active_conn - 1) {
 800256e:	1e51      	subs	r1, r2, #1
 8002570:	4299      	cmp	r1, r3
 8002572:	d0ef      	beq.n	8002554 <_Z20NET_TCP_ClientRemoveh+0x8>
				active_list[j] = active_list[--active_conn];
 8002574:	b2ca      	uxtb	r2, r1
 8002576:	490a      	ldr	r1, [pc, #40]	@ (80025a0 <_Z20NET_TCP_ClientRemoveh+0x54>)
 8002578:	700a      	strb	r2, [r1, #0]
 800257a:	490a      	ldr	r1, [pc, #40]	@ (80025a4 <_Z20NET_TCP_ClientRemoveh+0x58>)
 800257c:	5c8a      	ldrb	r2, [r1, r2]
 800257e:	54ca      	strb	r2, [r1, r3]
			memset(&tcp_clients[idx], 0, sizeof(tcp_conn_t));
 8002580:	f641 02f0 	movw	r2, #6384	@ 0x18f0
 8002584:	2100      	movs	r1, #0
 8002586:	4808      	ldr	r0, [pc, #32]	@ (80025a8 <_Z20NET_TCP_ClientRemoveh+0x5c>)
 8002588:	fb02 0004 	mla	r0, r2, r4, r0
 800258c:	f001 f9c6 	bl	800391c <memset>
			free_list[free_top++] = idx;
 8002590:	4a06      	ldr	r2, [pc, #24]	@ (80025ac <_Z20NET_TCP_ClientRemoveh+0x60>)
 8002592:	7813      	ldrb	r3, [r2, #0]
 8002594:	1c59      	adds	r1, r3, #1
 8002596:	7011      	strb	r1, [r2, #0]
 8002598:	4a05      	ldr	r2, [pc, #20]	@ (80025b0 <_Z20NET_TCP_ClientRemoveh+0x64>)
 800259a:	54d4      	strb	r4, [r2, r3]
}
 800259c:	bd10      	pop	{r4, pc}
 800259e:	bf00      	nop
 80025a0:	20001a16 	.word	0x20001a16
 80025a4:	20001a18 	.word	0x20001a18
 80025a8:	20001a24 	.word	0x20001a24
 80025ac:	20001a08 	.word	0x20001a08
 80025b0:	20001a0c 	.word	0x20001a0c

080025b4 <_Z15NET_SendTCP_RSTP10ipv4_framettmmh>:
		uint32_t seq, uint32_t ack, uint8_t flags) {
 80025b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b8:	b083      	sub	sp, #12
 80025ba:	4605      	mov	r5, r0
 80025bc:	9100      	str	r1, [sp, #0]
 80025be:	9201      	str	r2, [sp, #4]
 80025c0:	4698      	mov	r8, r3
 80025c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
	eth_hdr_t *eth = reinterpret_cast<eth_hdr_t*>(*ppTxBuff);
 80025c4:	4b43      	ldr	r3, [pc, #268]	@ (80026d4 <_Z15NET_SendTCP_RSTP10ipv4_framettmmh+0x120>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681c      	ldr	r4, [r3, #0]
	ip_hdr_t *ip = reinterpret_cast<ip_hdr_t*>((*ppTxBuff + ETH_HDR_LEN));
 80025ca:	f104 0e0e 	add.w	lr, r4, #14
	tcp_hdr_t *tcp = reinterpret_cast<tcp_hdr_t*>((*ppTxBuff + ETH_HDR_LEN
 80025ce:	f104 0722 	add.w	r7, r4, #34	@ 0x22
	memcpy(eth, TCPsendFrameTemplate, TCP_TEMPLATE_FRAME_LEN);
 80025d2:	f8df a108 	ldr.w	sl, [pc, #264]	@ 80026dc <_Z15NET_SendTCP_RSTP10ipv4_framettmmh+0x128>
 80025d6:	46a1      	mov	r9, r4
 80025d8:	f10a 0b30 	add.w	fp, sl, #48	@ 0x30
 80025dc:	46d4      	mov	ip, sl
 80025de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80025e2:	f8c9 0000 	str.w	r0, [r9]
 80025e6:	f8c9 1004 	str.w	r1, [r9, #4]
 80025ea:	f8c9 2008 	str.w	r2, [r9, #8]
 80025ee:	f8c9 300c 	str.w	r3, [r9, #12]
 80025f2:	46e2      	mov	sl, ip
 80025f4:	f109 0910 	add.w	r9, r9, #16
 80025f8:	45dc      	cmp	ip, fp
 80025fa:	d1ef      	bne.n	80025dc <_Z15NET_SendTCP_RSTP10ipv4_framettmmh+0x28>
 80025fc:	f8dc 0000 	ldr.w	r0, [ip]
 8002600:	f8c9 0000 	str.w	r0, [r9]
 8002604:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8002608:	f8a9 2004 	strh.w	r2, [r9, #4]
	memcpy(eth->dst, frame->scr_mac, MAC_ADDR_LEN);
 800260c:	68ab      	ldr	r3, [r5, #8]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	6022      	str	r2, [r4, #0]
 8002612:	889b      	ldrh	r3, [r3, #4]
 8002614:	80a3      	strh	r3, [r4, #4]
	ip->tot_len = bswap16(IP_HDR_LEN + TCP_HDR_LEN);
 8002616:	2300      	movs	r3, #0
 8002618:	7423      	strb	r3, [r4, #16]
 800261a:	2328      	movs	r3, #40	@ 0x28
 800261c:	7463      	strb	r3, [r4, #17]
	ip->dst_ip = bswap32(BuffU8ToU32(frame->scr_addr));
 800261e:	68eb      	ldr	r3, [r5, #12]
}
static inline uint32_t BuffU8ToU32rev(uint8_t *x) {
	return ((x[3] << 24) | (x[2] << 16) | (x[1] << 8) | x[0]);
}
static inline uint32_t BuffU8ToU32(uint8_t *x) {
	return ((x[0] << 24) | (x[1] << 16) | (x[2] << 8) | x[3]);
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	f893 c001 	ldrb.w	ip, [r3, #1]
 8002626:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800262a:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
 800262e:	789a      	ldrb	r2, [r3, #2]
 8002630:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8002634:	78da      	ldrb	r2, [r3, #3]
 8002636:	ea4c 0c02 	orr.w	ip, ip, r2
	return ((x & 0x000000FFUL) << 24) | ((x & 0x0000FF00UL) << 8)
 800263a:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800263e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002642:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| ((x & 0x00FF0000UL) >> 8) | ((x & 0xFF000000UL) >> 24);
 8002646:	ea4f 221c 	mov.w	r2, ip, lsr #8
 800264a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 800264e:	4313      	orrs	r3, r2
 8002650:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8002654:	f8c4 301e 	str.w	r3, [r4, #30]
	ip->checksum = bswap16(
 8002658:	2114      	movs	r1, #20
 800265a:	4670      	mov	r0, lr
 800265c:	f7ff fb22 	bl	8001ca4 <_Z8checksumPKht>
	return (x << 8) | (x >> 8);
 8002660:	ba40      	rev16	r0, r0
 8002662:	8320      	strh	r0, [r4, #24]
 8002664:	9b00      	ldr	r3, [sp, #0]
 8002666:	fa93 fa93 	rev16.w	sl, r3
	tcp->src_port = bswap16(src_port);
 800266a:	f8a4 a022 	strh.w	sl, [r4, #34]	@ 0x22
 800266e:	9b01      	ldr	r3, [sp, #4]
 8002670:	fa93 f993 	rev16.w	r9, r3
	tcp->dst_port = bswap16(dst_port);
 8002674:	f8a4 9024 	strh.w	r9, [r4, #36]	@ 0x24
	return ((x & 0x000000FFUL) << 24) | ((x & 0x0000FF00UL) << 8)
 8002678:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800267c:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8002680:	ea42 6208 	orr.w	r2, r2, r8, lsl #24
			| ((x & 0x00FF0000UL) >> 8) | ((x & 0xFF000000UL) >> 24);
 8002684:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8002688:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800268c:	431a      	orrs	r2, r3
 800268e:	ea42 6318 	orr.w	r3, r2, r8, lsr #24
	tcp->seq_num = bswap32(seq);
 8002692:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
	return ((x & 0x000000FFUL) << 24) | ((x & 0x0000FF00UL) << 8)
 8002696:	0232      	lsls	r2, r6, #8
 8002698:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 800269c:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
			| ((x & 0x00FF0000UL) >> 8) | ((x & 0xFF000000UL) >> 24);
 80026a0:	0a33      	lsrs	r3, r6, #8
 80026a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80026a6:	4313      	orrs	r3, r2
 80026a8:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
	tcp->ack_num = bswap32(ack);
 80026ac:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
	tcp->flags = flags;
 80026b0:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 80026b4:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
	tcp->checksum = bswap16(
 80026b8:	2314      	movs	r3, #20
 80026ba:	463a      	mov	r2, r7
 80026bc:	68e9      	ldr	r1, [r5, #12]
 80026be:	4806      	ldr	r0, [pc, #24]	@ (80026d8 <_Z15NET_SendTCP_RSTP10ipv4_framettmmh+0x124>)
 80026c0:	f7ff fb09 	bl	8001cd6 <_Z12tcp_checksumPhS_S_t>
	return (x << 8) | (x >> 8);
 80026c4:	ba40      	rev16	r0, r0
 80026c6:	8660      	strh	r0, [r4, #50]	@ 0x32
	ETH_SendFrame(
 80026c8:	2036      	movs	r0, #54	@ 0x36
 80026ca:	f7ff f973 	bl	80019b4 <_Z13ETH_SendFramem>
}
 80026ce:	b003      	add	sp, #12
 80026d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026d4:	20001a04 	.word	0x20001a04
 80026d8:	20000094 	.word	0x20000094
 80026dc:	200000a0 	.word	0x200000a0

080026e0 <_Z21NET_SendRetransmitTCPP10tcp_conn_t>:
void NET_SendRetransmitTCP(tcp_conn_t *conn) {
 80026e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026e4:	4604      	mov	r4, r0
	eth_hdr_t *eth = reinterpret_cast<eth_hdr_t*>(*ppTxBuff);
 80026e6:	4b25      	ldr	r3, [pc, #148]	@ (800277c <_Z21NET_SendRetransmitTCPP10tcp_conn_t+0x9c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681d      	ldr	r5, [r3, #0]
	ip_hdr_t *ip = reinterpret_cast<ip_hdr_t*>((*ppTxBuff + ETH_HDR_LEN));
 80026ec:	f105 0e0e 	add.w	lr, r5, #14
	tcp_hdr_t *tcp = reinterpret_cast<tcp_hdr_t*>((*ppTxBuff + ETH_HDR_LEN
 80026f0:	f105 0622 	add.w	r6, r5, #34	@ 0x22
	memcpy(eth, TCPsendFrameTemplate, ETH_HDR_LEN + IP_HDR_LEN);
 80026f4:	4f22      	ldr	r7, [pc, #136]	@ (8002780 <_Z21NET_SendRetransmitTCPP10tcp_conn_t+0xa0>)
 80026f6:	46ac      	mov	ip, r5
 80026f8:	f107 0920 	add.w	r9, r7, #32
 80026fc:	46b8      	mov	r8, r7
 80026fe:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8002702:	f8cc 0000 	str.w	r0, [ip]
 8002706:	f8cc 1004 	str.w	r1, [ip, #4]
 800270a:	f8cc 2008 	str.w	r2, [ip, #8]
 800270e:	f8cc 300c 	str.w	r3, [ip, #12]
 8002712:	4647      	mov	r7, r8
 8002714:	f10c 0c10 	add.w	ip, ip, #16
 8002718:	45c8      	cmp	r8, r9
 800271a:	d1ef      	bne.n	80026fc <_Z21NET_SendRetransmitTCPP10tcp_conn_t+0x1c>
 800271c:	f8b8 3000 	ldrh.w	r3, [r8]
 8002720:	f8ac 3000 	strh.w	r3, [ip]
	memcpy(eth->dst, conn->client_mac, MAC_ADDR_LEN);
 8002724:	f8d4 3037 	ldr.w	r3, [r4, #55]	@ 0x37
 8002728:	602b      	str	r3, [r5, #0]
 800272a:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 800272e:	80ab      	strh	r3, [r5, #4]
	ip->tot_len = bswap16(IP_HDR_LEN + TCP_HDR_LEN + conn->soc_tx_buff_pos);
 8002730:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8002732:	3328      	adds	r3, #40	@ 0x28
 8002734:	ba5b      	rev16	r3, r3
 8002736:	822b      	strh	r3, [r5, #16]
	ip->dst_ip = bswap32(conn->client_ip);
 8002738:	69e2      	ldr	r2, [r4, #28]
	return ((x & 0x000000FFUL) << 24) | ((x & 0x0000FF00UL) << 8)
 800273a:	0213      	lsls	r3, r2, #8
 800273c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002740:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| ((x & 0x00FF0000UL) >> 8) | ((x & 0xFF000000UL) >> 24);
 8002744:	0a11      	lsrs	r1, r2, #8
 8002746:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 800274a:	430b      	orrs	r3, r1
 800274c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002750:	f8c5 301e 	str.w	r3, [r5, #30]
	ip->checksum = bswap16(
 8002754:	2114      	movs	r1, #20
 8002756:	4670      	mov	r0, lr
 8002758:	f7ff faa4 	bl	8001ca4 <_Z8checksumPKht>
	return (x << 8) | (x >> 8);
 800275c:	ba40      	rev16	r0, r0
 800275e:	8328      	strh	r0, [r5, #24]
	memcpy(tcp, conn->socket_tx_buff, conn->soc_tx_buff_pos);
 8002760:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 8002762:	f241 413e 	movw	r1, #5182	@ 0x143e
 8002766:	4421      	add	r1, r4
 8002768:	4630      	mov	r0, r6
 800276a:	f001 f94f 	bl	8003a0c <memcpy>
	ETH_HDR_LEN + IP_HDR_LEN + conn->soc_tx_buff_pos);
 800276e:	8e60      	ldrh	r0, [r4, #50]	@ 0x32
	ETH_SendFrame(
 8002770:	3022      	adds	r0, #34	@ 0x22
 8002772:	f7ff f91f 	bl	80019b4 <_Z13ETH_SendFramem>
}
 8002776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800277a:	bf00      	nop
 800277c:	20001a04 	.word	0x20001a04
 8002780:	200000a0 	.word	0x200000a0

08002784 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht>:
		uint8_t retransmit, const uint8_t *data, uint16_t data_len) {
 8002784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002788:	b085      	sub	sp, #20
 800278a:	4605      	mov	r5, r0
 800278c:	468a      	mov	sl, r1
 800278e:	4691      	mov	r9, r2
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	f8bd 6040 	ldrh.w	r6, [sp, #64]	@ 0x40
	eth_hdr_t *eth = reinterpret_cast<eth_hdr_t*>(*ppTxBuff);
 8002796:	4b50      	ldr	r3, [pc, #320]	@ (80028d8 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht+0x154>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681c      	ldr	r4, [r3, #0]
	ip_hdr_t *ip = reinterpret_cast<ip_hdr_t*>((*ppTxBuff + ETH_HDR_LEN));
 800279c:	f104 030e 	add.w	r3, r4, #14
 80027a0:	9300      	str	r3, [sp, #0]
	tcp_hdr_t *tcp = reinterpret_cast<tcp_hdr_t*>((*ppTxBuff + ETH_HDR_LEN
 80027a2:	f104 0822 	add.w	r8, r4, #34	@ 0x22
	memcpy(eth, TCPsendFrameTemplate, TCP_TEMPLATE_FRAME_LEN);
 80027a6:	f8df e138 	ldr.w	lr, [pc, #312]	@ 80028e0 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht+0x15c>
 80027aa:	4627      	mov	r7, r4
 80027ac:	f10e 0b30 	add.w	fp, lr, #48	@ 0x30
 80027b0:	46f4      	mov	ip, lr
 80027b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80027b6:	6038      	str	r0, [r7, #0]
 80027b8:	6079      	str	r1, [r7, #4]
 80027ba:	60ba      	str	r2, [r7, #8]
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	46e6      	mov	lr, ip
 80027c0:	3710      	adds	r7, #16
 80027c2:	45dc      	cmp	ip, fp
 80027c4:	d1f4      	bne.n	80027b0 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht+0x2c>
 80027c6:	f8dc 0000 	ldr.w	r0, [ip]
 80027ca:	6038      	str	r0, [r7, #0]
 80027cc:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80027d0:	80ba      	strh	r2, [r7, #4]
	memcpy(eth->dst, conn->client_mac, MAC_ADDR_LEN);
 80027d2:	f8d5 3037 	ldr.w	r3, [r5, #55]	@ 0x37
 80027d6:	6023      	str	r3, [r4, #0]
 80027d8:	f8b5 303b 	ldrh.w	r3, [r5, #59]	@ 0x3b
 80027dc:	80a3      	strh	r3, [r4, #4]
	ip->tot_len = bswap16(IP_HDR_LEN + TCP_HDR_LEN + data_len);
 80027de:	f106 0328 	add.w	r3, r6, #40	@ 0x28
 80027e2:	ba5b      	rev16	r3, r3
 80027e4:	8223      	strh	r3, [r4, #16]
	ip->dst_ip = bswap32(conn->client_ip);
 80027e6:	69e9      	ldr	r1, [r5, #28]
	return ((x & 0x000000FFUL) << 24) | ((x & 0x0000FF00UL) << 8)
 80027e8:	020a      	lsls	r2, r1, #8
 80027ea:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 80027ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
			| ((x & 0x00FF0000UL) >> 8) | ((x & 0xFF000000UL) >> 24);
 80027f2:	0a0b      	lsrs	r3, r1, #8
 80027f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80027f8:	4313      	orrs	r3, r2
 80027fa:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80027fe:	f8c4 301e 	str.w	r3, [r4, #30]
	ip->checksum = bswap16(
 8002802:	2114      	movs	r1, #20
 8002804:	9800      	ldr	r0, [sp, #0]
 8002806:	f7ff fa4d 	bl	8001ca4 <_Z8checksumPKht>
	return (x << 8) | (x >> 8);
 800280a:	ba40      	rev16	r0, r0
 800280c:	8320      	strh	r0, [r4, #24]
	tcp->src_port = bswap16(conn->server_port);
 800280e:	8deb      	ldrh	r3, [r5, #46]	@ 0x2e
 8002810:	ba5b      	rev16	r3, r3
 8002812:	8463      	strh	r3, [r4, #34]	@ 0x22
	tcp->dst_port = bswap16(conn->client_port);
 8002814:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 8002816:	ba5b      	rev16	r3, r3
 8002818:	84a3      	strh	r3, [r4, #36]	@ 0x24
	return ((x & 0x000000FFUL) << 24) | ((x & 0x0000FF00UL) << 8)
 800281a:	ea4f 210a 	mov.w	r1, sl, lsl #8
 800281e:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
 8002822:	ea41 610a 	orr.w	r1, r1, sl, lsl #24
			| ((x & 0x00FF0000UL) >> 8) | ((x & 0xFF000000UL) >> 24);
 8002826:	ea4f 231a 	mov.w	r3, sl, lsr #8
 800282a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800282e:	430b      	orrs	r3, r1
 8002830:	ea43 611a 	orr.w	r1, r3, sl, lsr #24
	tcp->seq_num = bswap32(seq);
 8002834:	f8c4 1026 	str.w	r1, [r4, #38]	@ 0x26
	return ((x & 0x000000FFUL) << 24) | ((x & 0x0000FF00UL) << 8)
 8002838:	ea4f 2109 	mov.w	r1, r9, lsl #8
 800283c:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
 8002840:	ea41 6109 	orr.w	r1, r1, r9, lsl #24
			| ((x & 0x00FF0000UL) >> 8) | ((x & 0xFF000000UL) >> 24);
 8002844:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8002848:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800284c:	4319      	orrs	r1, r3
 800284e:	ea41 6219 	orr.w	r2, r1, r9, lsr #24
	tcp->ack_num = bswap32(ack);
 8002852:	f8c4 202a 	str.w	r2, [r4, #42]	@ 0x2a
	tcp->window = bswap16(conn->window_size);
 8002856:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
	return (x << 8) | (x >> 8);
 8002858:	ba5b      	rev16	r3, r3
 800285a:	8623      	strh	r3, [r4, #48]	@ 0x30
	tcp->flags = flags;
 800285c:	9b01      	ldr	r3, [sp, #4]
 800285e:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
	if (data_len > 0) {
 8002862:	bb0e      	cbnz	r6, 80028a8 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht+0x124>
	U32toBuffU8(client_ip, conn->client_ip);
 8002864:	69eb      	ldr	r3, [r5, #28]
}

static inline void U32toBuffU8(uint8_t *buff, uint32_t num) {
	buff[0] = (uint8_t)((num >> 24) & 0xFF);
 8002866:	0e1a      	lsrs	r2, r3, #24
 8002868:	f88d 200c 	strb.w	r2, [sp, #12]
	buff[1] = (uint8_t)((num >> 16) & 0xFF);
 800286c:	0c1a      	lsrs	r2, r3, #16
 800286e:	f88d 200d 	strb.w	r2, [sp, #13]
	buff[2] = (uint8_t)((num>> 8)   & 0xFF);
 8002872:	0a1a      	lsrs	r2, r3, #8
 8002874:	f88d 200e 	strb.w	r2, [sp, #14]
	buff[3] = (uint8_t)((num)       & 0xFF);
 8002878:	f88d 300f 	strb.w	r3, [sp, #15]
	tcp->checksum = bswap16(
 800287c:	f106 0714 	add.w	r7, r6, #20
 8002880:	b2bf      	uxth	r7, r7
 8002882:	463b      	mov	r3, r7
 8002884:	4642      	mov	r2, r8
 8002886:	a903      	add	r1, sp, #12
 8002888:	4814      	ldr	r0, [pc, #80]	@ (80028dc <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht+0x158>)
 800288a:	f7ff fa24 	bl	8001cd6 <_Z12tcp_checksumPhS_S_t>
	return (x << 8) | (x >> 8);
 800288e:	ba40      	rev16	r0, r0
 8002890:	8660      	strh	r0, [r4, #50]	@ 0x32
	if (retransmit == 1) {
 8002892:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 8002896:	2b01      	cmp	r3, #1
 8002898:	d00d      	beq.n	80028b6 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht+0x132>
	ETH_SendFrame(
 800289a:	f106 0036 	add.w	r0, r6, #54	@ 0x36
 800289e:	f7ff f889 	bl	80019b4 <_Z13ETH_SendFramem>
}
 80028a2:	b005      	add	sp, #20
 80028a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(reinterpret_cast<uint8_t*>(tcp) + TCP_HDR_LEN, data, data_len);
 80028a8:	4632      	mov	r2, r6
 80028aa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80028ac:	f104 0036 	add.w	r0, r4, #54	@ 0x36
 80028b0:	f001 f8ac 	bl	8003a0c <memcpy>
 80028b4:	e7d6      	b.n	8002864 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht+0xe0>
		memcpy(conn->socket_tx_buff, (uint8_t*) tcp, TCP_HDR_LEN + data_len);
 80028b6:	f106 0214 	add.w	r2, r6, #20
 80028ba:	4641      	mov	r1, r8
 80028bc:	f241 403e 	movw	r0, #5182	@ 0x143e
 80028c0:	4428      	add	r0, r5
 80028c2:	f001 f8a3 	bl	8003a0c <memcpy>
		conn->soc_tx_buff_pos = TCP_HDR_LEN + data_len;
 80028c6:	866f      	strh	r7, [r5, #50]	@ 0x32
		conn->retransmit_timer = get_tick();
 80028c8:	f7ff fdd2 	bl	8002470 <_Z8get_tickv>
 80028cc:	6128      	str	r0, [r5, #16]
		conn->retransmit_count = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
 80028d4:	e7e1      	b.n	800289a <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht+0x116>
 80028d6:	bf00      	nop
 80028d8:	20001a04 	.word	0x20001a04
 80028dc:	20000094 	.word	0x20000094
 80028e0:	200000a0 	.word	0x200000a0

080028e4 <_Z14NET_TCP_Timersv>:
void NET_TCP_Timers(void) {
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	b084      	sub	sp, #16
	for (int i = active_conn - 1; i >= 0; i--) {
 80028e8:	4b38      	ldr	r3, [pc, #224]	@ (80029cc <_Z14NET_TCP_Timersv+0xe8>)
 80028ea:	781d      	ldrb	r5, [r3, #0]
 80028ec:	3d01      	subs	r5, #1
 80028ee:	e018      	b.n	8002922 <_Z14NET_TCP_Timersv+0x3e>
				NET_TCP_ClientRemove(idx);
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff fe2b 	bl	800254c <_Z20NET_TCP_ClientRemoveh>
				continue;
 80028f6:	e013      	b.n	8002920 <_Z14NET_TCP_Timersv+0x3c>
		if (((get_tick() - conn->last_activity) > TCP_KEEPALIVE_TIMEOUT)
 80028f8:	f7ff fdba 	bl	8002470 <_Z8get_tickv>
 80028fc:	4b34      	ldr	r3, [pc, #208]	@ (80029d0 <_Z14NET_TCP_Timersv+0xec>)
 80028fe:	f641 02f0 	movw	r2, #6384	@ 0x18f0
 8002902:	fb02 3304 	mla	r3, r2, r4, r3
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	1ac0      	subs	r0, r0, r3
				&& (conn->state == tcp_state_t::TCP_ESTABLISHED)) {
 800290a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800290e:	4298      	cmp	r0, r3
 8002910:	d906      	bls.n	8002920 <_Z14NET_TCP_Timersv+0x3c>
 8002912:	4b2f      	ldr	r3, [pc, #188]	@ (80029d0 <_Z14NET_TCP_Timersv+0xec>)
 8002914:	fb02 3304 	mla	r3, r2, r4, r3
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291c:	2b02      	cmp	r3, #2
 800291e:	d023      	beq.n	8002968 <_Z14NET_TCP_Timersv+0x84>
	for (int i = active_conn - 1; i >= 0; i--) {
 8002920:	3d01      	subs	r5, #1
 8002922:	2d00      	cmp	r5, #0
 8002924:	db50      	blt.n	80029c8 <_Z14NET_TCP_Timersv+0xe4>
		idx = active_list[i];
 8002926:	4b2b      	ldr	r3, [pc, #172]	@ (80029d4 <_Z14NET_TCP_Timersv+0xf0>)
 8002928:	5d5c      	ldrb	r4, [r3, r5]
		conn = &tcp_clients[idx];
 800292a:	f641 03f0 	movw	r3, #6384	@ 0x18f0
 800292e:	4e28      	ldr	r6, [pc, #160]	@ (80029d0 <_Z14NET_TCP_Timersv+0xec>)
 8002930:	fb03 6604 	mla	r6, r3, r4, r6
		if (conn->retransmit_timer
 8002934:	6933      	ldr	r3, [r6, #16]
				&& (get_tick() - conn->retransmit_timer > TCP_RETRANSMIT_TIMEOUT)) {
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0de      	beq.n	80028f8 <_Z14NET_TCP_Timersv+0x14>
 800293a:	f7ff fd99 	bl	8002470 <_Z8get_tickv>
 800293e:	6933      	ldr	r3, [r6, #16]
 8002940:	1ac0      	subs	r0, r0, r3
 8002942:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8002946:	d9d7      	bls.n	80028f8 <_Z14NET_TCP_Timersv+0x14>
			if (conn->retransmit_count < TCP_RETRANSMISSION_MAX_COUNT) {
 8002948:	f896 3034 	ldrb.w	r3, [r6, #52]	@ 0x34
 800294c:	2b02      	cmp	r3, #2
 800294e:	d8cf      	bhi.n	80028f0 <_Z14NET_TCP_Timersv+0xc>
				NET_SendRetransmitTCP(conn);
 8002950:	4630      	mov	r0, r6
 8002952:	f7ff fec5 	bl	80026e0 <_Z21NET_SendRetransmitTCPP10tcp_conn_t>
				conn->retransmit_timer = get_tick();
 8002956:	f7ff fd8b 	bl	8002470 <_Z8get_tickv>
 800295a:	6130      	str	r0, [r6, #16]
				conn->retransmit_count++;
 800295c:	f896 2034 	ldrb.w	r2, [r6, #52]	@ 0x34
 8002960:	3201      	adds	r2, #1
 8002962:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
 8002966:	e7c7      	b.n	80028f8 <_Z14NET_TCP_Timersv+0x14>
			if ((get_tick() - conn->last_keepalive) >= TCP_KEEPALIVE_INTERVAL) {
 8002968:	f7ff fd82 	bl	8002470 <_Z8get_tickv>
 800296c:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <_Z14NET_TCP_Timersv+0xec>)
 800296e:	f641 02f0 	movw	r2, #6384	@ 0x18f0
 8002972:	fb02 3304 	mla	r3, r2, r4, r3
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	1ac0      	subs	r0, r0, r3
 800297a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800297e:	d3cf      	bcc.n	8002920 <_Z14NET_TCP_Timersv+0x3c>
				if (conn->keep_alive_count >= TCP_KEEPALIVE_MAX_COUNT) {
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <_Z14NET_TCP_Timersv+0xec>)
 8002982:	fb02 3304 	mla	r3, r2, r4, r3
 8002986:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800298a:	2b02      	cmp	r3, #2
 800298c:	d818      	bhi.n	80029c0 <_Z14NET_TCP_Timersv+0xdc>
				NET_SendTCP(conn, conn->tcp_my_seq - 1, conn->tcp_client_seq,
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <_Z14NET_TCP_Timersv+0xec>)
 8002990:	f641 02f0 	movw	r2, #6384	@ 0x18f0
 8002994:	fb02 3404 	mla	r4, r2, r4, r3
 8002998:	6961      	ldr	r1, [r4, #20]
 800299a:	2300      	movs	r3, #0
 800299c:	9302      	str	r3, [sp, #8]
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	2210      	movs	r2, #16
 80029a2:	9200      	str	r2, [sp, #0]
 80029a4:	68e2      	ldr	r2, [r4, #12]
 80029a6:	3901      	subs	r1, #1
 80029a8:	4630      	mov	r0, r6
 80029aa:	f7ff feeb 	bl	8002784 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht>
				conn->keep_alive_count++;
 80029ae:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80029b2:	3301      	adds	r3, #1
 80029b4:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
				conn->last_keepalive = get_tick();
 80029b8:	f7ff fd5a 	bl	8002470 <_Z8get_tickv>
 80029bc:	60a0      	str	r0, [r4, #8]
 80029be:	e7af      	b.n	8002920 <_Z14NET_TCP_Timersv+0x3c>
					NET_TCP_ClientRemove(idx);
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7ff fdc3 	bl	800254c <_Z20NET_TCP_ClientRemoveh>
					continue;
 80029c6:	e7ab      	b.n	8002920 <_Z14NET_TCP_Timersv+0x3c>
}
 80029c8:	b004      	add	sp, #16
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	20001a16 	.word	0x20001a16
 80029d0:	20001a24 	.word	0x20001a24
 80029d4:	20001a18 	.word	0x20001a18

080029d8 <_Z14NET_ProcessTCPP10ipv4_frame>:
void NET_ProcessTCP(ipv4_frame *frame) {
 80029d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029dc:	b087      	sub	sp, #28
 80029de:	4607      	mov	r7, r0
			reinterpret_cast<tcp_hdr_t*>((&frame->ip_hdr[frame->ip_hdr_len]));
 80029e0:	6902      	ldr	r2, [r0, #16]
 80029e2:	7903      	ldrb	r3, [r0, #4]
	tcp_hdr_t *tcp =
 80029e4:	eb02 0803 	add.w	r8, r2, r3
	uint8_t client_flags = tcp->flags;
 80029e8:	f898 b00d 	ldrb.w	fp, [r8, #13]
	uint16_t client_window = bswap16(tcp->window);
 80029ec:	f8b8 100e 	ldrh.w	r1, [r8, #14]
 80029f0:	ba49      	rev16	r1, r1
 80029f2:	f8ad 1014 	strh.w	r1, [sp, #20]
	uint16_t client_port = bswap16(tcp->src_port);
 80029f6:	f832 a003 	ldrh.w	sl, [r2, r3]
 80029fa:	fa9a fa9a 	rev16.w	sl, sl
 80029fe:	fa1f f98a 	uxth.w	r9, sl
	uint16_t server_port = bswap16(tcp->dst_port);
 8002a02:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8002a06:	ba5b      	rev16	r3, r3
 8002a08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002a0c:	b29d      	uxth	r5, r3
	uint32_t client_ip = BuffU8ToU32(frame->scr_addr);
 8002a0e:	68c3      	ldr	r3, [r0, #12]
	return ((x[0] << 24) | (x[1] << 16) | (x[2] << 8) | x[3]);
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	785c      	ldrb	r4, [r3, #1]
 8002a14:	0424      	lsls	r4, r4, #16
 8002a16:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
 8002a1a:	789a      	ldrb	r2, [r3, #2]
 8002a1c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8002a20:	78db      	ldrb	r3, [r3, #3]
 8002a22:	431c      	orrs	r4, r3
	uint32_t client_seq = bswap32(tcp->seq_num);
 8002a24:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return ((x & 0x000000FFUL) << 24) | ((x & 0x0000FF00UL) << 8)
 8002a28:	021e      	lsls	r6, r3, #8
 8002a2a:	f406 067f 	and.w	r6, r6, #16711680	@ 0xff0000
 8002a2e:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
			| ((x & 0x00FF0000UL) >> 8) | ((x & 0xFF000000UL) >> 24);
 8002a32:	0a1a      	lsrs	r2, r3, #8
 8002a34:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8002a38:	4316      	orrs	r6, r2
 8002a3a:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
	uint32_t client_ack = bswap32(tcp->ack_num);
 8002a3e:	f8d8 1008 	ldr.w	r1, [r8, #8]
	return ((x & 0x000000FFUL) << 24) | ((x & 0x0000FF00UL) << 8)
 8002a42:	020a      	lsls	r2, r1, #8
 8002a44:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8002a48:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
			| ((x & 0x00FF0000UL) >> 8) | ((x & 0xFF000000UL) >> 24);
 8002a4c:	0a0b      	lsrs	r3, r1, #8
 8002a4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002a52:	4313      	orrs	r3, r2
 8002a54:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002a58:	9304      	str	r3, [sp, #16]
	for (int i = 0; i < active_conn; i++) {
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	e008      	b.n	8002a70 <_Z14NET_ProcessTCPP10ipv4_frame+0x98>
		} else if (tcp_clients[idx].server_port == server_port) {
 8002a5e:	4baa      	ldr	r3, [pc, #680]	@ (8002d08 <_Z14NET_ProcessTCPP10ipv4_frame+0x330>)
 8002a60:	f641 01f0 	movw	r1, #6384	@ 0x18f0
 8002a64:	fb01 3300 	mla	r3, r1, r0, r3
 8002a68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a6a:	42ab      	cmp	r3, r5
 8002a6c:	d026      	beq.n	8002abc <_Z14NET_ProcessTCPP10ipv4_frame+0xe4>
	for (int i = 0; i < active_conn; i++) {
 8002a6e:	3201      	adds	r2, #1
 8002a70:	4ba6      	ldr	r3, [pc, #664]	@ (8002d0c <_Z14NET_ProcessTCPP10ipv4_frame+0x334>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4293      	cmp	r3, r2
 8002a76:	dd2e      	ble.n	8002ad6 <_Z14NET_ProcessTCPP10ipv4_frame+0xfe>
		uint8_t idx = active_list[i];
 8002a78:	4ba5      	ldr	r3, [pc, #660]	@ (8002d10 <_Z14NET_ProcessTCPP10ipv4_frame+0x338>)
 8002a7a:	5c98      	ldrb	r0, [r3, r2]
		if (tcp_clients[idx].client_ip == client_ip
 8002a7c:	4ba2      	ldr	r3, [pc, #648]	@ (8002d08 <_Z14NET_ProcessTCPP10ipv4_frame+0x330>)
 8002a7e:	f641 01f0 	movw	r1, #6384	@ 0x18f0
 8002a82:	fb01 3300 	mla	r3, r1, r0, r3
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	42a3      	cmp	r3, r4
 8002a8a:	d1e8      	bne.n	8002a5e <_Z14NET_ProcessTCPP10ipv4_frame+0x86>
				&& tcp_clients[idx].client_port == client_port
 8002a8c:	4b9e      	ldr	r3, [pc, #632]	@ (8002d08 <_Z14NET_ProcessTCPP10ipv4_frame+0x330>)
 8002a8e:	fb01 3300 	mla	r3, r1, r0, r3
 8002a92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a94:	454b      	cmp	r3, r9
 8002a96:	d1e2      	bne.n	8002a5e <_Z14NET_ProcessTCPP10ipv4_frame+0x86>
				&& tcp_clients[idx].server_port == server_port) {
 8002a98:	4b9b      	ldr	r3, [pc, #620]	@ (8002d08 <_Z14NET_ProcessTCPP10ipv4_frame+0x330>)
 8002a9a:	fb01 3300 	mla	r3, r1, r0, r3
 8002a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002aa0:	42ab      	cmp	r3, r5
 8002aa2:	d1dc      	bne.n	8002a5e <_Z14NET_ProcessTCPP10ipv4_frame+0x86>
			conn = &tcp_clients[idx];
 8002aa4:	4c98      	ldr	r4, [pc, #608]	@ (8002d08 <_Z14NET_ProcessTCPP10ipv4_frame+0x330>)
 8002aa6:	fb01 4400 	mla	r4, r1, r0, r4
			conn->client_window = client_window;
 8002aaa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8002aae:	8563      	strh	r3, [r4, #42]	@ 0x2a
			if (client_flags & TCP_RST) {
 8002ab0:	f01b 0f04 	tst.w	fp, #4
 8002ab4:	d013      	beq.n	8002ade <_Z14NET_ProcessTCPP10ipv4_frame+0x106>
				NET_TCP_ClientRemove(idx);
 8002ab6:	f7ff fd49 	bl	800254c <_Z20NET_TCP_ClientRemoveh>
				return;
 8002aba:	e009      	b.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
			NET_SendTCP_RST(frame, server_port, client_port, 0, client_seq + 1,
 8002abc:	2304      	movs	r3, #4
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	3601      	adds	r6, #1
 8002ac2:	9600      	str	r6, [sp, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	464a      	mov	r2, r9
 8002ac8:	4629      	mov	r1, r5
 8002aca:	4638      	mov	r0, r7
 8002acc:	f7ff fd72 	bl	80025b4 <_Z15NET_SendTCP_RSTP10ipv4_framettmmh>
}
 8002ad0:	b007      	add	sp, #28
 8002ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn && (client_flags & TCP_SYN)) {
 8002ad6:	f01b 0f02 	tst.w	fp, #2
 8002ada:	d10e      	bne.n	8002afa <_Z14NET_ProcessTCPP10ipv4_frame+0x122>
 8002adc:	2400      	movs	r4, #0
	if (!conn)
 8002ade:	2c00      	cmp	r4, #0
 8002ae0:	d0f6      	beq.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
	switch (conn->state) {
 8002ae2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d8f1      	bhi.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
 8002aec:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002af0:	00750050 	.word	0x00750050
 8002af4:	011200e1 	.word	0x011200e1
 8002af8:	012a      	.short	0x012a
		int num = NET_TCP_ClientAdd();
 8002afa:	f7ff fd05 	bl	8002508 <_Z17NET_TCP_ClientAddv>
		if (num == -1) {
 8002afe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b02:	d10b      	bne.n	8002b1c <_Z14NET_ProcessTCPP10ipv4_frame+0x144>
			NET_SendTCP_RST(frame, server_port, client_port, 0, client_seq + 1,
 8002b04:	2314      	movs	r3, #20
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	1c73      	adds	r3, r6, #1
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	464a      	mov	r2, r9
 8002b10:	4629      	mov	r1, r5
 8002b12:	4638      	mov	r0, r7
 8002b14:	f7ff fd4e 	bl	80025b4 <_Z15NET_SendTCP_RSTP10ipv4_framettmmh>
 8002b18:	2400      	movs	r4, #0
 8002b1a:	e7e0      	b.n	8002ade <_Z14NET_ProcessTCPP10ipv4_frame+0x106>
			conn = &tcp_clients[num];
 8002b1c:	f641 08f0 	movw	r8, #6384	@ 0x18f0
 8002b20:	fb08 f800 	mul.w	r8, r8, r0
 8002b24:	f8df 91e0 	ldr.w	r9, [pc, #480]	@ 8002d08 <_Z14NET_ProcessTCPP10ipv4_frame+0x330>
 8002b28:	eb08 0509 	add.w	r5, r8, r9
			conn->socket_tag = static_cast<uint8_t>(num);
 8002b2c:	f885 0035 	strb.w	r0, [r5, #53]	@ 0x35
			conn->client_ip = client_ip;
 8002b30:	61ec      	str	r4, [r5, #28]
			conn->last_activity = get_tick();
 8002b32:	f7ff fc9d 	bl	8002470 <_Z8get_tickv>
 8002b36:	6068      	str	r0, [r5, #4]
			memcpy(conn->client_mac, frame->scr_mac, MAC_ADDR_LEN);
 8002b38:	f108 0330 	add.w	r3, r8, #48	@ 0x30
 8002b3c:	444b      	add	r3, r9
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	6811      	ldr	r1, [r2, #0]
 8002b42:	f8c3 1007 	str.w	r1, [r3, #7]
 8002b46:	8892      	ldrh	r2, [r2, #4]
 8002b48:	f8a3 200b 	strh.w	r2, [r3, #11]
			conn->client_port = client_port;
 8002b4c:	f8a5 a02c 	strh.w	sl, [r5, #44]	@ 0x2c
			conn->server_port = server_port;
 8002b50:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8002b54:	85eb      	strh	r3, [r5, #46]	@ 0x2e
			conn->tcp_client_seq = client_seq;
 8002b56:	60ee      	str	r6, [r5, #12]
			conn->rcv_next = client_seq + 1;		//syn +1 my_seq
 8002b58:	1c72      	adds	r2, r6, #1
 8002b5a:	626a      	str	r2, [r5, #36]	@ 0x24
			conn->client_window = client_window;
 8002b5c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8002b60:	856b      	strh	r3, [r5, #42]	@ 0x2a
			conn->window_size = SOCKET_RX_BUFF_LEN;
 8002b62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b66:	852b      	strh	r3, [r5, #40]	@ 0x28
			conn->tcp_my_seq = SysTick->VAL; // @suppress("Field cannot be resolved")
 8002b68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002b6c:	6999      	ldr	r1, [r3, #24]
 8002b6e:	6169      	str	r1, [r5, #20]
			conn->snd_unack = conn->tcp_my_seq;
 8002b70:	6229      	str	r1, [r5, #32]
			conn->state = tcp_state_t::TCP_SYN_RCVD;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
			NET_SendTCP(conn, conn->tcp_my_seq, conn->rcv_next,
 8002b78:	2000      	movs	r0, #0
 8002b7a:	9002      	str	r0, [sp, #8]
 8002b7c:	9001      	str	r0, [sp, #4]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2312      	movs	r3, #18
 8002b82:	4628      	mov	r0, r5
 8002b84:	f7ff fdfe 	bl	8002784 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht>
			conn->tcp_my_seq += 1;
 8002b88:	696b      	ldr	r3, [r5, #20]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	616b      	str	r3, [r5, #20]
			return;
 8002b8e:	e79f      	b.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
		if (client_flags & TCP_ACK) {
 8002b90:	f01b 0f10 	tst.w	fp, #16
 8002b94:	d015      	beq.n	8002bc2 <_Z14NET_ProcessTCPP10ipv4_frame+0x1ea>
			if ((client_ack == conn->tcp_my_seq)
 8002b96:	6963      	ldr	r3, [r4, #20]
 8002b98:	9a04      	ldr	r2, [sp, #16]
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d198      	bne.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
					&& (client_seq == conn->rcv_next)) {
 8002b9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ba0:	42b3      	cmp	r3, r6
 8002ba2:	d195      	bne.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
				conn->last_activity = get_tick();
 8002ba4:	f7ff fc64 	bl	8002470 <_Z8get_tickv>
 8002ba8:	6060      	str	r0, [r4, #4]
				conn->snd_unack = client_ack;
 8002baa:	9b04      	ldr	r3, [sp, #16]
 8002bac:	6223      	str	r3, [r4, #32]
				conn->keep_alive_count = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
				conn->retransmit_timer = 0;
 8002bb4:	6123      	str	r3, [r4, #16]
				conn->retransmit_count = 0;
 8002bb6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
				conn->soc_tx_buff_pos = 0;
 8002bba:	8663      	strh	r3, [r4, #50]	@ 0x32
				conn->state = tcp_state_t::TCP_ESTABLISHED;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
		if ((client_flags & TCP_SYN) && client_seq + 1 == conn->rcv_next)
 8002bc2:	f01b 0f02 	tst.w	fp, #2
 8002bc6:	d083      	beq.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
 8002bc8:	3601      	adds	r6, #1
 8002bca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002bcc:	429e      	cmp	r6, r3
 8002bce:	f47f af7f 	bne.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
			NET_SendRetransmitTCP(conn);
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f7ff fd84 	bl	80026e0 <_Z21NET_SendRetransmitTCPP10tcp_conn_t>
 8002bd8:	e77a      	b.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
	conn->last_activity = get_tick();
 8002bda:	f7ff fc49 	bl	8002470 <_Z8get_tickv>
 8002bde:	6060      	str	r0, [r4, #4]
	conn->keep_alive_count = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
	if ((client_ack <= conn->tcp_my_seq) && (client_seq == conn->rcv_next)) {
 8002be6:	6963      	ldr	r3, [r4, #20]
 8002be8:	9a04      	ldr	r2, [sp, #16]
 8002bea:	4293      	cmp	r3, r2
 8002bec:	f4ff af70 	bcc.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
 8002bf0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002bf2:	42b2      	cmp	r2, r6
 8002bf4:	f47f af6c 	bne.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
		if (client_flags & TCP_FIN) {
 8002bf8:	f01b 0f01 	tst.w	fp, #1
 8002bfc:	d13d      	bne.n	8002c7a <_Z14NET_ProcessTCPP10ipv4_frame+0x2a2>
		} else if (client_flags & TCP_ACK) {
 8002bfe:	f01b 0f10 	tst.w	fp, #16
 8002c02:	f43f af65 	beq.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
			if (client_ack > conn->snd_unack)
 8002c06:	6a23      	ldr	r3, [r4, #32]
 8002c08:	9a04      	ldr	r2, [sp, #16]
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d200      	bcs.n	8002c10 <_Z14NET_ProcessTCPP10ipv4_frame+0x238>
				conn->snd_unack = client_ack;
 8002c0e:	6222      	str	r2, [r4, #32]
			conn->soc_tx_buff_pos = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	8663      	strh	r3, [r4, #50]	@ 0x32
			conn->retransmit_timer = 0;
 8002c14:	6123      	str	r3, [r4, #16]
			conn->retransmit_count = 0;
 8002c16:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
			uint16_t hdr_len = (tcp->offset_reserved >> 4) * 4;
 8002c1a:	f898 200c 	ldrb.w	r2, [r8, #12]
 8002c1e:	0912      	lsrs	r2, r2, #4
 8002c20:	0091      	lsls	r1, r2, #2
			uint16_t data_len = (uint16_t)(frame->ip_len - frame->ip_hdr_len - hdr_len);
 8002c22:	883b      	ldrh	r3, [r7, #0]
 8002c24:	7938      	ldrb	r0, [r7, #4]
 8002c26:	1a1b      	subs	r3, r3, r0
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8002c2e:	b29b      	uxth	r3, r3
			if (data_len > 0) {
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f43f af4d 	beq.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
				uint8_t *payload = (uint8_t*) tcp + hdr_len;
 8002c36:	4441      	add	r1, r8
						- conn->soc_rx_buff_pos;
 8002c38:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
				uint16_t free_space = SOCKET_RX_BUFF_LEN
 8002c3a:	f5c2 55a0 	rsb	r5, r2, #5120	@ 0x1400
 8002c3e:	b2ad      	uxth	r5, r5
						(data_len <= free_space) ? data_len : free_space;
 8002c40:	42ab      	cmp	r3, r5
 8002c42:	d800      	bhi.n	8002c46 <_Z14NET_ProcessTCPP10ipv4_frame+0x26e>
 8002c44:	461d      	mov	r5, r3
				memcpy(&conn->socket_rx_buff[conn->soc_rx_buff_pos], payload,
 8002c46:	3238      	adds	r2, #56	@ 0x38
 8002c48:	18a0      	adds	r0, r4, r2
 8002c4a:	462a      	mov	r2, r5
 8002c4c:	3006      	adds	r0, #6
 8002c4e:	f000 fedd 	bl	8003a0c <memcpy>
				conn->soc_rx_buff_pos += copy_len;
 8002c52:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8002c54:	442b      	add	r3, r5
 8002c56:	8623      	strh	r3, [r4, #48]	@ 0x30
				conn->rcv_next += copy_len;
 8002c58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c5a:	18ea      	adds	r2, r5, r3
 8002c5c:	6262      	str	r2, [r4, #36]	@ 0x24
				conn->window_size = SOCKET_RX_BUFF_LEN - conn->soc_rx_buff_pos;
 8002c5e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8002c60:	f5c3 53a0 	rsb	r3, r3, #5120	@ 0x1400
 8002c64:	8523      	strh	r3, [r4, #40]	@ 0x28
				NET_SendTCP(conn, conn->tcp_my_seq, conn->rcv_next,
 8002c66:	6961      	ldr	r1, [r4, #20]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2310      	movs	r3, #16
 8002c72:	4620      	mov	r0, r4
 8002c74:	f7ff fd86 	bl	8002784 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht>
 8002c78:	e72a      	b.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
			conn->rcv_next += 1;
 8002c7a:	3201      	adds	r2, #1
 8002c7c:	6262      	str	r2, [r4, #36]	@ 0x24
			NET_SendTCP(conn, conn->tcp_my_seq, conn->rcv_next,
 8002c7e:	4619      	mov	r1, r3
 8002c80:	2500      	movs	r5, #0
 8002c82:	9502      	str	r5, [sp, #8]
 8002c84:	9501      	str	r5, [sp, #4]
 8002c86:	9500      	str	r5, [sp, #0]
 8002c88:	2310      	movs	r3, #16
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f7ff fd7a 	bl	8002784 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht>
			NET_SendTCP(conn, conn->tcp_my_seq, conn->rcv_next,
 8002c90:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002c92:	6961      	ldr	r1, [r4, #20]
 8002c94:	9502      	str	r5, [sp, #8]
 8002c96:	9501      	str	r5, [sp, #4]
 8002c98:	2301      	movs	r3, #1
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2311      	movs	r3, #17
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7ff fd70 	bl	8002784 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht>
			conn->tcp_my_seq += 1;
 8002ca4:	6963      	ldr	r3, [r4, #20]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	6163      	str	r3, [r4, #20]
			conn->state = tcp_state_t::TCP_LAST_ACK;
 8002caa:	2305      	movs	r3, #5
 8002cac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 8002cb0:	e70e      	b.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
		if ((client_flags & TCP_ACK) && (client_ack == conn->tcp_my_seq)) {
 8002cb2:	f01b 0f10 	tst.w	fp, #16
 8002cb6:	f43f af0b 	beq.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
 8002cba:	6963      	ldr	r3, [r4, #20]
 8002cbc:	9a04      	ldr	r2, [sp, #16]
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	f47f af06 	bne.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
			conn->last_activity = get_tick();
 8002cc4:	f7ff fbd4 	bl	8002470 <_Z8get_tickv>
 8002cc8:	6060      	str	r0, [r4, #4]
			conn->keep_alive_count = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
			conn->soc_tx_buff_pos  = 0;
 8002cd0:	8663      	strh	r3, [r4, #50]	@ 0x32
			conn->retransmit_timer = 0;
 8002cd2:	6123      	str	r3, [r4, #16]
			conn->retransmit_count = 0;
 8002cd4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
			if (client_flags & TCP_FIN) {
 8002cd8:	f01b 0f01 	tst.w	fp, #1
 8002cdc:	d103      	bne.n	8002ce6 <_Z14NET_ProcessTCPP10ipv4_frame+0x30e>
			conn->state = tcp_state_t::TCP_FIN_WAIT_2;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 8002ce4:	e6f4      	b.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
				conn->rcv_next++;
 8002ce6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002ce8:	3201      	adds	r2, #1
 8002cea:	6262      	str	r2, [r4, #36]	@ 0x24
				NET_SendTCP(conn, conn->tcp_my_seq, conn->rcv_next,
 8002cec:	6961      	ldr	r1, [r4, #20]
 8002cee:	9302      	str	r3, [sp, #8]
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7ff fd44 	bl	8002784 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht>
				NET_TCP_ClientRemove(conn->socket_tag);
 8002cfc:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8002d00:	f7ff fc24 	bl	800254c <_Z20NET_TCP_ClientRemoveh>
				return;
 8002d04:	e6e4      	b.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
 8002d06:	bf00      	nop
 8002d08:	20001a24 	.word	0x20001a24
 8002d0c:	20001a16 	.word	0x20001a16
 8002d10:	20001a18 	.word	0x20001a18
	if ((client_flags & TCP_FIN) && (client_seq == conn->rcv_next)) {
 8002d14:	f01b 0f01 	tst.w	fp, #1
 8002d18:	f43f aeda 	beq.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
 8002d1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002d1e:	42b2      	cmp	r2, r6
 8002d20:	f47f aed6 	bne.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
		conn->rcv_next += 1;
 8002d24:	3201      	adds	r2, #1
 8002d26:	6262      	str	r2, [r4, #36]	@ 0x24
		NET_SendTCP(conn, conn->tcp_my_seq, conn->rcv_next, TCP_ACK,
 8002d28:	6961      	ldr	r1, [r4, #20]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9302      	str	r3, [sp, #8]
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2310      	movs	r3, #16
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7ff fd25 	bl	8002784 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht>
		NET_TCP_ClientRemove(conn->socket_tag);
 8002d3a:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8002d3e:	f7ff fc05 	bl	800254c <_Z20NET_TCP_ClientRemoveh>
		return;
 8002d42:	e6c5      	b.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
	if ((client_flags & TCP_ACK) && (client_ack == conn->tcp_my_seq)
 8002d44:	f01b 0f10 	tst.w	fp, #16
 8002d48:	f43f aec2 	beq.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
 8002d4c:	6963      	ldr	r3, [r4, #20]
 8002d4e:	9a04      	ldr	r2, [sp, #16]
 8002d50:	4293      	cmp	r3, r2
 8002d52:	f47f aebd 	bne.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
			&& (client_seq == conn->rcv_next)) {
 8002d56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d58:	42b3      	cmp	r3, r6
 8002d5a:	f47f aeb9 	bne.w	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>
		NET_TCP_ClientRemove(conn->socket_tag);
 8002d5e:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8002d62:	f7ff fbf3 	bl	800254c <_Z20NET_TCP_ClientRemoveh>
		return;
 8002d66:	e6b3      	b.n	8002ad0 <_Z14NET_ProcessTCPP10ipv4_frame+0xf8>

08002d68 <_Z16NET_TCP_SendUserP10tcp_conn_tPKht>:
if (conn->state != tcp_state_t::TCP_ESTABLISHED)
 8002d68:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d115      	bne.n	8002d9c <_Z16NET_TCP_SendUserP10tcp_conn_tPKht+0x34>
int NET_TCP_SendUser(tcp_conn_t *conn, const uint8_t *data, uint16_t len) {
 8002d70:	b530      	push	{r4, r5, lr}
 8002d72:	b085      	sub	sp, #20
 8002d74:	4604      	mov	r4, r0
 8002d76:	4615      	mov	r5, r2
if (len > conn->window_size)
 8002d78:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d311      	bcc.n	8002da2 <_Z16NET_TCP_SendUserP10tcp_conn_tPKht+0x3a>
NET_SendTCP(conn, conn->tcp_my_seq, conn->rcv_next, TCP_ACK | TCP_PSH,
 8002d7e:	9202      	str	r2, [sp, #8]
 8002d80:	9101      	str	r1, [sp, #4]
 8002d82:	2301      	movs	r3, #1
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2318      	movs	r3, #24
 8002d88:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002d8a:	6941      	ldr	r1, [r0, #20]
 8002d8c:	f7ff fcfa 	bl	8002784 <_Z11NET_SendTCPP10tcp_conn_tmmhhPKht>
conn->tcp_my_seq += len;
 8002d90:	6963      	ldr	r3, [r4, #20]
 8002d92:	442b      	add	r3, r5
 8002d94:	6163      	str	r3, [r4, #20]
return 0;
 8002d96:	2000      	movs	r0, #0
}
 8002d98:	b005      	add	sp, #20
 8002d9a:	bd30      	pop	{r4, r5, pc}
	return -1;
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002da0:	4770      	bx	lr
	return -1;
 8002da2:	f04f 30ff 	mov.w	r0, #4294967295
 8002da6:	e7f7      	b.n	8002d98 <_Z16NET_TCP_SendUserP10tcp_conn_tPKht+0x30>

08002da8 <_GLOBAL__sub_I_TCPsendFrameTemplate>:
}
 8002da8:	b508      	push	{r3, lr}
 8002daa:	f7ff fb67 	bl	800247c <_Z41__static_initialization_and_destruction_0v>
 8002dae:	bd08      	pop	{r3, pc}

08002db0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002db0:	e7fe      	b.n	8002db0 <NMI_Handler>

08002db2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <HardFault_Handler>

08002db4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <MemManage_Handler>

08002db6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <BusFault_Handler>

08002db8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <UsageFault_Handler>

08002dba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dba:	4770      	bx	lr

08002dbc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dbc:	4770      	bx	lr

08002dbe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dbe:	4770      	bx	lr

08002dc0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	4770      	bx	lr

08002dc4 <_kill>:

int _kill(int pid, int sig)
{
 8002dc4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dc6:	f000 fdf5 	bl	80039b4 <__errno>
 8002dca:	2316      	movs	r3, #22
 8002dcc:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002dce:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd2:	bd08      	pop	{r3, pc}

08002dd4 <_exit>:

void _exit (int status)
{
 8002dd4:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8002dda:	f7ff fff3 	bl	8002dc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dde:	e7fe      	b.n	8002dde <_exit+0xa>

08002de0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de0:	4a03      	ldr	r2, [pc, #12]	@ (8002df0 <SystemInit+0x10>)
 8002de2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002de6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, pllvco, pllp, pllsource, pllm;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002df4:	4b22      	ldr	r3, [pc, #136]	@ (8002e80 <SystemCoreClockUpdate+0x8c>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d011      	beq.n	8002e24 <SystemCoreClockUpdate+0x30>
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d013      	beq.n	8002e2c <SystemCoreClockUpdate+0x38>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d137      	bne.n	8002e78 <SystemCoreClockUpdate+0x84>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002e08:	4b1e      	ldr	r3, [pc, #120]	@ (8002e84 <SystemCoreClockUpdate+0x90>)
 8002e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002e88 <SystemCoreClockUpdate+0x94>)
 8002e0c:	601a      	str	r2, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e80 <SystemCoreClockUpdate+0x8c>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e16:	4a1d      	ldr	r2, [pc, #116]	@ (8002e8c <SystemCoreClockUpdate+0x98>)
 8002e18:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e84 <SystemCoreClockUpdate+0x90>)
 8002e1c:	6813      	ldr	r3, [r2, #0]
 8002e1e:	40cb      	lsrs	r3, r1
 8002e20:	6013      	str	r3, [r2, #0]
}
 8002e22:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
 8002e24:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <SystemCoreClockUpdate+0x90>)
 8002e26:	4a1a      	ldr	r2, [pc, #104]	@ (8002e90 <SystemCoreClockUpdate+0x9c>)
 8002e28:	601a      	str	r2, [r3, #0]
      break;
 8002e2a:	e7f0      	b.n	8002e0e <SystemCoreClockUpdate+0x1a>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <SystemCoreClockUpdate+0x8c>)
 8002e2e:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (pllsource != 0)
 8002e36:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8002e3a:	d013      	beq.n	8002e64 <SystemCoreClockUpdate+0x70>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002e3c:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <SystemCoreClockUpdate+0x9c>)
 8002e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e42:	4a0f      	ldr	r2, [pc, #60]	@ (8002e80 <SystemCoreClockUpdate+0x8c>)
 8002e44:	6852      	ldr	r2, [r2, #4]
 8002e46:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e80 <SystemCoreClockUpdate+0x8c>)
 8002e50:	6852      	ldr	r2, [r2, #4]
 8002e52:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8002e56:	3201      	adds	r2, #1
 8002e58:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 8002e5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e5e:	4a09      	ldr	r2, [pc, #36]	@ (8002e84 <SystemCoreClockUpdate+0x90>)
 8002e60:	6013      	str	r3, [r2, #0]
      break;
 8002e62:	e7d4      	b.n	8002e0e <SystemCoreClockUpdate+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002e64:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <SystemCoreClockUpdate+0x94>)
 8002e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e6a:	4a05      	ldr	r2, [pc, #20]	@ (8002e80 <SystemCoreClockUpdate+0x8c>)
 8002e6c:	6852      	ldr	r2, [r2, #4]
 8002e6e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	e7ea      	b.n	8002e4e <SystemCoreClockUpdate+0x5a>
      SystemCoreClock = HSI_VALUE;
 8002e78:	4b02      	ldr	r3, [pc, #8]	@ (8002e84 <SystemCoreClockUpdate+0x90>)
 8002e7a:	4a03      	ldr	r2, [pc, #12]	@ (8002e88 <SystemCoreClockUpdate+0x94>)
 8002e7c:	601a      	str	r2, [r3, #0]
      break;
 8002e7e:	e7c6      	b.n	8002e0e <SystemCoreClockUpdate+0x1a>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	200000d8 	.word	0x200000d8
 8002e88:	00f42400 	.word	0x00f42400
 8002e8c:	08003ae0 	.word	0x08003ae0
 8002e90:	007a1200 	.word	0x007a1200

08002e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ecc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e98:	f7ff ffa2 	bl	8002de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e9c:	480c      	ldr	r0, [pc, #48]	@ (8002ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e9e:	490d      	ldr	r1, [pc, #52]	@ (8002ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea4:	e002      	b.n	8002eac <LoopCopyDataInit>

08002ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eaa:	3304      	adds	r3, #4

08002eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb0:	d3f9      	bcc.n	8002ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb8:	e001      	b.n	8002ebe <LoopFillZerobss>

08002eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ebc:	3204      	adds	r2, #4

08002ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec0:	d3fb      	bcc.n	8002eba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ec2:	f000 fd7d 	bl	80039c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ec6:	f7fe fc33 	bl	8001730 <main>
  bx  lr    
 8002eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ecc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed4:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002ed8:	08003de8 	.word	0x08003de8
  ldr r2, =_sbss
 8002edc:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8002ee0:	200114d4 	.word	0x200114d4

08002ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee4:	e7fe      	b.n	8002ee4 <ADC_IRQHandler>

08002ee6 <__cxa_end_cleanup>:
 8002ee6:	b41e      	push	{r1, r2, r3, r4}
 8002ee8:	f000 f88f 	bl	800300a <__gnu_end_cleanup>
 8002eec:	bc1e      	pop	{r1, r2, r3, r4}
 8002eee:	f7fd ff5f 	bl	8000db0 <_Unwind_Resume>

08002ef2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8002ef2:	7803      	ldrb	r3, [r0, #0]
 8002ef4:	2b47      	cmp	r3, #71	@ 0x47
 8002ef6:	d117      	bne.n	8002f28 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002ef8:	7843      	ldrb	r3, [r0, #1]
 8002efa:	2b4e      	cmp	r3, #78	@ 0x4e
 8002efc:	d114      	bne.n	8002f28 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002efe:	7883      	ldrb	r3, [r0, #2]
 8002f00:	2b55      	cmp	r3, #85	@ 0x55
 8002f02:	d111      	bne.n	8002f28 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002f04:	78c3      	ldrb	r3, [r0, #3]
 8002f06:	2b43      	cmp	r3, #67	@ 0x43
 8002f08:	d10e      	bne.n	8002f28 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002f0a:	7903      	ldrb	r3, [r0, #4]
 8002f0c:	2b43      	cmp	r3, #67	@ 0x43
 8002f0e:	d10b      	bne.n	8002f28 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002f10:	7943      	ldrb	r3, [r0, #5]
 8002f12:	2b2b      	cmp	r3, #43	@ 0x2b
 8002f14:	d108      	bne.n	8002f28 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002f16:	7983      	ldrb	r3, [r0, #6]
 8002f18:	2b2b      	cmp	r3, #43	@ 0x2b
 8002f1a:	d105      	bne.n	8002f28 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002f1c:	79c0      	ldrb	r0, [r0, #7]
 8002f1e:	2801      	cmp	r0, #1
 8002f20:	bf8c      	ite	hi
 8002f22:	2000      	movhi	r0, #0
 8002f24:	2001      	movls	r0, #1
 8002f26:	4770      	bx	lr
 8002f28:	2000      	movs	r0, #0
 8002f2a:	4770      	bx	lr

08002f2c <__cxa_type_match>:
 8002f2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002f30:	461f      	mov	r7, r3
 8002f32:	7803      	ldrb	r3, [r0, #0]
 8002f34:	79c4      	ldrb	r4, [r0, #7]
 8002f36:	2b47      	cmp	r3, #71	@ 0x47
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460d      	mov	r5, r1
 8002f3c:	d112      	bne.n	8002f64 <__cxa_type_match+0x38>
 8002f3e:	7843      	ldrb	r3, [r0, #1]
 8002f40:	2b4e      	cmp	r3, #78	@ 0x4e
 8002f42:	d10f      	bne.n	8002f64 <__cxa_type_match+0x38>
 8002f44:	7883      	ldrb	r3, [r0, #2]
 8002f46:	2b55      	cmp	r3, #85	@ 0x55
 8002f48:	d10c      	bne.n	8002f64 <__cxa_type_match+0x38>
 8002f4a:	78c3      	ldrb	r3, [r0, #3]
 8002f4c:	2b43      	cmp	r3, #67	@ 0x43
 8002f4e:	d109      	bne.n	8002f64 <__cxa_type_match+0x38>
 8002f50:	7903      	ldrb	r3, [r0, #4]
 8002f52:	2b46      	cmp	r3, #70	@ 0x46
 8002f54:	d106      	bne.n	8002f64 <__cxa_type_match+0x38>
 8002f56:	7943      	ldrb	r3, [r0, #5]
 8002f58:	2b4f      	cmp	r3, #79	@ 0x4f
 8002f5a:	d103      	bne.n	8002f64 <__cxa_type_match+0x38>
 8002f5c:	7983      	ldrb	r3, [r0, #6]
 8002f5e:	2b52      	cmp	r3, #82	@ 0x52
 8002f60:	d100      	bne.n	8002f64 <__cxa_type_match+0x38>
 8002f62:	b1f4      	cbz	r4, 8002fa2 <__cxa_type_match+0x76>
 8002f64:	4610      	mov	r0, r2
 8002f66:	f7ff ffc4 	bl	8002ef2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	b9d8      	cbnz	r0, 8002fa8 <__cxa_type_match+0x7c>
 8002f70:	4c15      	ldr	r4, [pc, #84]	@ (8002fc8 <__cxa_type_match+0x9c>)
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	4620      	mov	r0, r4
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4798      	blx	r3
 8002f7a:	b300      	cbz	r0, 8002fbe <__cxa_type_match+0x92>
 8002f7c:	9b01      	ldr	r3, [sp, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2602      	movs	r6, #2
 8002f84:	682b      	ldr	r3, [r5, #0]
 8002f86:	aa01      	add	r2, sp, #4
 8002f88:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4628      	mov	r0, r5
 8002f92:	47c0      	blx	r8
 8002f94:	b1a8      	cbz	r0, 8002fc2 <__cxa_type_match+0x96>
 8002f96:	9b01      	ldr	r3, [sp, #4]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	b002      	add	sp, #8
 8002f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa2:	9401      	str	r4, [sp, #4]
 8002fa4:	4c09      	ldr	r4, [pc, #36]	@ (8002fcc <__cxa_type_match+0xa0>)
 8002fa6:	e7e4      	b.n	8002f72 <__cxa_type_match+0x46>
 8002fa8:	f852 1c20 	ldr.w	r1, [r2, #-32]
 8002fac:	2c01      	cmp	r4, #1
 8002fae:	bf1a      	itte	ne
 8002fb0:	460c      	movne	r4, r1
 8002fb2:	f102 0158 	addne.w	r1, r2, #88	@ 0x58
 8002fb6:	f851 4c78 	ldreq.w	r4, [r1, #-120]
 8002fba:	9101      	str	r1, [sp, #4]
 8002fbc:	e7d9      	b.n	8002f72 <__cxa_type_match+0x46>
 8002fbe:	2601      	movs	r6, #1
 8002fc0:	e7e0      	b.n	8002f84 <__cxa_type_match+0x58>
 8002fc2:	4606      	mov	r6, r0
 8002fc4:	e7e9      	b.n	8002f9a <__cxa_type_match+0x6e>
 8002fc6:	bf00      	nop
 8002fc8:	08003b3c 	.word	0x08003b3c
 8002fcc:	08003b10 	.word	0x08003b10

08002fd0 <__cxa_begin_cleanup>:
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	f000 f832 	bl	800303c <__cxa_get_globals>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f1a4 0120 	sub.w	r1, r4, #32
 8002fe0:	f7ff ff87 	bl	8002ef2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8002fe4:	b160      	cbz	r0, 8003000 <__cxa_begin_cleanup+0x30>
 8002fe6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002fea:	3301      	adds	r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f844 3c04 	str.w	r3, [r4, #-4]
 8002ff2:	d103      	bne.n	8002ffc <__cxa_begin_cleanup+0x2c>
 8002ff4:	6893      	ldr	r3, [r2, #8]
 8002ff6:	f844 3c08 	str.w	r3, [r4, #-8]
 8002ffa:	6091      	str	r1, [r2, #8]
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	bd10      	pop	{r4, pc}
 8003000:	6893      	ldr	r3, [r2, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f9      	beq.n	8002ffa <__cxa_begin_cleanup+0x2a>
 8003006:	f000 fa9b 	bl	8003540 <_ZSt9terminatev>

0800300a <__gnu_end_cleanup>:
 800300a:	b510      	push	{r4, lr}
 800300c:	f000 f816 	bl	800303c <__cxa_get_globals>
 8003010:	6882      	ldr	r2, [r0, #8]
 8003012:	4601      	mov	r1, r0
 8003014:	b90a      	cbnz	r2, 800301a <__gnu_end_cleanup+0x10>
 8003016:	f000 fa93 	bl	8003540 <_ZSt9terminatev>
 800301a:	f102 0420 	add.w	r4, r2, #32
 800301e:	4620      	mov	r0, r4
 8003020:	f7ff ff67 	bl	8002ef2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003024:	b140      	cbz	r0, 8003038 <__gnu_end_cleanup+0x2e>
 8003026:	69d3      	ldr	r3, [r2, #28]
 8003028:	3b01      	subs	r3, #1
 800302a:	61d3      	str	r3, [r2, #28]
 800302c:	b913      	cbnz	r3, 8003034 <__gnu_end_cleanup+0x2a>
 800302e:	6990      	ldr	r0, [r2, #24]
 8003030:	6088      	str	r0, [r1, #8]
 8003032:	6193      	str	r3, [r2, #24]
 8003034:	4620      	mov	r0, r4
 8003036:	bd10      	pop	{r4, pc}
 8003038:	6088      	str	r0, [r1, #8]
 800303a:	e7fb      	b.n	8003034 <__gnu_end_cleanup+0x2a>

0800303c <__cxa_get_globals>:
 800303c:	4800      	ldr	r0, [pc, #0]	@ (8003040 <__cxa_get_globals+0x4>)
 800303e:	4770      	bx	lr
 8003040:	20011384 	.word	0x20011384

08003044 <_ZL12read_uleb128PKhPm>:
 8003044:	b530      	push	{r4, r5, lr}
 8003046:	2300      	movs	r3, #0
 8003048:	461a      	mov	r2, r3
 800304a:	f810 5b01 	ldrb.w	r5, [r0], #1
 800304e:	f005 047f 	and.w	r4, r5, #127	@ 0x7f
 8003052:	4094      	lsls	r4, r2
 8003054:	4323      	orrs	r3, r4
 8003056:	062c      	lsls	r4, r5, #24
 8003058:	f102 0207 	add.w	r2, r2, #7
 800305c:	d4f5      	bmi.n	800304a <_ZL12read_uleb128PKhPm+0x6>
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	bd30      	pop	{r4, r5, pc}

08003062 <_ZL12read_sleb128PKhPl>:
 8003062:	b530      	push	{r4, r5, lr}
 8003064:	2300      	movs	r3, #0
 8003066:	461a      	mov	r2, r3
 8003068:	f810 4b01 	ldrb.w	r4, [r0], #1
 800306c:	f004 057f 	and.w	r5, r4, #127	@ 0x7f
 8003070:	4095      	lsls	r5, r2
 8003072:	432b      	orrs	r3, r5
 8003074:	0625      	lsls	r5, r4, #24
 8003076:	f102 0207 	add.w	r2, r2, #7
 800307a:	d4f5      	bmi.n	8003068 <_ZL12read_sleb128PKhPl+0x6>
 800307c:	2a1f      	cmp	r2, #31
 800307e:	d806      	bhi.n	800308e <_ZL12read_sleb128PKhPl+0x2c>
 8003080:	0664      	lsls	r4, r4, #25
 8003082:	bf42      	ittt	mi
 8003084:	f04f 34ff 	movmi.w	r4, #4294967295
 8003088:	fa04 f202 	lslmi.w	r2, r4, r2
 800308c:	4313      	orrmi	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	bd30      	pop	{r4, r5, pc}

08003092 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8003092:	2850      	cmp	r0, #80	@ 0x50
 8003094:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003098:	4606      	mov	r6, r0
 800309a:	4688      	mov	r8, r1
 800309c:	4615      	mov	r5, r2
 800309e:	461f      	mov	r7, r3
 80030a0:	d108      	bne.n	80030b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 80030a2:	1cd0      	adds	r0, r2, #3
 80030a4:	f020 0003 	bic.w	r0, r0, #3
 80030a8:	f850 4b04 	ldr.w	r4, [r0], #4
 80030ac:	603c      	str	r4, [r7, #0]
 80030ae:	b002      	add	sp, #8
 80030b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030b4:	f000 030f 	and.w	r3, r0, #15
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d82e      	bhi.n	800311a <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 80030bc:	e8df f003 	tbb	[pc, r3]
 80030c0:	251d0725 	.word	0x251d0725
 80030c4:	2d2d2d29 	.word	0x2d2d2d29
 80030c8:	2521182d 	.word	0x2521182d
 80030cc:	29          	.byte	0x29
 80030cd:	00          	.byte	0x00
 80030ce:	a901      	add	r1, sp, #4
 80030d0:	4628      	mov	r0, r5
 80030d2:	f7ff ffb7 	bl	8003044 <_ZL12read_uleb128PKhPm>
 80030d6:	9c01      	ldr	r4, [sp, #4]
 80030d8:	2c00      	cmp	r4, #0
 80030da:	d0e7      	beq.n	80030ac <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80030dc:	f006 0370 	and.w	r3, r6, #112	@ 0x70
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	bf08      	it	eq
 80030e4:	46a8      	moveq	r8, r5
 80030e6:	4444      	add	r4, r8
 80030e8:	0633      	lsls	r3, r6, #24
 80030ea:	bf48      	it	mi
 80030ec:	6824      	ldrmi	r4, [r4, #0]
 80030ee:	e7dd      	b.n	80030ac <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80030f0:	a901      	add	r1, sp, #4
 80030f2:	4628      	mov	r0, r5
 80030f4:	f7ff ffb5 	bl	8003062 <_ZL12read_sleb128PKhPl>
 80030f8:	e7ed      	b.n	80030d6 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 80030fa:	4628      	mov	r0, r5
 80030fc:	f830 4b02 	ldrh.w	r4, [r0], #2
 8003100:	e7ea      	b.n	80030d8 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8003102:	4628      	mov	r0, r5
 8003104:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8003108:	e7e6      	b.n	80030d8 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800310a:	4628      	mov	r0, r5
 800310c:	f850 4b04 	ldr.w	r4, [r0], #4
 8003110:	e7e2      	b.n	80030d8 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8003112:	4628      	mov	r0, r5
 8003114:	f850 4b08 	ldr.w	r4, [r0], #8
 8003118:	e7de      	b.n	80030d8 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800311a:	f000 fbd3 	bl	80038c4 <abort>

0800311e <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800311e:	b508      	push	{r3, lr}
 8003120:	4603      	mov	r3, r0
 8003122:	2bff      	cmp	r3, #255	@ 0xff
 8003124:	4608      	mov	r0, r1
 8003126:	d00d      	beq.n	8003144 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8003128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800312c:	2b30      	cmp	r3, #48	@ 0x30
 800312e:	d00f      	beq.n	8003150 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8003130:	d804      	bhi.n	800313c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8003132:	2b20      	cmp	r3, #32
 8003134:	d008      	beq.n	8003148 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8003136:	d905      	bls.n	8003144 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8003138:	f000 fbc4 	bl	80038c4 <abort>
 800313c:	2b40      	cmp	r3, #64	@ 0x40
 800313e:	d00b      	beq.n	8003158 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 8003140:	2b50      	cmp	r3, #80	@ 0x50
 8003142:	d1f9      	bne.n	8003138 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8003144:	2000      	movs	r0, #0
 8003146:	bd08      	pop	{r3, pc}
 8003148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800314c:	f000 bcb9 	b.w	8003ac2 <_Unwind_GetTextRelBase>
 8003150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003154:	f000 bcb2 	b.w	8003abc <_Unwind_GetDataRelBase>
 8003158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800315c:	f7fe b830 	b.w	80011c0 <_Unwind_GetRegionStart>

08003160 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	460c      	mov	r4, r1
 8003164:	4601      	mov	r1, r0
 8003166:	4620      	mov	r0, r4
 8003168:	4615      	mov	r5, r2
 800316a:	461e      	mov	r6, r3
 800316c:	f7ff ffd7 	bl	800311e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8003170:	4633      	mov	r3, r6
 8003172:	4601      	mov	r1, r0
 8003174:	462a      	mov	r2, r5
 8003176:	4620      	mov	r0, r4
 8003178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800317c:	f7ff bf89 	b.w	8003092 <_ZL28read_encoded_value_with_basehjPKhPj>

08003180 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8003180:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003182:	460c      	mov	r4, r1
 8003184:	4615      	mov	r5, r2
 8003186:	4606      	mov	r6, r0
 8003188:	b108      	cbz	r0, 800318e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 800318a:	f7fe f819 	bl	80011c0 <_Unwind_GetRegionStart>
 800318e:	4622      	mov	r2, r4
 8003190:	6028      	str	r0, [r5, #0]
 8003192:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003196:	29ff      	cmp	r1, #255	@ 0xff
 8003198:	d01c      	beq.n	80031d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 800319a:	1d2b      	adds	r3, r5, #4
 800319c:	4630      	mov	r0, r6
 800319e:	f7ff ffdf 	bl	8003160 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4610      	mov	r0, r2
 80031a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80031aa:	2bff      	cmp	r3, #255	@ 0xff
 80031ac:	d014      	beq.n	80031d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 80031ae:	2310      	movs	r3, #16
 80031b0:	752b      	strb	r3, [r5, #20]
 80031b2:	a901      	add	r1, sp, #4
 80031b4:	f7ff ff46 	bl	8003044 <_ZL12read_uleb128PKhPm>
 80031b8:	9b01      	ldr	r3, [sp, #4]
 80031ba:	4403      	add	r3, r0
 80031bc:	60eb      	str	r3, [r5, #12]
 80031be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80031c2:	756b      	strb	r3, [r5, #21]
 80031c4:	a901      	add	r1, sp, #4
 80031c6:	f7ff ff3d 	bl	8003044 <_ZL12read_uleb128PKhPm>
 80031ca:	9b01      	ldr	r3, [sp, #4]
 80031cc:	4403      	add	r3, r0
 80031ce:	612b      	str	r3, [r5, #16]
 80031d0:	b002      	add	sp, #8
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	6068      	str	r0, [r5, #4]
 80031d6:	e7e5      	b.n	80031a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 80031d8:	752b      	strb	r3, [r5, #20]
 80031da:	2300      	movs	r3, #0
 80031dc:	e7ee      	b.n	80031bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

080031de <_Unwind_GetGR>:
 80031de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80031e0:	ab03      	add	r3, sp, #12
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2300      	movs	r3, #0
 80031e6:	460a      	mov	r2, r1
 80031e8:	4619      	mov	r1, r3
 80031ea:	f7fd f9fd 	bl	80005e8 <_Unwind_VRS_Get>
 80031ee:	9803      	ldr	r0, [sp, #12]
 80031f0:	b005      	add	sp, #20
 80031f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080031f8 <__gxx_personality_v0>:
 80031f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fc:	b093      	sub	sp, #76	@ 0x4c
 80031fe:	2300      	movs	r3, #0
 8003200:	9307      	str	r3, [sp, #28]
 8003202:	f000 0303 	and.w	r3, r0, #3
 8003206:	2b01      	cmp	r3, #1
 8003208:	4606      	mov	r6, r0
 800320a:	460c      	mov	r4, r1
 800320c:	4615      	mov	r5, r2
 800320e:	d010      	beq.n	8003232 <__gxx_personality_v0+0x3a>
 8003210:	2b02      	cmp	r3, #2
 8003212:	d003      	beq.n	800321c <__gxx_personality_v0+0x24>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d173      	bne.n	8003300 <__gxx_personality_v0+0x108>
 8003218:	0730      	lsls	r0, r6, #28
 800321a:	d573      	bpl.n	8003304 <__gxx_personality_v0+0x10c>
 800321c:	4629      	mov	r1, r5
 800321e:	4620      	mov	r0, r4
 8003220:	f7fd ffb8 	bl	8001194 <__gnu_unwind_frame>
 8003224:	b118      	cbz	r0, 800322e <__gxx_personality_v0+0x36>
 8003226:	2009      	movs	r0, #9
 8003228:	b013      	add	sp, #76	@ 0x4c
 800322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322e:	2008      	movs	r0, #8
 8003230:	e7fa      	b.n	8003228 <__gxx_personality_v0+0x30>
 8003232:	0701      	lsls	r1, r0, #28
 8003234:	d55b      	bpl.n	80032ee <__gxx_personality_v0+0xf6>
 8003236:	2302      	movs	r3, #2
 8003238:	f006 0608 	and.w	r6, r6, #8
 800323c:	431e      	orrs	r6, r3
 800323e:	ab0c      	add	r3, sp, #48	@ 0x30
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2300      	movs	r3, #0
 8003244:	220c      	movs	r2, #12
 8003246:	4619      	mov	r1, r3
 8003248:	4628      	mov	r0, r5
 800324a:	940c      	str	r4, [sp, #48]	@ 0x30
 800324c:	f7fd f9f4 	bl	8000638 <_Unwind_VRS_Set>
 8003250:	2e06      	cmp	r6, #6
 8003252:	d159      	bne.n	8003308 <__gxx_personality_v0+0x110>
 8003254:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
 8003258:	e9d4 730a 	ldrd	r7, r3, [r4, #40]	@ 0x28
 800325c:	f1b8 0f00 	cmp.w	r8, #0
 8003260:	f000 8155 	beq.w	800350e <__gxx_personality_v0+0x316>
 8003264:	4699      	mov	r9, r3
 8003266:	f04f 0a03 	mov.w	sl, #3
 800326a:	2f00      	cmp	r7, #0
 800326c:	da18      	bge.n	80032a0 <__gxx_personality_v0+0xa8>
 800326e:	aa0c      	add	r2, sp, #48	@ 0x30
 8003270:	4649      	mov	r1, r9
 8003272:	4628      	mov	r0, r5
 8003274:	f7ff ff84 	bl	8003180 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8003278:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800327c:	4629      	mov	r1, r5
 800327e:	f7ff ff4e 	bl	800311e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8003282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003284:	43fa      	mvns	r2, r7
 8003286:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800328a:	2200      	movs	r2, #0
 800328c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003290:	2900      	cmp	r1, #0
 8003292:	f040 813f 	bne.w	8003514 <__gxx_personality_v0+0x31c>
 8003296:	e9c4 200a 	strd	r2, r0, [r4, #40]	@ 0x28
 800329a:	2204      	movs	r2, #4
 800329c:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 80032a0:	2300      	movs	r3, #0
 80032a2:	ae0b      	add	r6, sp, #44	@ 0x2c
 80032a4:	461a      	mov	r2, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	9600      	str	r6, [sp, #0]
 80032aa:	4628      	mov	r0, r5
 80032ac:	940b      	str	r4, [sp, #44]	@ 0x2c
 80032ae:	f7fd f9c3 	bl	8000638 <_Unwind_VRS_Set>
 80032b2:	2300      	movs	r3, #0
 80032b4:	4619      	mov	r1, r3
 80032b6:	2201      	movs	r2, #1
 80032b8:	9600      	str	r6, [sp, #0]
 80032ba:	4628      	mov	r0, r5
 80032bc:	970b      	str	r7, [sp, #44]	@ 0x2c
 80032be:	f7fd f9bb 	bl	8000638 <_Unwind_VRS_Set>
 80032c2:	210f      	movs	r1, #15
 80032c4:	4628      	mov	r0, r5
 80032c6:	f7ff ff8a 	bl	80031de <_Unwind_GetGR>
 80032ca:	f000 0001 	and.w	r0, r0, #1
 80032ce:	ea40 0008 	orr.w	r0, r0, r8
 80032d2:	2300      	movs	r3, #0
 80032d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80032d6:	9600      	str	r6, [sp, #0]
 80032d8:	220f      	movs	r2, #15
 80032da:	4619      	mov	r1, r3
 80032dc:	4628      	mov	r0, r5
 80032de:	f7fd f9ab 	bl	8000638 <_Unwind_VRS_Set>
 80032e2:	f1ba 0f02 	cmp.w	sl, #2
 80032e6:	f000 8117 	beq.w	8003518 <__gxx_personality_v0+0x320>
 80032ea:	2007      	movs	r0, #7
 80032ec:	e79c      	b.n	8003228 <__gxx_personality_v0+0x30>
 80032ee:	210d      	movs	r1, #13
 80032f0:	4610      	mov	r0, r2
 80032f2:	6a27      	ldr	r7, [r4, #32]
 80032f4:	f7ff ff73 	bl	80031de <_Unwind_GetGR>
 80032f8:	4287      	cmp	r7, r0
 80032fa:	d19c      	bne.n	8003236 <__gxx_personality_v0+0x3e>
 80032fc:	2306      	movs	r3, #6
 80032fe:	e79b      	b.n	8003238 <__gxx_personality_v0+0x40>
 8003300:	f000 fae0 	bl	80038c4 <abort>
 8003304:	2301      	movs	r3, #1
 8003306:	e797      	b.n	8003238 <__gxx_personality_v0+0x40>
 8003308:	4628      	mov	r0, r5
 800330a:	f7fd ff5f 	bl	80011cc <_Unwind_GetLanguageSpecificData>
 800330e:	4681      	mov	r9, r0
 8003310:	2800      	cmp	r0, #0
 8003312:	d083      	beq.n	800321c <__gxx_personality_v0+0x24>
 8003314:	aa0c      	add	r2, sp, #48	@ 0x30
 8003316:	4601      	mov	r1, r0
 8003318:	4628      	mov	r0, r5
 800331a:	f7ff ff31 	bl	8003180 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800331e:	f89d b044 	ldrb.w	fp, [sp, #68]	@ 0x44
 8003322:	9003      	str	r0, [sp, #12]
 8003324:	4629      	mov	r1, r5
 8003326:	4658      	mov	r0, fp
 8003328:	f7ff fef9 	bl	800311e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800332c:	210f      	movs	r1, #15
 800332e:	9002      	str	r0, [sp, #8]
 8003330:	900e      	str	r0, [sp, #56]	@ 0x38
 8003332:	4628      	mov	r0, r5
 8003334:	f7ff ff53 	bl	80031de <_Unwind_GetGR>
 8003338:	9a03      	ldr	r2, [sp, #12]
 800333a:	f020 0801 	bic.w	r8, r0, #1
 800333e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003342:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8003344:	4297      	cmp	r7, r2
 8003346:	d817      	bhi.n	8003378 <__gxx_personality_v0+0x180>
 8003348:	2700      	movs	r7, #0
 800334a:	46b8      	mov	r8, r7
 800334c:	f04f 0a01 	mov.w	sl, #1
 8003350:	07f2      	lsls	r2, r6, #31
 8003352:	f140 80cc 	bpl.w	80034ee <__gxx_personality_v0+0x2f6>
 8003356:	f1ba 0f02 	cmp.w	sl, #2
 800335a:	f43f af5f 	beq.w	800321c <__gxx_personality_v0+0x24>
 800335e:	210d      	movs	r1, #13
 8003360:	4628      	mov	r0, r5
 8003362:	9e07      	ldr	r6, [sp, #28]
 8003364:	f7ff ff3b 	bl	80031de <_Unwind_GetGR>
 8003368:	e9c4 790a 	strd	r7, r9, [r4, #40]	@ 0x28
 800336c:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8003370:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 8003374:	2006      	movs	r0, #6
 8003376:	e757      	b.n	8003228 <__gxx_personality_v0+0x30>
 8003378:	f89d a045 	ldrb.w	sl, [sp, #69]	@ 0x45
 800337c:	ab08      	add	r3, sp, #32
 800337e:	4651      	mov	r1, sl
 8003380:	2000      	movs	r0, #0
 8003382:	f7ff feed 	bl	8003160 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8003386:	ab09      	add	r3, sp, #36	@ 0x24
 8003388:	4602      	mov	r2, r0
 800338a:	4651      	mov	r1, sl
 800338c:	2000      	movs	r0, #0
 800338e:	f7ff fee7 	bl	8003160 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8003392:	ab0a      	add	r3, sp, #40	@ 0x28
 8003394:	4602      	mov	r2, r0
 8003396:	4651      	mov	r1, sl
 8003398:	2000      	movs	r0, #0
 800339a:	f7ff fee1 	bl	8003160 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800339e:	a90b      	add	r1, sp, #44	@ 0x2c
 80033a0:	f7ff fe50 	bl	8003044 <_ZL12read_uleb128PKhPm>
 80033a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80033a6:	9908      	ldr	r1, [sp, #32]
 80033a8:	440b      	add	r3, r1
 80033aa:	4543      	cmp	r3, r8
 80033ac:	4602      	mov	r2, r0
 80033ae:	d851      	bhi.n	8003454 <__gxx_personality_v0+0x25c>
 80033b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80033b2:	440b      	add	r3, r1
 80033b4:	4543      	cmp	r3, r8
 80033b6:	d9c4      	bls.n	8003342 <__gxx_personality_v0+0x14a>
 80033b8:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80033bc:	f1b8 0f00 	cmp.w	r8, #0
 80033c0:	d001      	beq.n	80033c6 <__gxx_personality_v0+0x1ce>
 80033c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033c4:	4498      	add	r8, r3
 80033c6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80033c8:	2800      	cmp	r0, #0
 80033ca:	d03b      	beq.n	8003444 <__gxx_personality_v0+0x24c>
 80033cc:	3801      	subs	r0, #1
 80033ce:	4438      	add	r0, r7
 80033d0:	f1b8 0f00 	cmp.w	r8, #0
 80033d4:	f43f af22 	beq.w	800321c <__gxx_personality_v0+0x24>
 80033d8:	f016 0308 	ands.w	r3, r6, #8
 80033dc:	9304      	str	r3, [sp, #16]
 80033de:	d03b      	beq.n	8003458 <__gxx_personality_v0+0x260>
 80033e0:	2347      	movs	r3, #71	@ 0x47
 80033e2:	7023      	strb	r3, [r4, #0]
 80033e4:	234e      	movs	r3, #78	@ 0x4e
 80033e6:	7063      	strb	r3, [r4, #1]
 80033e8:	2355      	movs	r3, #85	@ 0x55
 80033ea:	70a3      	strb	r3, [r4, #2]
 80033ec:	2343      	movs	r3, #67	@ 0x43
 80033ee:	70e3      	strb	r3, [r4, #3]
 80033f0:	2346      	movs	r3, #70	@ 0x46
 80033f2:	7123      	strb	r3, [r4, #4]
 80033f4:	234f      	movs	r3, #79	@ 0x4f
 80033f6:	7163      	strb	r3, [r4, #5]
 80033f8:	2352      	movs	r3, #82	@ 0x52
 80033fa:	71a3      	strb	r3, [r4, #6]
 80033fc:	2300      	movs	r3, #0
 80033fe:	71e3      	strb	r3, [r4, #7]
 8003400:	2300      	movs	r3, #0
 8003402:	9303      	str	r3, [sp, #12]
 8003404:	a909      	add	r1, sp, #36	@ 0x24
 8003406:	f7ff fe2c 	bl	8003062 <_ZL12read_sleb128PKhPl>
 800340a:	a90a      	add	r1, sp, #40	@ 0x28
 800340c:	9005      	str	r0, [sp, #20]
 800340e:	f7ff fe28 	bl	8003062 <_ZL12read_sleb128PKhPl>
 8003412:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8003414:	2f00      	cmp	r7, #0
 8003416:	d067      	beq.n	80034e8 <__gxx_personality_v0+0x2f0>
 8003418:	dd42      	ble.n	80034a0 <__gxx_personality_v0+0x2a8>
 800341a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 800341e:	d03b      	beq.n	8003498 <__gxx_personality_v0+0x2a0>
 8003420:	f00b 0307 	and.w	r3, fp, #7
 8003424:	2b04      	cmp	r3, #4
 8003426:	f63f af6b 	bhi.w	8003300 <__gxx_personality_v0+0x108>
 800342a:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <__gxx_personality_v0+0x238>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	0800346b 	.word	0x0800346b
 8003434:	08003301 	.word	0x08003301
 8003438:	0800349d 	.word	0x0800349d
 800343c:	0800346b 	.word	0x0800346b
 8003440:	08003495 	.word	0x08003495
 8003444:	f1b8 0f00 	cmp.w	r8, #0
 8003448:	f43f aee8 	beq.w	800321c <__gxx_personality_v0+0x24>
 800344c:	2700      	movs	r7, #0
 800344e:	f04f 0a02 	mov.w	sl, #2
 8003452:	e77d      	b.n	8003350 <__gxx_personality_v0+0x158>
 8003454:	463a      	mov	r2, r7
 8003456:	e774      	b.n	8003342 <__gxx_personality_v0+0x14a>
 8003458:	79e3      	ldrb	r3, [r4, #7]
 800345a:	2b01      	cmp	r3, #1
 800345c:	bf0c      	ite	eq
 800345e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8003462:	f104 0358 	addne.w	r3, r4, #88	@ 0x58
 8003466:	9307      	str	r3, [sp, #28]
 8003468:	e7ca      	b.n	8003400 <__gxx_personality_v0+0x208>
 800346a:	2204      	movs	r2, #4
 800346c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800346e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8003470:	fb02 1217 	mls	r2, r2, r7, r1
 8003474:	4658      	mov	r0, fp
 8003476:	9902      	ldr	r1, [sp, #8]
 8003478:	f7ff fe0b 	bl	8003092 <_ZL28read_encoded_value_with_basehjPKhPj>
 800347c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800347e:	b131      	cbz	r1, 800348e <__gxx_personality_v0+0x296>
 8003480:	b33c      	cbz	r4, 80034d2 <__gxx_personality_v0+0x2da>
 8003482:	ab07      	add	r3, sp, #28
 8003484:	2200      	movs	r2, #0
 8003486:	4620      	mov	r0, r4
 8003488:	f7ff fd50 	bl	8002f2c <__cxa_type_match>
 800348c:	b308      	cbz	r0, 80034d2 <__gxx_personality_v0+0x2da>
 800348e:	f04f 0a03 	mov.w	sl, #3
 8003492:	e75d      	b.n	8003350 <__gxx_personality_v0+0x158>
 8003494:	2208      	movs	r2, #8
 8003496:	e7e9      	b.n	800346c <__gxx_personality_v0+0x274>
 8003498:	2200      	movs	r2, #0
 800349a:	e7e7      	b.n	800346c <__gxx_personality_v0+0x274>
 800349c:	2202      	movs	r2, #2
 800349e:	e7e5      	b.n	800346c <__gxx_personality_v0+0x274>
 80034a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80034a2:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 80034a6:	1bd2      	subs	r2, r2, r7
 80034a8:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 80034ac:	b1bc      	cbz	r4, 80034de <__gxx_personality_v0+0x2e6>
 80034ae:	9904      	ldr	r1, [sp, #16]
 80034b0:	b9a9      	cbnz	r1, 80034de <__gxx_personality_v0+0x2e6>
 80034b2:	9b07      	ldr	r3, [sp, #28]
 80034b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80034b6:	f1aa 0a04 	sub.w	sl, sl, #4
 80034ba:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 80034be:	2900      	cmp	r1, #0
 80034c0:	d0e5      	beq.n	800348e <__gxx_personality_v0+0x296>
 80034c2:	ab0b      	add	r3, sp, #44	@ 0x2c
 80034c4:	2200      	movs	r2, #0
 80034c6:	4451      	add	r1, sl
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fd2f 	bl	8002f2c <__cxa_type_match>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d0f3      	beq.n	80034ba <__gxx_personality_v0+0x2c2>
 80034d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80034d4:	b320      	cbz	r0, 8003520 <__gxx_personality_v0+0x328>
 80034d6:	9b05      	ldr	r3, [sp, #20]
 80034d8:	4403      	add	r3, r0
 80034da:	4618      	mov	r0, r3
 80034dc:	e792      	b.n	8003404 <__gxx_personality_v0+0x20c>
 80034de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f5      	bne.n	80034d2 <__gxx_personality_v0+0x2da>
 80034e6:	e7d2      	b.n	800348e <__gxx_personality_v0+0x296>
 80034e8:	2301      	movs	r3, #1
 80034ea:	9303      	str	r3, [sp, #12]
 80034ec:	e7f1      	b.n	80034d2 <__gxx_personality_v0+0x2da>
 80034ee:	0733      	lsls	r3, r6, #28
 80034f0:	d509      	bpl.n	8003506 <__gxx_personality_v0+0x30e>
 80034f2:	f1ba 0f01 	cmp.w	sl, #1
 80034f6:	d101      	bne.n	80034fc <__gxx_personality_v0+0x304>
 80034f8:	f000 f822 	bl	8003540 <_ZSt9terminatev>
 80034fc:	2f00      	cmp	r7, #0
 80034fe:	f6bf aecf 	bge.w	80032a0 <__gxx_personality_v0+0xa8>
 8003502:	f000 f82f 	bl	8003564 <_ZSt10unexpectedv>
 8003506:	f1ba 0f01 	cmp.w	sl, #1
 800350a:	f47f aeae 	bne.w	800326a <__gxx_personality_v0+0x72>
 800350e:	4620      	mov	r0, r4
 8003510:	f000 f96d 	bl	80037ee <__cxa_call_terminate>
 8003514:	3201      	adds	r2, #1
 8003516:	e6b9      	b.n	800328c <__gxx_personality_v0+0x94>
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff fd59 	bl	8002fd0 <__cxa_begin_cleanup>
 800351e:	e6e4      	b.n	80032ea <__gxx_personality_v0+0xf2>
 8003520:	9b03      	ldr	r3, [sp, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d192      	bne.n	800344c <__gxx_personality_v0+0x254>
 8003526:	e679      	b.n	800321c <__gxx_personality_v0+0x24>

08003528 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003528:	b508      	push	{r3, lr}
 800352a:	4780      	blx	r0
 800352c:	f000 f9ca 	bl	80038c4 <abort>

08003530 <_ZSt13get_terminatev>:
 8003530:	4b02      	ldr	r3, [pc, #8]	@ (800353c <_ZSt13get_terminatev+0xc>)
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	f3bf 8f5b 	dmb	ish
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	200000e0 	.word	0x200000e0

08003540 <_ZSt9terminatev>:
 8003540:	b508      	push	{r3, lr}
 8003542:	f7ff fff5 	bl	8003530 <_ZSt13get_terminatev>
 8003546:	f7ff ffef 	bl	8003528 <_ZN10__cxxabiv111__terminateEPFvvE>

0800354a <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800354a:	b508      	push	{r3, lr}
 800354c:	4780      	blx	r0
 800354e:	f7ff fff7 	bl	8003540 <_ZSt9terminatev>
	...

08003554 <_ZSt14get_unexpectedv>:
 8003554:	4b02      	ldr	r3, [pc, #8]	@ (8003560 <_ZSt14get_unexpectedv+0xc>)
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	f3bf 8f5b 	dmb	ish
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	200000dc 	.word	0x200000dc

08003564 <_ZSt10unexpectedv>:
 8003564:	b508      	push	{r3, lr}
 8003566:	f7ff fff5 	bl	8003554 <_ZSt14get_unexpectedv>
 800356a:	f7ff ffee 	bl	800354a <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800356e <__cxa_guard_acquire>:
 800356e:	6802      	ldr	r2, [r0, #0]
 8003570:	07d2      	lsls	r2, r2, #31
 8003572:	4603      	mov	r3, r0
 8003574:	d405      	bmi.n	8003582 <__cxa_guard_acquire+0x14>
 8003576:	7842      	ldrb	r2, [r0, #1]
 8003578:	b102      	cbz	r2, 800357c <__cxa_guard_acquire+0xe>
 800357a:	deff      	udf	#255	@ 0xff
 800357c:	2001      	movs	r0, #1
 800357e:	7058      	strb	r0, [r3, #1]
 8003580:	4770      	bx	lr
 8003582:	2000      	movs	r0, #0
 8003584:	4770      	bx	lr

08003586 <__cxa_guard_abort>:
 8003586:	2300      	movs	r3, #0
 8003588:	7043      	strb	r3, [r0, #1]
 800358a:	4770      	bx	lr

0800358c <__cxa_guard_release>:
 800358c:	2301      	movs	r3, #1
 800358e:	6003      	str	r3, [r0, #0]
 8003590:	4770      	bx	lr
	...

08003594 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8003594:	b510      	push	{r4, lr}
 8003596:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8003598:	6003      	str	r3, [r0, #0]
 800359a:	4604      	mov	r4, r0
 800359c:	f000 f8b4 	bl	8003708 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80035a0:	4620      	mov	r0, r4
 80035a2:	bd10      	pop	{r4, pc}
 80035a4:	08003b80 	.word	0x08003b80

080035a8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80035a8:	b510      	push	{r4, lr}
 80035aa:	4604      	mov	r4, r0
 80035ac:	f7ff fff2 	bl	8003594 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80035b0:	4620      	mov	r0, r4
 80035b2:	210c      	movs	r1, #12
 80035b4:	f000 f8fc 	bl	80037b0 <_ZdlPvj>
 80035b8:	4620      	mov	r0, r4
 80035ba:	bd10      	pop	{r4, pc}

080035bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80035bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80035c4:	4590      	cmp	r8, r2
 80035c6:	4606      	mov	r6, r0
 80035c8:	460f      	mov	r7, r1
 80035ca:	4615      	mov	r5, r2
 80035cc:	461c      	mov	r4, r3
 80035ce:	d00b      	beq.n	80035e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80035d0:	68b0      	ldr	r0, [r6, #8]
 80035d2:	6803      	ldr	r3, [r0, #0]
 80035d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80035d8:	6a1e      	ldr	r6, [r3, #32]
 80035da:	462a      	mov	r2, r5
 80035dc:	4623      	mov	r3, r4
 80035de:	4639      	mov	r1, r7
 80035e0:	46b4      	mov	ip, r6
 80035e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035e6:	4760      	bx	ip
 80035e8:	4619      	mov	r1, r3
 80035ea:	f000 f857 	bl	800369c <_ZNKSt9type_info7__equalERKS_>
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d0ee      	beq.n	80035d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80035f2:	2006      	movs	r0, #6
 80035f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080035f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80035f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fc:	460d      	mov	r5, r1
 80035fe:	4619      	mov	r1, r3
 8003600:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8003604:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8003608:	4681      	mov	r9, r0
 800360a:	4617      	mov	r7, r2
 800360c:	4698      	mov	r8, r3
 800360e:	f000 f845 	bl	800369c <_ZNKSt9type_info7__equalERKS_>
 8003612:	b190      	cbz	r0, 800363a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8003614:	2d00      	cmp	r5, #0
 8003616:	6034      	str	r4, [r6, #0]
 8003618:	7137      	strb	r7, [r6, #4]
 800361a:	db09      	blt.n	8003630 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800361c:	442c      	add	r4, r5
 800361e:	45a2      	cmp	sl, r4
 8003620:	bf14      	ite	ne
 8003622:	2401      	movne	r4, #1
 8003624:	2406      	moveq	r4, #6
 8003626:	71b4      	strb	r4, [r6, #6]
 8003628:	2000      	movs	r0, #0
 800362a:	b001      	add	sp, #4
 800362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003630:	3502      	adds	r5, #2
 8003632:	d1f9      	bne.n	8003628 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8003634:	2301      	movs	r3, #1
 8003636:	71b3      	strb	r3, [r6, #6]
 8003638:	e7f6      	b.n	8003628 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800363a:	4554      	cmp	r4, sl
 800363c:	d106      	bne.n	800364c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800363e:	4659      	mov	r1, fp
 8003640:	4648      	mov	r0, r9
 8003642:	f000 f82b 	bl	800369c <_ZNKSt9type_info7__equalERKS_>
 8003646:	b108      	cbz	r0, 800364c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8003648:	7177      	strb	r7, [r6, #5]
 800364a:	e7ed      	b.n	8003628 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800364c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8003650:	6803      	ldr	r3, [r0, #0]
 8003652:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8003656:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 800365a:	69dc      	ldr	r4, [r3, #28]
 800365c:	463a      	mov	r2, r7
 800365e:	4643      	mov	r3, r8
 8003660:	4629      	mov	r1, r5
 8003662:	46a4      	mov	ip, r4
 8003664:	b001      	add	sp, #4
 8003666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366a:	4760      	bx	ip

0800366c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800366c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003670:	4607      	mov	r7, r0
 8003672:	460c      	mov	r4, r1
 8003674:	4615      	mov	r5, r2
 8003676:	461e      	mov	r6, r3
 8003678:	f000 f879 	bl	800376e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800367c:	b948      	cbnz	r0, 8003692 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800367e:	68b8      	ldr	r0, [r7, #8]
 8003680:	6803      	ldr	r3, [r0, #0]
 8003682:	699f      	ldr	r7, [r3, #24]
 8003684:	462a      	mov	r2, r5
 8003686:	4633      	mov	r3, r6
 8003688:	4621      	mov	r1, r4
 800368a:	46bc      	mov	ip, r7
 800368c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003690:	4760      	bx	ip
 8003692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003696 <_ZNSt9type_infoD1Ev>:
 8003696:	4770      	bx	lr

08003698 <_ZNKSt9type_info14__is_pointer_pEv>:
 8003698:	2000      	movs	r0, #0
 800369a:	4770      	bx	lr

0800369c <_ZNKSt9type_info7__equalERKS_>:
 800369c:	4281      	cmp	r1, r0
 800369e:	b508      	push	{r3, lr}
 80036a0:	d00e      	beq.n	80036c0 <_ZNKSt9type_info7__equalERKS_+0x24>
 80036a2:	6840      	ldr	r0, [r0, #4]
 80036a4:	7803      	ldrb	r3, [r0, #0]
 80036a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80036a8:	d00c      	beq.n	80036c4 <_ZNKSt9type_info7__equalERKS_+0x28>
 80036aa:	6849      	ldr	r1, [r1, #4]
 80036ac:	780b      	ldrb	r3, [r1, #0]
 80036ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80036b0:	bf08      	it	eq
 80036b2:	3101      	addeq	r1, #1
 80036b4:	f7fc fdc0 	bl	8000238 <strcmp>
 80036b8:	fab0 f080 	clz	r0, r0
 80036bc:	0940      	lsrs	r0, r0, #5
 80036be:	bd08      	pop	{r3, pc}
 80036c0:	2001      	movs	r0, #1
 80036c2:	e7fc      	b.n	80036be <_ZNKSt9type_info7__equalERKS_+0x22>
 80036c4:	2000      	movs	r0, #0
 80036c6:	e7fa      	b.n	80036be <_ZNKSt9type_info7__equalERKS_+0x22>

080036c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80036c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80036ca:	2400      	movs	r4, #0
 80036cc:	2310      	movs	r3, #16
 80036ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80036d2:	6803      	ldr	r3, [r0, #0]
 80036d4:	4615      	mov	r5, r2
 80036d6:	699e      	ldr	r6, [r3, #24]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	466b      	mov	r3, sp
 80036dc:	e9cd 4400 	strd	r4, r4, [sp]
 80036e0:	47b0      	blx	r6
 80036e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80036e6:	f003 0306 	and.w	r3, r3, #6
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	bf03      	ittte	eq
 80036ee:	9b00      	ldreq	r3, [sp, #0]
 80036f0:	602b      	streq	r3, [r5, #0]
 80036f2:	2001      	moveq	r0, #1
 80036f4:	4620      	movne	r0, r4
 80036f6:	b004      	add	sp, #16
 80036f8:	bd70      	pop	{r4, r5, r6, pc}

080036fa <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80036fa:	9800      	ldr	r0, [sp, #0]
 80036fc:	4290      	cmp	r0, r2
 80036fe:	bf0c      	ite	eq
 8003700:	2006      	moveq	r0, #6
 8003702:	2001      	movne	r0, #1
 8003704:	4770      	bx	lr
	...

08003708 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8003708:	b510      	push	{r4, lr}
 800370a:	4b03      	ldr	r3, [pc, #12]	@ (8003718 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800370c:	6003      	str	r3, [r0, #0]
 800370e:	4604      	mov	r4, r0
 8003710:	f7ff ffc1 	bl	8003696 <_ZNSt9type_infoD1Ev>
 8003714:	4620      	mov	r0, r4
 8003716:	bd10      	pop	{r4, pc}
 8003718:	08003bf4 	.word	0x08003bf4

0800371c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800371c:	b510      	push	{r4, lr}
 800371e:	4604      	mov	r4, r0
 8003720:	f7ff fff2 	bl	8003708 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8003724:	4620      	mov	r0, r4
 8003726:	2108      	movs	r1, #8
 8003728:	f000 f842 	bl	80037b0 <_ZdlPvj>
 800372c:	4620      	mov	r0, r4
 800372e:	bd10      	pop	{r4, pc}

08003730 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8003730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003734:	461f      	mov	r7, r3
 8003736:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800373a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800373e:	4598      	cmp	r8, r3
 8003740:	4606      	mov	r6, r0
 8003742:	4615      	mov	r5, r2
 8003744:	d107      	bne.n	8003756 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8003746:	9907      	ldr	r1, [sp, #28]
 8003748:	f7ff ffa8 	bl	800369c <_ZNKSt9type_info7__equalERKS_>
 800374c:	b118      	cbz	r0, 8003756 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800374e:	7165      	strb	r5, [r4, #5]
 8003750:	2000      	movs	r0, #0
 8003752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003756:	4639      	mov	r1, r7
 8003758:	4630      	mov	r0, r6
 800375a:	f7ff ff9f 	bl	800369c <_ZNKSt9type_info7__equalERKS_>
 800375e:	2800      	cmp	r0, #0
 8003760:	d0f6      	beq.n	8003750 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8003762:	2301      	movs	r3, #1
 8003764:	f8c4 8000 	str.w	r8, [r4]
 8003768:	7125      	strb	r5, [r4, #4]
 800376a:	71a3      	strb	r3, [r4, #6]
 800376c:	e7f0      	b.n	8003750 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800376e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800376e:	b538      	push	{r3, r4, r5, lr}
 8003770:	4615      	mov	r5, r2
 8003772:	461c      	mov	r4, r3
 8003774:	f7ff ff92 	bl	800369c <_ZNKSt9type_info7__equalERKS_>
 8003778:	b120      	cbz	r0, 8003784 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800377a:	2308      	movs	r3, #8
 800377c:	60e3      	str	r3, [r4, #12]
 800377e:	2306      	movs	r3, #6
 8003780:	6025      	str	r5, [r4, #0]
 8003782:	7123      	strb	r3, [r4, #4]
 8003784:	bd38      	pop	{r3, r4, r5, pc}

08003786 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8003786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800378a:	4605      	mov	r5, r0
 800378c:	460c      	mov	r4, r1
 800378e:	4616      	mov	r6, r2
 8003790:	461f      	mov	r7, r3
 8003792:	f7ff ff83 	bl	800369c <_ZNKSt9type_info7__equalERKS_>
 8003796:	b948      	cbnz	r0, 80037ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8003798:	2f03      	cmp	r7, #3
 800379a:	d807      	bhi.n	80037ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	4632      	mov	r2, r6
 80037a0:	4629      	mov	r1, r5
 80037a2:	4620      	mov	r0, r4
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037aa:	4718      	bx	r3
 80037ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037b0 <_ZdlPvj>:
 80037b0:	f000 b886 	b.w	80038c0 <_ZdlPv>

080037b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80037b4:	7803      	ldrb	r3, [r0, #0]
 80037b6:	2b47      	cmp	r3, #71	@ 0x47
 80037b8:	d117      	bne.n	80037ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80037ba:	7843      	ldrb	r3, [r0, #1]
 80037bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80037be:	d114      	bne.n	80037ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80037c0:	7883      	ldrb	r3, [r0, #2]
 80037c2:	2b55      	cmp	r3, #85	@ 0x55
 80037c4:	d111      	bne.n	80037ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80037c6:	78c3      	ldrb	r3, [r0, #3]
 80037c8:	2b43      	cmp	r3, #67	@ 0x43
 80037ca:	d10e      	bne.n	80037ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80037cc:	7903      	ldrb	r3, [r0, #4]
 80037ce:	2b43      	cmp	r3, #67	@ 0x43
 80037d0:	d10b      	bne.n	80037ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80037d2:	7943      	ldrb	r3, [r0, #5]
 80037d4:	2b2b      	cmp	r3, #43	@ 0x2b
 80037d6:	d108      	bne.n	80037ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80037d8:	7983      	ldrb	r3, [r0, #6]
 80037da:	2b2b      	cmp	r3, #43	@ 0x2b
 80037dc:	d105      	bne.n	80037ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80037de:	79c0      	ldrb	r0, [r0, #7]
 80037e0:	2801      	cmp	r0, #1
 80037e2:	bf8c      	ite	hi
 80037e4:	2000      	movhi	r0, #0
 80037e6:	2001      	movls	r0, #1
 80037e8:	4770      	bx	lr
 80037ea:	2000      	movs	r0, #0
 80037ec:	4770      	bx	lr

080037ee <__cxa_call_terminate>:
 80037ee:	b510      	push	{r4, lr}
 80037f0:	4604      	mov	r4, r0
 80037f2:	b148      	cbz	r0, 8003808 <__cxa_call_terminate+0x1a>
 80037f4:	f000 f83b 	bl	800386e <__cxa_begin_catch>
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7ff ffdb 	bl	80037b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80037fe:	b118      	cbz	r0, 8003808 <__cxa_call_terminate+0x1a>
 8003800:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8003804:	f7ff fe90 	bl	8003528 <_ZN10__cxxabiv111__terminateEPFvvE>
 8003808:	f7ff fe9a 	bl	8003540 <_ZSt9terminatev>

0800380c <__cxa_call_unexpected>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4602      	mov	r2, r0
 8003810:	f7ff ffd0 	bl	80037b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003814:	4604      	mov	r4, r0
 8003816:	b140      	cbz	r0, 800382a <__cxa_call_unexpected+0x1e>
 8003818:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800381c:	2500      	movs	r5, #0
 800381e:	4610      	mov	r0, r2
 8003820:	f000 f825 	bl	800386e <__cxa_begin_catch>
 8003824:	b11d      	cbz	r5, 800382e <__cxa_call_unexpected+0x22>
 8003826:	f7ff fe9d 	bl	8003564 <_ZSt10unexpectedv>
 800382a:	2501      	movs	r5, #1
 800382c:	e7f7      	b.n	800381e <__cxa_call_unexpected+0x12>
 800382e:	4620      	mov	r0, r4
 8003830:	f7ff fe8b 	bl	800354a <_ZN10__cxxabiv112__unexpectedEPFvvE>

08003834 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8003834:	7803      	ldrb	r3, [r0, #0]
 8003836:	2b47      	cmp	r3, #71	@ 0x47
 8003838:	d117      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800383a:	7843      	ldrb	r3, [r0, #1]
 800383c:	2b4e      	cmp	r3, #78	@ 0x4e
 800383e:	d114      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003840:	7883      	ldrb	r3, [r0, #2]
 8003842:	2b55      	cmp	r3, #85	@ 0x55
 8003844:	d111      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003846:	78c3      	ldrb	r3, [r0, #3]
 8003848:	2b43      	cmp	r3, #67	@ 0x43
 800384a:	d10e      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800384c:	7903      	ldrb	r3, [r0, #4]
 800384e:	2b43      	cmp	r3, #67	@ 0x43
 8003850:	d10b      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003852:	7943      	ldrb	r3, [r0, #5]
 8003854:	2b2b      	cmp	r3, #43	@ 0x2b
 8003856:	d108      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003858:	7983      	ldrb	r3, [r0, #6]
 800385a:	2b2b      	cmp	r3, #43	@ 0x2b
 800385c:	d105      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800385e:	79c0      	ldrb	r0, [r0, #7]
 8003860:	2801      	cmp	r0, #1
 8003862:	bf8c      	ite	hi
 8003864:	2000      	movhi	r0, #0
 8003866:	2001      	movls	r0, #1
 8003868:	4770      	bx	lr
 800386a:	2000      	movs	r0, #0
 800386c:	4770      	bx	lr

0800386e <__cxa_begin_catch>:
 800386e:	b538      	push	{r3, r4, r5, lr}
 8003870:	4604      	mov	r4, r0
 8003872:	f7ff fbe3 	bl	800303c <__cxa_get_globals>
 8003876:	6805      	ldr	r5, [r0, #0]
 8003878:	4602      	mov	r2, r0
 800387a:	4620      	mov	r0, r4
 800387c:	f1a4 0120 	sub.w	r1, r4, #32
 8003880:	f7ff ffd8 	bl	8003834 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003884:	b928      	cbnz	r0, 8003892 <__cxa_begin_catch+0x24>
 8003886:	b10d      	cbz	r5, 800388c <__cxa_begin_catch+0x1e>
 8003888:	f7ff fe5a 	bl	8003540 <_ZSt9terminatev>
 800388c:	6011      	str	r1, [r2, #0]
 800388e:	4628      	mov	r0, r5
 8003890:	bd38      	pop	{r3, r4, r5, pc}
 8003892:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	bfb4      	ite	lt
 800389a:	f1c3 0301 	rsblt	r3, r3, #1
 800389e:	3301      	addge	r3, #1
 80038a0:	f844 3c0c 	str.w	r3, [r4, #-12]
 80038a4:	6853      	ldr	r3, [r2, #4]
 80038a6:	428d      	cmp	r5, r1
 80038a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80038ac:	6053      	str	r3, [r2, #4]
 80038ae:	4620      	mov	r0, r4
 80038b0:	bf1c      	itt	ne
 80038b2:	f844 5c10 	strne.w	r5, [r4, #-16]
 80038b6:	6011      	strne	r1, [r2, #0]
 80038b8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80038ba:	f7fc fe8d 	bl	80005d8 <_Unwind_Complete>
 80038be:	e7e6      	b.n	800388e <__cxa_begin_catch+0x20>

080038c0 <_ZdlPv>:
 80038c0:	f000 b808 	b.w	80038d4 <free>

080038c4 <abort>:
 80038c4:	b508      	push	{r3, lr}
 80038c6:	2006      	movs	r0, #6
 80038c8:	f000 f858 	bl	800397c <raise>
 80038cc:	2001      	movs	r0, #1
 80038ce:	f7ff fa81 	bl	8002dd4 <_exit>
	...

080038d4 <free>:
 80038d4:	4b02      	ldr	r3, [pc, #8]	@ (80038e0 <free+0xc>)
 80038d6:	4601      	mov	r1, r0
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	f000 b8a5 	b.w	8003a28 <_free_r>
 80038de:	bf00      	nop
 80038e0:	200000e4 	.word	0x200000e4

080038e4 <__malloc_lock>:
 80038e4:	4801      	ldr	r0, [pc, #4]	@ (80038ec <__malloc_lock+0x8>)
 80038e6:	f000 b88f 	b.w	8003a08 <__retarget_lock_acquire_recursive>
 80038ea:	bf00      	nop
 80038ec:	200114d0 	.word	0x200114d0

080038f0 <__malloc_unlock>:
 80038f0:	4801      	ldr	r0, [pc, #4]	@ (80038f8 <__malloc_unlock+0x8>)
 80038f2:	f000 b88a 	b.w	8003a0a <__retarget_lock_release_recursive>
 80038f6:	bf00      	nop
 80038f8:	200114d0 	.word	0x200114d0

080038fc <memcmp>:
 80038fc:	b510      	push	{r4, lr}
 80038fe:	3901      	subs	r1, #1
 8003900:	4402      	add	r2, r0
 8003902:	4290      	cmp	r0, r2
 8003904:	d101      	bne.n	800390a <memcmp+0xe>
 8003906:	2000      	movs	r0, #0
 8003908:	e005      	b.n	8003916 <memcmp+0x1a>
 800390a:	7803      	ldrb	r3, [r0, #0]
 800390c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003910:	42a3      	cmp	r3, r4
 8003912:	d001      	beq.n	8003918 <memcmp+0x1c>
 8003914:	1b18      	subs	r0, r3, r4
 8003916:	bd10      	pop	{r4, pc}
 8003918:	3001      	adds	r0, #1
 800391a:	e7f2      	b.n	8003902 <memcmp+0x6>

0800391c <memset>:
 800391c:	4402      	add	r2, r0
 800391e:	4603      	mov	r3, r0
 8003920:	4293      	cmp	r3, r2
 8003922:	d100      	bne.n	8003926 <memset+0xa>
 8003924:	4770      	bx	lr
 8003926:	f803 1b01 	strb.w	r1, [r3], #1
 800392a:	e7f9      	b.n	8003920 <memset+0x4>

0800392c <_raise_r>:
 800392c:	291f      	cmp	r1, #31
 800392e:	b538      	push	{r3, r4, r5, lr}
 8003930:	4605      	mov	r5, r0
 8003932:	460c      	mov	r4, r1
 8003934:	d904      	bls.n	8003940 <_raise_r+0x14>
 8003936:	2316      	movs	r3, #22
 8003938:	6003      	str	r3, [r0, #0]
 800393a:	f04f 30ff 	mov.w	r0, #4294967295
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003942:	b112      	cbz	r2, 800394a <_raise_r+0x1e>
 8003944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003948:	b94b      	cbnz	r3, 800395e <_raise_r+0x32>
 800394a:	4628      	mov	r0, r5
 800394c:	f000 f830 	bl	80039b0 <_getpid_r>
 8003950:	4622      	mov	r2, r4
 8003952:	4601      	mov	r1, r0
 8003954:	4628      	mov	r0, r5
 8003956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800395a:	f000 b817 	b.w	800398c <_kill_r>
 800395e:	2b01      	cmp	r3, #1
 8003960:	d00a      	beq.n	8003978 <_raise_r+0x4c>
 8003962:	1c59      	adds	r1, r3, #1
 8003964:	d103      	bne.n	800396e <_raise_r+0x42>
 8003966:	2316      	movs	r3, #22
 8003968:	6003      	str	r3, [r0, #0]
 800396a:	2001      	movs	r0, #1
 800396c:	e7e7      	b.n	800393e <_raise_r+0x12>
 800396e:	2100      	movs	r1, #0
 8003970:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003974:	4620      	mov	r0, r4
 8003976:	4798      	blx	r3
 8003978:	2000      	movs	r0, #0
 800397a:	e7e0      	b.n	800393e <_raise_r+0x12>

0800397c <raise>:
 800397c:	4b02      	ldr	r3, [pc, #8]	@ (8003988 <raise+0xc>)
 800397e:	4601      	mov	r1, r0
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	f7ff bfd3 	b.w	800392c <_raise_r>
 8003986:	bf00      	nop
 8003988:	200000e4 	.word	0x200000e4

0800398c <_kill_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4d07      	ldr	r5, [pc, #28]	@ (80039ac <_kill_r+0x20>)
 8003990:	2300      	movs	r3, #0
 8003992:	4604      	mov	r4, r0
 8003994:	4608      	mov	r0, r1
 8003996:	4611      	mov	r1, r2
 8003998:	602b      	str	r3, [r5, #0]
 800399a:	f7ff fa13 	bl	8002dc4 <_kill>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d102      	bne.n	80039a8 <_kill_r+0x1c>
 80039a2:	682b      	ldr	r3, [r5, #0]
 80039a4:	b103      	cbz	r3, 80039a8 <_kill_r+0x1c>
 80039a6:	6023      	str	r3, [r4, #0]
 80039a8:	bd38      	pop	{r3, r4, r5, pc}
 80039aa:	bf00      	nop
 80039ac:	200114cc 	.word	0x200114cc

080039b0 <_getpid_r>:
 80039b0:	f7ff ba06 	b.w	8002dc0 <_getpid>

080039b4 <__errno>:
 80039b4:	4b01      	ldr	r3, [pc, #4]	@ (80039bc <__errno+0x8>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	200000e4 	.word	0x200000e4

080039c0 <__libc_init_array>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	4d0d      	ldr	r5, [pc, #52]	@ (80039f8 <__libc_init_array+0x38>)
 80039c4:	4c0d      	ldr	r4, [pc, #52]	@ (80039fc <__libc_init_array+0x3c>)
 80039c6:	1b64      	subs	r4, r4, r5
 80039c8:	10a4      	asrs	r4, r4, #2
 80039ca:	2600      	movs	r6, #0
 80039cc:	42a6      	cmp	r6, r4
 80039ce:	d109      	bne.n	80039e4 <__libc_init_array+0x24>
 80039d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003a00 <__libc_init_array+0x40>)
 80039d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003a04 <__libc_init_array+0x44>)
 80039d4:	f000 f878 	bl	8003ac8 <_init>
 80039d8:	1b64      	subs	r4, r4, r5
 80039da:	10a4      	asrs	r4, r4, #2
 80039dc:	2600      	movs	r6, #0
 80039de:	42a6      	cmp	r6, r4
 80039e0:	d105      	bne.n	80039ee <__libc_init_array+0x2e>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e8:	4798      	blx	r3
 80039ea:	3601      	adds	r6, #1
 80039ec:	e7ee      	b.n	80039cc <__libc_init_array+0xc>
 80039ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f2:	4798      	blx	r3
 80039f4:	3601      	adds	r6, #1
 80039f6:	e7f2      	b.n	80039de <__libc_init_array+0x1e>
 80039f8:	08003dd8 	.word	0x08003dd8
 80039fc:	08003dd8 	.word	0x08003dd8
 8003a00:	08003dd8 	.word	0x08003dd8
 8003a04:	08003de4 	.word	0x08003de4

08003a08 <__retarget_lock_acquire_recursive>:
 8003a08:	4770      	bx	lr

08003a0a <__retarget_lock_release_recursive>:
 8003a0a:	4770      	bx	lr

08003a0c <memcpy>:
 8003a0c:	440a      	add	r2, r1
 8003a0e:	4291      	cmp	r1, r2
 8003a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a14:	d100      	bne.n	8003a18 <memcpy+0xc>
 8003a16:	4770      	bx	lr
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a22:	4291      	cmp	r1, r2
 8003a24:	d1f9      	bne.n	8003a1a <memcpy+0xe>
 8003a26:	bd10      	pop	{r4, pc}

08003a28 <_free_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	2900      	cmp	r1, #0
 8003a2e:	d041      	beq.n	8003ab4 <_free_r+0x8c>
 8003a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a34:	1f0c      	subs	r4, r1, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bfb8      	it	lt
 8003a3a:	18e4      	addlt	r4, r4, r3
 8003a3c:	f7ff ff52 	bl	80038e4 <__malloc_lock>
 8003a40:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab8 <_free_r+0x90>)
 8003a42:	6813      	ldr	r3, [r2, #0]
 8003a44:	b933      	cbnz	r3, 8003a54 <_free_r+0x2c>
 8003a46:	6063      	str	r3, [r4, #4]
 8003a48:	6014      	str	r4, [r2, #0]
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a50:	f7ff bf4e 	b.w	80038f0 <__malloc_unlock>
 8003a54:	42a3      	cmp	r3, r4
 8003a56:	d908      	bls.n	8003a6a <_free_r+0x42>
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	1821      	adds	r1, r4, r0
 8003a5c:	428b      	cmp	r3, r1
 8003a5e:	bf01      	itttt	eq
 8003a60:	6819      	ldreq	r1, [r3, #0]
 8003a62:	685b      	ldreq	r3, [r3, #4]
 8003a64:	1809      	addeq	r1, r1, r0
 8003a66:	6021      	streq	r1, [r4, #0]
 8003a68:	e7ed      	b.n	8003a46 <_free_r+0x1e>
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	b10b      	cbz	r3, 8003a74 <_free_r+0x4c>
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	d9fa      	bls.n	8003a6a <_free_r+0x42>
 8003a74:	6811      	ldr	r1, [r2, #0]
 8003a76:	1850      	adds	r0, r2, r1
 8003a78:	42a0      	cmp	r0, r4
 8003a7a:	d10b      	bne.n	8003a94 <_free_r+0x6c>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	4401      	add	r1, r0
 8003a80:	1850      	adds	r0, r2, r1
 8003a82:	4283      	cmp	r3, r0
 8003a84:	6011      	str	r1, [r2, #0]
 8003a86:	d1e0      	bne.n	8003a4a <_free_r+0x22>
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	6053      	str	r3, [r2, #4]
 8003a8e:	4408      	add	r0, r1
 8003a90:	6010      	str	r0, [r2, #0]
 8003a92:	e7da      	b.n	8003a4a <_free_r+0x22>
 8003a94:	d902      	bls.n	8003a9c <_free_r+0x74>
 8003a96:	230c      	movs	r3, #12
 8003a98:	602b      	str	r3, [r5, #0]
 8003a9a:	e7d6      	b.n	8003a4a <_free_r+0x22>
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	1821      	adds	r1, r4, r0
 8003aa0:	428b      	cmp	r3, r1
 8003aa2:	bf04      	itt	eq
 8003aa4:	6819      	ldreq	r1, [r3, #0]
 8003aa6:	685b      	ldreq	r3, [r3, #4]
 8003aa8:	6063      	str	r3, [r4, #4]
 8003aaa:	bf04      	itt	eq
 8003aac:	1809      	addeq	r1, r1, r0
 8003aae:	6021      	streq	r1, [r4, #0]
 8003ab0:	6054      	str	r4, [r2, #4]
 8003ab2:	e7ca      	b.n	8003a4a <_free_r+0x22>
 8003ab4:	bd38      	pop	{r3, r4, r5, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20011390 	.word	0x20011390

08003abc <_Unwind_GetDataRelBase>:
 8003abc:	b508      	push	{r3, lr}
 8003abe:	f7ff ff01 	bl	80038c4 <abort>

08003ac2 <_Unwind_GetTextRelBase>:
 8003ac2:	b508      	push	{r3, lr}
 8003ac4:	f7ff fffa 	bl	8003abc <_Unwind_GetDataRelBase>

08003ac8 <_init>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr

08003ad4 <_fini>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr
